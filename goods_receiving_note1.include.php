<?/*6/19/2008 2:17:33 PM yinsee- fix printing bug where GRN Summary appear multiple page (still count for items that have no variance)- grn performance sql error when sku_item_code is blank (invalid sku item)9/8/2008 4:37:09 PM yinsee- move update_po_receiving_count from grn_approval.acount.php- call update delivered items when view from grr report (ajax=1)8/3/2009 3:29:29 PM Andy- Add Reset function8/20/2009 5:20:41 PM Andy- set by_account = 0 when grn reset4/28/2010 5:35:39 PM Andy- Fix printing always print out additional 1 blank page bugs.- make grn variance report printing able to set printing size using config8/6/2010 4:43:12 PM Andy- Add when GRN reset update sku monitoring group items (need config)9/27/2010 1:51:53 PM Andy- Fix a bugs when update sku items cost slow down the system.10/21/2010 6:33:11 PM Justin- Added page navigation and fix some of the bugs were found when printing Correction Sheet report- Added config for last page of this report and follow standard as CN report printing.- Changed the default items print per page from 15 to 18.10/27/2010 5:52:21 PM Justin- Fixed the round up for grn cost from 3 to 4 for Performance report.- Added the last page checking that used from template.- Changed the GRN Performance and Variance report to have config control on item per page and last page.- Added the selection from vendor to retrieve all information from vendor.4/5/2011 11:59:18 AM Justin- Added selling price to take from PO.4/13/2011 5:48:05 PM Justin- Changed the suggested selling price to take from selling price from SKU item (sku_items_price).- Removed the selling price which taken from PO since no longer use.6/24/2011 12:30:31 PM Justin- Applied when get item list, pick up sku item's doc_allow_decimal.6/24/2011 4:12:49 PM Andy- Make all branch default sort by sequence, code.7/13/2011 10:47:12 AM Justin- Added copy po items feature for the share with handheld.- Modified to copy po items to handle between insertion into between tmp_grn_items or grn_items.7/15/2011 4:04:41 PM Justin- Added grn total amount and variance recalculate functions for handheld purpose.- Added the ability to store po items between tmp and grn items tables.7/26/2011 6:04:41 PM Justin- Fixed the update total selling stopped while it is 0 amount.8/8/2011 11:05:11 AM Justin- Modified the round up for cost to base on config.- Modified the Ctn and Pcs round up to base on config set.2/24/2012 10:10:32 AM Justin- Added new feature to capture IBT DO items and becomes GRN items.- Added new ability to retrieve do items info.4/20/2012 5:43:05 PM Alex- add packing uom code =>load_grn_items()7/5/2012 5:27:23 PM Justin- Enhanced to capture DO items while DO is IBT Credit Sales from franchise.7/12/2012 10:20:23 AM Justin- Bug fixed to separate both franchise and skip auto generate GRN checking while import items from DO.7/13/2012 4:56:23 PM Justin- Enhanced to pick up packing UOM fraction.7/25/2012 12:25 PM Justin- Added to pick up packing UOM fraction while printing report.8/24/2012 11:52 AM Justin- Enhanced to pickup related invoice info.9/28/2012 4:42 PM Justin- Fixed bug of PO cancellation date show in template always show as latest date.10/7/2013 6:14 PM Justin- Enhanced to calculate total qty and cost by multiple branches.10/16/2013 9:29 AM Justin- Bug fixed on sql error.10/17/2014 12:03 PM Justin- Bug fixed on update PO items delivered some times not working properly.*/require_once("vendor_sku.include.php");if($config['po_enable_ibt']){    include_once("masterfile_sku_monitoring_group.include.php");}function load_grn_header($grn_id, $branch_id){	global $con, $smarty, $sessioninfo;	$q1=$con->sql_query("select grn.*, vendor.description as vendor, category.description as department, user.u, user2.u as acc_u, b.code as branch_codefrom grn left join user on user_id = user.id left join user user2 on by_account = user2.id left join vendor on vendor_id = vendor.id left join category on grn.department_id = category.id left join branch b on b.id = grn.branch_idwhere grn.id=$grn_id and grn.branch_id=$branch_id");	$grn = $con->sql_fetchrow($q1);		$grr=load_grr_item_header(intval($grn['grr_item_id']),$branch_id);    if ($grr['po_id']>0) $grn['po_items']=load_po_items($grr['doc_no']);	elseif($grr['do_id']>0) $grn['po_items'] = load_do_items($grr['doc_no']);	$smarty->assign("grr", $grr);		if($grn['approval_history_id']>0){		$q2=$con->sql_query("select i.timestamp, i.log, i.status, user.u from branch_approval_history_items i left join branch_approval_history h on i.approval_history_id=h.id and i.branch_id=h.branch_id left join user on i.user_id = user.id where h.ref_table = 'grn' and i.branch_id=$branch_id and h.ref_id=$grn_id order by i.timestamp");		$smarty->assign("approval_history", $con->sql_fetchrowset($q2));		}		if(preg_match("/^\|$sessioninfo[id]\|/", $grn['approvals'])) 		$grn['is_approval'] = 1;	return $grn;}function load_grn_items($grn_id, $branch_id, $po_items, $use_tmp = false){	global $con, $sessioninfo; 	$form=$_REQUEST;	$owner_filter='';			if($use_tmp){		$table="tmp_grn_items";		$owner_filter=" and tgi.user_id=$sessioninfo[id] ";		}	else{		$table="grn_items";	}	$q1=$con->sql_query("select tgi.*, sku_items.mcode, sku_items.sku_item_code, sku_items.description, 						 u1.code as order_uom, u2.code as selling_uom, u1.fraction as uom_fraction,						 u2.fraction as selling_uomf, sku_items.artno,sku_items.packing_uom_id as master_uom_id,						 ifnull(sip.price, sku_items.selling_price) as sug_selling_price, sku_items.sku_id, sku_items.doc_allow_decimal, puom.code as packing_uom_code, puom.fraction as packing_uom_fraction						 from $table tgi						 left join sku_items on sku_item_id = sku_items.id						 left join uom puom on puom.id=sku_items.packing_uom_id						 left join uom u1 on tgi.uom_id = u1.id						 left join uom u2 on tgi.selling_uom_id = u2.id						 left join sku_items_price sip on sip.sku_item_id = sku_items.id and sip.branch_id = tgi.branch_id						 where tgi.grn_id=$grn_id and tgi.branch_id=$branch_id $owner_filter order by tgi.id") or die(mysql_error());	$items = array();	while($r=$con->sql_fetchrow($q1)){		if ($po_items){	        foreach($po_items as $k=>$pi){	        	if ($pi['compared']){					continue; // skip compared rows				} 	            if ($pi['sku_item_id'] == $r['sku_item_id']){	                $r['po_disc_remark'] = $pi['disc_remark'];	                $r['po_tax'] = $pi['tax'];	                $r['po_order_ctn'] = $pi['qty'];	                $r['po_order_pcs'] = $pi['qty_loose'];	                $r['po_foc_ctn'] = $pi['foc'];	                $r['po_foc_pcs'] = $pi['foc_loose'];	                $r['po_pcs'] = $pi['qty_loose'] + $pi['foc_loose'];	                $r['po_ctn'] = $pi['qty'] + $pi['foc'];	                $r['po_uom'] = $pi['order_uom'];	                $r['po_uomf'] = $pi['uomf'];	                if ($r['po_uomf']==0){					    $r['po_uom'] = 'EACH';						$r['po_uomf'] = 1;					}					if ($r['po_item_id']==0){						$r['po_item_id'] = $pi['id'];					}															//set if the item is foc.					if ($foc_item)					{						foreach($foc_item as $k_foc=>$v_foc){							if($r['sku_item_id']==$k_foc){								$r['is_foc']=1;								$r['foc_id']=$v_foc;							}						}       		            	}					$po_items[$k]['compared'] = 1; // mark as compared	            	break;				}			}		}		if(!$r['cost']){			$r['po_cost']='FOC';			$r['cost']='FOC';		}    		$items[$r['id']] = $r;	}	return $items;}function load_grr_item_header($grr_item_id, $branch_id){	global $con, $config, $sessioninfo;		$q1=$con->sql_query("select grr_items.*, grr.*, vendor.*, grr.id as grr_id, grr_items.id as grr_item_id, 						 vendor.description as vendor, dept.grn_get_weight, dept.description as department, user.u,						 rcv.u as rcv_u, vendor.code as vendor_code,						 if(bv.account_id = '' or bv.account_id is null, vendor.account_id, bv.account_id) as account_id						 from grr_items						 left join grr on grr_items.grr_id = grr.id and grr_items.branch_id = grr.branch_id						 left join user on grr.user_id = user.id						 left join user rcv on grr.rcv_by = rcv.id						 left join vendor on grr.vendor_id = vendor.id						 left join branch_vendor bv on bv.vendor_id = vendor.id and bv.branch_id = grr_items.branch_id						 left join category dept on grr.department_id = dept.id						 where grr.branch_id=$branch_id and grr_items.id=$grr_item_id						 order by grr_items.id");	$grr = $con->sql_fetchrow($q1);	$con->sql_freeresult($q1);		if($grr['type']=='DO' && $grr['doc_no']!='' && ($config['do_skip_generate_grn'] || $sessioninfo['branch_type'] == "franchise")){		if($sessioninfo['branch_type'] == "franchise") $filter = "debtor_id = ".mi($sessioninfo['debtor_id'])." and do_type = 'credit_sales'";		else $filter = "do_branch_id = ".mi($branch_id)." and do_type = 'transfer'";		$q3 = $con->sql_query("select *, id as do_id from do where do_no = ".ms($grr['doc_no'])." and ".$filter);		if($con->sql_numrows($q3) > 0){ // means is IBT DO			$grr_do = $con->sql_fetchrow($q3);			$grr_do['is_ibt_do'] = true;			$grr = $grr + $grr_do;		}		$con->sql_freeresult($q3);	}elseif($grr['type']=='PO' && $grr['doc_no']!=''){		// get additional PO information if po is not empty		$q2=$con->sql_query('select po.*, po.remark as po_remark1, po.remark2 as po_remark2, 							 branch_approval_history.flow_approvals,user.u as po_u 							 from po 							 left join user on po.user_id = user.id 							 left join branch_approval_history on po.approval_history_id = branch_approval_history.id and branch_approval_history.branch_id = po.branch_id 							 where po_no = '. ms($grr['doc_no']));		$grr_po = $con->sql_fetchrow($q2);		$con->sql_freeresult($q2);		$grr_po['sdiscount']=unserialize($grr_po['sdiscount']);		$grr_po['rdiscount']=unserialize($grr_po['rdiscount']);		$grr_po['po_remark1']=unserialize($grr_po['po_remark1']);		$grr_po['po_remark2']=unserialize($grr_po['po_remark2']);		$grr_po['cancel_date']=dmy_to_sqldate($grr_po['cancel_date']);		// merge array		$grr = $grr + $grr_po;				if($config['grn_summary_show_related_invoice']){			$q1 = $con->sql_query("select group_concat(gi.doc_no order by 1 separator ', ') as related_invoice from grr_items gi where gi.type='INVOICE' and gi.grr_id=".mi($grr['grr_id'])." and gi.branch_id=".mi($grr['branch_id']));					$tmp = $con->sql_fetchassoc($q1);			$con->sql_freeresult($q1);			$grr['related_invoice'] = $tmp['related_invoice'];		}	}		return $grr;}function copy_po_items($doc_no, $grn_id, $branch_id, $use_tmp=true){	global $con, $config, $sessioninfo;	if($use_tmp) $gi_table="tmp_grn_items";	else $gi_table="grn_items";		$res1 = $con->sql_query("select pi.id as po_item_id, pi.selling_price, pi.qty_loose as po_pcs, 							 pi.qty as po_ctn, pi.discount, pi.tax, pi.disc_remark, 							 (pi.qty + pi.foc) as ctn, (pi.qty_loose + pi.foc_loose) as pcs, 							 pi.sku_item_id, pi.artno_mcode, pi.order_price as po_cost, 							 u1.id as uom_id,u2.id as selling_uom_id,u1.fraction as uom_fraction, 							 u2.fraction as selling_uom_fraction, pi.order_uom_fraction as order_uom_fraction, 							 pi.is_foc, po.deliver_to, po.po_option, pi.qty_allocation, pi.qty_loose_allocation, 							 pi.foc_allocation, pi.foc_loose_allocation							 from po							 left join po_items pi on (po.id = pi.po_id and po.branch_id = pi.branch_id)							 left join sku_items on sku_item_id = sku_items.id							 left join uom u1 on pi.order_uom_id = u1.id							 left join uom u2 on pi.selling_uom_id = u2.id							 where po_no = '$doc_no'							 order by pi.id");	$insert_field = array("branch_id", "grn_id", "sku_item_id", "artno_mcode", "uom_id", "cost", "selling_uom_id", "selling_price", "po_qty", "po_cost","po_item_id", "weight");	if($use_tmp) $insert_field[] = "user_id";	while($r = $con->sql_fetchrow($res1)){		if($r['po_option'] == 3 && is_array(unserialize($r['deliver_to']))){			$r['selling_price'] = $r['ctn'] = $r['pcs'] = $r['po_ctn'] = $r['po_pcs'] = 0;			$deliver_to = unserialize($r['deliver_to']);			$ctn_list = unserialize($r['qty_allocation']);			$pcs_list = unserialize($r['qty_loose_allocation']);			$foc_ctn_list = unserialize($r['foc_allocation']);			$foc_pcs_list = unserialize($r['foc_loose_allocation']);				foreach($deliver_to as $dummy=>$bid){				$r['po_ctn'] += $ctn_list[$bid];				$r['po_pcs'] += $pcs_list[$bid];				$r['ctn'] += $ctn_list[$bid] + $foc_ctn_list[$bid];				$r['pcs'] += $pcs_list[$bid] + $foc_pcs_list[$bid];			}						// get HQ selling price			$prms['selling'] = true;			$tmp_data = get_sku_item_cost_selling(1, $r['sku_item_id'], $grr['rcv_date'], $prms);			$r['selling_price'] = $tmp_data['selling'];		}			$r['branch_id']=$branch_id;		$r['grn_id']=$grn_id;		if ($config['grn_group_same_item']){			if(!$item_used[$r['sku_item_id']]) 				$item_used[$r['sku_item_id']]=1;			else{				$q1=$con->sql_query("select id, po_qty, selling_price from $gi_table where sku_item_id = ".mi($r['sku_item_id'])." and grn_id = ".mi($r['grn_id'])." and branch_id = ".mi($r['branch_id']));				$r1 = $con->sql_fetchrow($q1);				if($r1){					$tmp_id=$r1['id'];					$po_qty=($r['ctn'] * $r['order_uom_fraction'] + $r['pcs'])+$r1['po_qty'];										if(!$r1['selling_price'])		    			$con->sql_query("update $gi_table set po_qty='$po_qty', selling_price='$r[selling_price]' where id=$tmp_id");					else		    			$con->sql_query("update $gi_table set po_qty='$po_qty' where id=$tmp_id");					continue;										}						}		}					    $r['user_id']=$sessioninfo['id'];					if ($r['order_uom_fraction']==0) 			$r['order_uom_fraction'] = 1;		if ($r['uom_id']==0) 			$r['uom_id']=1;		if ($r['selling_uom_id']==0) 			$r['selling_uom_id']=1;		$r['po_qty']=($r['ctn']*$r['order_uom_fraction']+$r['pcs']);				if ($r['po_qty']<=$r['delivered']) continue;			$amt=$r['po_cost']*($r['po_ctn']+$r['po_pcs']/$r['order_uom_fraction']);		$amt*=(100+$r['tax'])/100;		$amt=parse_formula($amt,$r['discount']);			$r['cost']=$amt/($r['ctn'] + $r['pcs']/$r['order_uom_fraction']);				$con->sql_query("insert into $gi_table ".mysql_insert_by_field($r, $insert_field));	}	$con->sql_freeresult($res1);}function copy_do_items($doc_no, $grn_id, $branch_id, $use_tmp=true){	global $con, $config, $sessioninfo;	if($use_tmp) $gi_table="tmp_grn_items";	else $gi_table="grn_items";		$insert_field = $item_used = array();	$res1 = $con->sql_query("select di.id as po_item_id, di.cost_price, di.selling_price, di.ctn, di.pcs, di.sku_item_id,							 di.artno_mcode, di.cost_price as po_cost, u.id as uom_id, 1 as selling_uom_id, 							 u.fraction as uom_fraction, do.do_markup, do.markup_type							 from do							 left join do_items di on do.id = di.do_id and do.branch_id = di.branch_id							 left join sku_items on sku_item_id = sku_items.id							 left join uom u on di.uom_id = u.id							 where do_no = '$doc_no' and do.checkout=1 and do.approved=1 and do.active=1 							 having di.ctn > 0 or di.pcs > 0							 order by di.id");	$insert_field = array("branch_id", "grn_id", "sku_item_id", "artno_mcode", "uom_id", "cost", "selling_uom_id", "selling_price", "po_qty", "po_cost","po_item_id", "weight");	if($use_tmp) $insert_field[] = "user_id";	while($r = $con->sql_fetchassoc($res1)){		$r['branch_id']=$branch_id;		$r['grn_id']=$grn_id;		if ($config['grn_group_same_item']){			if(!$item_used[$r['sku_item_id']]) 				$item_used[$r['sku_item_id']]=1;			else{				$q1=$con->sql_query("select id, po_qty, selling_price from $gi_table where sku_item_id = ".mi($r['sku_item_id'])." and grn_id = ".mi($r['grn_id'])." and branch_id = ".mi($r['branch_id']));				$r1 = $con->sql_fetchrow($q1);				if($r1){					$tmp_id=$r1['id'];					$po_qty=($r['ctn'] * $r['uom_fraction'] + $r['pcs'])+$r1['po_qty'];										if(!$r1['selling_price'])		    			$con->sql_query("update $gi_table set po_qty='$po_qty', selling_price='$r[selling_price]' where id=$tmp_id");					else		    			$con->sql_query("update $gi_table set po_qty='$po_qty' where id=$tmp_id");					continue;										}						}		}					    $r['user_id']=$sessioninfo['id'];		if ($r['uom_fraction']==0)			$r['uom_fraction'] = 1;		if ($r['uom_id']==0) 			$r['uom_id']=1;		if ($r['selling_uom_id']==0) 			$r['selling_uom_id']=1;		$r['po_qty']=($r['ctn']*$r['uom_fraction']+$r['pcs']);		if($r['do_markup']){			$temp = array();			$temp['do_markup_arr'] = explode("+", $r['do_markup']);			if($r['markup_type']=='down'){				$temp['do_markup_arr'][0] *= -1;				$temp['do_markup_arr'][1] *= -1;			}			if($temp['do_markup_arr'][0]){				$r['cost_price'] = $r['cost_price'] * (1+($temp['do_markup_arr'][0]/100));			}			if($temp['do_markup_arr'][1]){				$r['cost_price'] = $r['cost_price'] * (1+($temp['do_markup_arr'][1]/100));			}		}				$amt=$r['cost_price']*($r['ctn']+$r['pcs']/$r['uom_fraction']);		//$amt*=(100+$r['tax'])/100;		//$amt=parse_formula($amt,$r['discount']);			$r['cost']=$amt/($r['ctn'] + $r['pcs']/$r['uom_fraction']);				$con->sql_query("insert into $gi_table ".mysql_insert_by_field($r, $insert_field));	}	$con->sql_freeresult($res1);}if (!function_exists('load_po_items')){	function load_po_items($doc_no){		global $con, $smarty;				$q1=$con->sql_query("select pi.*, 0 as compared, u1.code as order_uom, 							 u2.code as sell_uom, u1.fraction as uomf, u2.fraction as selling_uomf,							 po.po_no, po.po_date, po.po_option, po.deliver_to							 from po 							 left join po_items pi on (po.id = pi.po_id and po.branch_id = pi.branch_id)							 left join uom u1 on pi.order_uom_id = u1.id							 left join uom u2 on pi.selling_uom_id = u2.id							 where po_no = '$doc_no' order by pi.id") or die(mysql_error());	    $foc_annotations = array();	    $foc_id = 0;		while($r1=$con->sql_fetchrow($q1)){			if ($r1['is_foc']){				$foc_id++;				$r1['foc_id'] = $foc_id;				$foc_item[$r1['sku_item_id']]=$r1['foc_id'];			}						if($r1['po_option'] == 3 && is_array(unserialize($r1['deliver_to']))){				$r1['qty'] = $r1['qty_loose'] = $r1['foc'] = $r1['foc_loose'] = 0;				$deliver_to = unserialize($r1['deliver_to']);				$ctn_list = unserialize($r1['qty_allocation']);				$pcs_list = unserialize($r1['qty_loose_allocation']);				$foc_ctn_list = unserialize($r1['foc_allocation']);				$foc_pcs_list = unserialize($r1['foc_loose_allocation']);					foreach($deliver_to as $dummy=>$bid){					$r1['qty'] += $ctn_list[$bid];					$r1['qty_loose'] += $pcs_list[$bid];					$r1['foc'] += $foc_ctn_list[$bid];					$r1['foc_loose'] += $foc_pcs_list[$bid];				}			}					    $r1['foc_share_cost'] = unserialize($r1['foc_share_cost']);		    if ($r1['foc_share_cost']){				foreach($r1['foc_share_cost'] as $i => $dummy){				    if ($foc_annotations[$i] != '') $foc_annotations[$i] .= "/";					$foc_annotations[$i] .= "$foc_id";				}					}					$po_items[]=$r1;		}		$smarty->assign("foc_annotations", $foc_annotations);		return $po_items;	}}if (!function_exists('load_do_items')){	function load_do_items($doc_no){		global $con, $smarty;				$do_items = array();		$q1=$con->sql_query("select di.id, 0 as compared, di.sku_item_id, di.ctn as qty, di.pcs as qty_loose, 							 u.id as order_uom_id, u.code as order_uom, u.code as sell_uom, u.fraction as uomf							 from do 							 left join do_items di on (do.id = di.do_id and do.branch_id = di.branch_id)							 left join uom u on di.uom_id = u.id							 where do.do_no = '$doc_no' order by di.id");	    //$foc_annotations = array();	    //$foc_id = 0;		while($r1=$con->sql_fetchrow($q1)){			/*if ($r1['is_foc']){				$foc_id++;				$r1['foc_id'] = $foc_id;				$foc_item[$r1['sku_item_id']]=$r1['foc_id'];			}					    $r1['foc_share_cost'] = unserialize($r1['foc_share_cost']);		    if ($r1['foc_share_cost']){				foreach($r1['foc_share_cost'] as $i => $dummy){				    if ($foc_annotations[$i] != '') $foc_annotations[$i] .= "/";					$foc_annotations[$i] .= "$foc_id";				}					}*/			$do_items[]=$r1;		}		//$smarty->assign("foc_annotations", $foc_annotations);		return $do_items;	}}//print all grn type documents.function grn_print($grn_id, $branch_id, $tpl, $only_variance=false){	global $con, $smarty, $config;	$form=$_REQUEST;	$con->sql_query("select * from branch where id=$branch_id");	$smarty->assign("branch", $con->sql_fetchrow());	$grn=load_grn_header($grn_id, $branch_id);	$smarty->assign("grn", $grn);		if($form['a']=='print_grn_complete'){		//get number of PO in this GRR		$con->sql_query("select count(*) from grr_items where type='PO' and grr_id=$grn[grr_id] and branch_id=$branch_id");		$tpo = $con->sql_fetchrow();		$smarty->assign("total_po", $tpo[0]);			//get PO Qty		$con->sql_query("select doc_no from grr_items where grr_id=$grn[grr_id] and id=$grn[grr_item_id] and branch_id=$grn[branch_id]");		$po_no = $con->sql_fetchrow();				$con->sql_query("select sum(qty_loose+foc_loose) as pcs, sum(qty+foc) as ctn from po_items 	left join po on po_items.branch_id=po.branch_id and po_items.po_id=po.id 	where po_no='$po_no[0]'");	    $tpo = $con->sql_fetchrow();		$smarty->assign("po_qty", "Ctn: $tpo[ctn] / Pcs: $tpo[pcs]");			// get GRN Qty		$con->sql_query("select sum(if(acc_ctn>0,acc_ctn,ctn)) as ctn, sum(if(acc_pcs>0,acc_pcs,pcs)) as pcs from grn_items where grn_id=$grn_id and branch_id=$grn[branch_id]");		$grnqty = $con->sql_fetchrow();		$smarty->assign("grn_qty", "Ctn: $grnqty[ctn] / Pcs: $grnqty[pcs]");		// update print counter		$con->sql_query("update grn set print_counter=print_counter+1, last_update=last_update where id=$grn_id and branch_id=$branch_id");	}	    if($form['print_grn_report']){		$items=load_grn_items($grn_id, $branch_id, $grn['po_items']);				if ($only_variance)		{			$items2 = $items;			$items = array();			if ($grn['have_variance'] || $grn['account_amount'] != $grn['final_amount'])			{				foreach ($items2 as $i)				{					$po_qty = $i['po_ctn']*$i['po_uomf']+$i['po_pcs'];					$grn_qty = $i['ctn']*$i['uom_fraction']+$i['pcs'];					$var1 = $grn_qty - $po_qty;										if ($i['acc_ctn']!=''|| $i['acc_pcs']!='')						$var2 = $i['acc_ctn']*$i['uom_fraction']+$i['acc_pcs'];					else						$var2=0;											if ($var1!=0 or $var2!=0) {						$items[] = $i;					}				}			}			// if the result is empty, insert one item so that we can print			if (count($items)<= 0) $items[] = array_pop($items2);		}		// It is A4 paper and landscape		if(preg_match("/^\b$tpl\b/", "goods_receiving_note_approval.correction.print.tpl")){			$item_per_page= $config['grn_print_item_per_page']?$config['grn_print_item_per_page']:18;		    $item_per_lastpage = $config['grn_print_item_last_page']>0 ? $config['grn_print_item_last_page'] : $item_per_page-3;		}else{			$item_per_page= $config['grn_report_print_item_per_page']?$config['grn_report_print_item_per_page']:23;		    $item_per_lastpage = $config['grn_report_print_item_last_page']>0 ? $config['grn_report_print_item_last_page'] : $item_per_page-5;		}		$totalpage = 1 + ceil((count($items)-$item_per_lastpage)/$item_per_page);		for ($i=0,$page=1;$page<=$totalpage;$i+=$item_per_page,$page++){			if($page == $totalpage) $smarty->assign("is_last_page", 1);			$smarty->assign("page", "Page $page of $totalpage");	        $smarty->assign("start_counter", $i);	        $smarty->assign("PAGE_SIZE", ($page < $totalpage) ? $item_per_page : $item_per_lastpage);	        $grn_items = array_slice($items,$i,$item_per_page);	        $smarty->assign("grn_items", $grn_items);			$smarty->display($tpl);			$smarty->assign("skip_header",1);		}    }    if($form['print_grn_perform_report'])		print_grn_performance($grn);}function update_total_selling($id, $bid){	global $con;    //print "<li> updating $bid,$id";    $con->sql_query("select sum(if (grn_items.acc_ctn is null and grn_items.acc_pcs is null, grn_items.ctn *rcv_uom.fraction + grn_items.pcs, grn_items.acc_ctn *rcv_uom.fraction + grn_items.acc_pcs)*grn_items.selling_price/sell_uom.fraction) as sellfrom grn_itemsleft join uom sell_uom on grn_items.selling_uom_id=sell_uom.idleft join uom rcv_uom on grn_items.uom_id=rcv_uom.idwhere grn_id=$id and branch_id=$bid") or die(mysql_error());    $t = $con->sql_fetchrow();    //if ($t[0]==0) return;    $con->sql_query("update grn set last_update=last_update,total_selling = ".mf($t[0])." where id=$id and branch_id=$bid");}function update_total_amount($id, $bid){	global $con;    //print "<li> updating $bid,$id";    $con->sql_query("select sum(	round((if(grn_items.acc_ctn is null and grn_items.acc_pcs is null, (grn_items.ctn * rcv_uom.fraction) + grn_items.pcs, (grn_items.acc_ctn * rcv_uom.fraction) + grn_items.acc_pcs)) * if(grn_items.acc_cost is null, grn_items.cost, grn_items.acc_cost) / rcv_uom.fraction, 2) +	round(((if(grn_items.acc_ctn is null and grn_items.acc_pcs is null, (grn_items.ctn * rcv_uom.fraction) + grn_items.pcs, (grn_items.acc_ctn *rcv_uom.fraction) + grn_items.acc_pcs)) * if(grn_items.acc_cost is null, grn_items.cost, grn_items.acc_cost) / rcv_uom.fraction) *	(grn.grn_tax/100), 2)) as amount					 from grn_items					 left join grn on grn.id = grn_items.grn_id and grn.branch_id = grn_items.branch_id					 left join uom sell_uom on grn_items.selling_uom_id=sell_uom.id					 left join uom rcv_uom on grn_items.uom_id=rcv_uom.id					 where grn_items.grn_id=$id and grn_items.branch_id=$bid and grn_items.item_check=0") or die(mysql_error()); 	$t = $con->sql_fetchrow();    //if ($t[0]==0) return;    $con->sql_query("update grn set last_update=last_update,amount=".mf($t[0]).",final_amount=".mf($t[0])." where id=$id and branch_id=$bid");	return mf($t[0]);}function update_total_variance($id, $bid){	global $con;    //print "<li> updating $bid,$id";    $con->sql_query("select sum(if (grn_items.acc_ctn is null and grn_items.acc_pcs is null,(grn_items.ctn * rcv_uom.fraction) + grn_items.pcs, (grn_items.acc_ctn * rcv_uom.fraction) + grn_items.acc_pcs)-grn_items.po_qty) as variance					 from grn_items					 left join uom rcv_uom on grn_items.uom_id=rcv_uom.id					 where grn_id=$id and branch_id=$bid and item_check=0					 group by grn_items.id") or die(mysql_error());    while ($r=$con->sql_fetchrow()){		$ttl_variance += abs($r['variance']);	}    //if ($t[0]==0) return;    $con->sql_query("update grn set last_update=last_update,have_variance=".mi($ttl_variance)." where id=$id and branch_id=$bid");}function print_grn_performance($grn){	global $con, $smarty, $sessioninfo, $branch_id, $config;    $grr_item_id = intval($grn['grr_item_id']);    	$con->sql_query("select grr_items.*, grr.*, vendor.*, grr.id as grr_id, grr_items.id as grr_item_id, vendor.description as vendor, dept.grn_get_weight, dept.description as department, user.u, rcv.u as rcv_u,vendor.code as vendor_code, if(bv.account_id = '' or bv.account_id is null, vendor.account_id, bv.account_id) as account_idfrom grr_items left join grr on grr_items.grr_id = grr.id and grr_items.branch_id = grr.branch_id left join user on grr.user_id = user.id left join user rcv on grr.rcv_by = rcv.id left join vendor on grr.vendor_id = vendor.id left join branch_vendor bv on bv.vendor_id = vendor.id and bv.branch_id = grr_items.branch_idleft join category dept on grr.department_id = dept.id where grr.branch_id=$branch_id and grr_items.id=$grr_item_id order by grr_items.id");	$grr=$con->sql_fetchrow();		$price_date = date("Y-m-d",strtotime("+1 day",strtotime($grr['rcv_date'])));	$grn['price_date']=$price_date;	$items = array();	$rs1 = $con->sql_query("select grn_items.*, if(grn_items.acc_ctn is null and grn_items.acc_pcs is null, grn_items.ctn *u1.fraction + grn_items.pcs, grn_items.acc_ctn *u1.fraction + grn_items.acc_pcs) as qty , round(if (grn_items.acc_cost is null,grn_items.cost,grn_items.acc_cost)/u1.fraction, ".mi($config['global_cost_decimal_points']).") as grn_cost, sku_items.mcode, sku_items.sku_item_code, sku_items.description, u1.code as order_uom, u2.code as sell_uom, u1.fraction as uom_fraction, u2.fraction as selling_uomf, sku_items.artno, grn_items.selling_price/u2.fraction as grn_price, sku_items.selling_price as master_price from grn_items left join sku_items on grn_items.sku_item_id=sku_items.id left join uom u1 on grn_items.uom_id=u1.id left join uom u2 on grn_items.selling_uom_id=u2.id where grn_id=$grn[id] and grn_items.branch_id=$grn[branch_id] order by grn_items.id") or die(mysql_error());	while($r=$con->sql_fetchrow($rs1)){		//get selling price for GRN		$query2=$con->sql_query("select siph.price  as grn_price from sku_items_price_history siph left join sku_items on sku_items.id=sku_item_id where sku_item_id=$r[sku_item_id] and siph.branch_id=$branch_id and siph.added < '$price_date' order by siph.added desc limit 1");		$r2=$con->sql_fetchrow($query2);				if($r2) $r=array_merge($r, $r2);				$r['total_cost']=$r['grn_cost']*$r['qty'];				if(!$temp[$r['sku_item_code']])			$temp[$r['sku_item_code']]=$r;		else{			$temp[$r['sku_item_code']]['qty']=$items[$r['sku_item_code']]['qty']+$r['qty'];			$temp[$r['sku_item_code']]['total_cost']=$items[$r['sku_item_code']]['total_cost']+$r['total_cost'];			$temp[$r['sku_item_code']]['grn_cost']=$temp[$r['sku_item_code']]['total_cost']/$temp[$r['sku_item_code']]['qty'];				}				$items = $temp;	}	//IF FROM PO GET THE FOC.	if($grr['type']=='DO' && $grr['doc_no']!='' && $config['do_skip_generate_grn']){		if($sessioninfo['type'] == "franchise") $filter = "debtor_id = ".mi($sessioninfo['debtor_id']);		else $filter = "do_branch_id = ".mi($branch_id);		$q1 = $con->sql_query("select *, id as do_id from do where do_no = ".ms($grr['doc_no'])." and ".$filter);		if($con->sql_numrows($q1) > 0){ // means is IBT DO			$grr_do = $con->sql_fetchrow($q3);			$grr_do['is_ibt_do'] = true;			$grr = $grr + $grr_do;		}		$con->sql_freeresult($q3);	}elseif($grr['type']=='PO' && $grr['doc_no']!=''){		$q0=$con->sql_query("select if(po_items.foc is null, sum(po_items.foc_loose),sum(po_items.foc))*uom.fraction as po_foc, sku_items.sku_item_codefrom po_items left join po on po.id=po_items.po_id and po.branch_id=po_items.branch_id left join uom on uom.id=po_items.order_uom_id left join sku_items on sku_items.id=sku_item_id where po_no='$grr[doc_no]' group by sku_item_code");		while ($r0=$con->sql_fetchrow($q0))			$items[$r0['sku_item_code']]['po_foc']=abs($r0['po_foc']);	}	if ($items)		$where =" sku_item_code in ('" . join("','", array_keys($items)) . "')";	else		die("Items in this GRN are invalid");		//FROM POS	$q3 = $con->sql_query("select si.sku_item_code, sum(qty) as sold_qty fromsku_items_sales_cache_b".$branch_id." tblleft join sku_items si on si.id=tbl.sku_item_idwhere tbl.date>=".ms($grr['rcv_date'])." and $where group by si.sku_item_code");	while ($r3=$con->sql_fetchrow($q3))	$pos_qty[$r3['sku_item_code']]=$r3;	//FROM DO	$q4=$con->sql_query("select sku_item_code, sum(do_items.ctn *uom.fraction + do_items.pcs) as qty  from do_items left join do on do.id=do_items.do_id and do.branch_id=do_items.branch_idleft join sku_items on sku_item_id = sku_items.id left join uom on do_items.uom_id=uom.idwhere $where and do_items.branch_id=$branch_id and do.approved and do.checkout and do.status<2 and do_date>='$grr[rcv_date]' group by sku_item_code", false, false);	while ($r4=$con->sql_fetchrow($q4))		$do_qty[$r4['sku_item_code']]=$r4;			$smarty->assign("grn", $grn);	$smarty->assign("pos_qty", $pos_qty);	$smarty->assign("do_qty", $do_qty);	$smarty->assign("grr", $grr);		$item_per_page= $config['grn_report_print_item_per_page']?$config['grn_report_print_item_per_page']:23;    $item_per_lastpage = $config['grn_report_print_item_last_page']>0 ? $config['grn_report_print_item_last_page'] : $item_per_page-5;	$totalpage = 1 + ceil((count($items)-$item_per_lastpage)/$item_per_page);	for ($i=0,$page=1;$page<=$totalpage;$i+=$item_per_page,$page++){		if($page == $totalpage) $smarty->assign("is_last_page", 1);		$smarty->assign("page", "Page $page of $totalpage");        $smarty->assign("start_counter", $i);        $smarty->assign("PAGE_SIZE", ($page < $totalpage) ? $item_per_page : $item_per_lastpage);        $grn_items = array_slice($items,$i,$item_per_page);        $smarty->assign("grn_items", $grn_items);        if($config['grn_perform_alt_print_template'])   $smarty->display($config['grn_perform_alt_print_template']);		else	$smarty->display('goods_receiving_note.perform_print.tpl');		$smarty->assign("skip_header",1);	}}if (!function_exists('init_selection')){function init_selection(){	global $con, $smarty, $sessioninfo;	// default action is create New PO	$con->sql_query("select id, code from branch where active=1 order by sequence,code");	$smarty->assign("branch", $con->sql_fetchrowset());		$con->sql_query("select id, code, fraction from uom where active=1 order by code");	$smarty->assign("uom", $con->sql_fetchrowset());		// manager and above can see all department	if ($sessioninfo['level'] < 9999){		if (!$sessioninfo['departments'])			$depts = "id in (0)";		else			$depts = "id in (" . join(",", array_keys($sessioninfo['departments'])) . ")";	}	else{		$depts = 1;	}		// show department option	$con->sql_query("select id, description from category where active and level = 2 and $depts order by description");	$smarty->assign("dept", $con->sql_fetchrowset());}}// update PO delivered statusfunction update_po_receiving_count($po_no){	global $con;		// reset all number to zero first...	$con->sql_query("update po_items left join po	on po_items.po_id = po.id and po_items.branch_id = po.branch_id 	set po_items.delivered = 0 where po_no=".ms($po_no));		$con->sql_query("select grn_items.*, uom.fraction from grn_items left join uom on uom_id = uom.id left join grn on grn_id = grn.id and grn_items.branch_id = grn.branch_id left join grr_items on grn.grr_item_id = grr_items.id and grn.branch_id = grr_items.branch_id where grn.active=1 and grn.status=1 and grr_items.type = 'PO' and grr_items.doc_no = ".ms($po_no)) or die(mysql_error());	$rcvq = array();	while($r=$con->sql_fetchrow()){		if ($r['po_item_id']=='') 			continue;					if ($bid==0) 			$bid = $r['branch_id'];		if ($r['acc_pcs']>0 || $r['acc_ctn']>0)			$rcvq[$r['po_item_id']] += $r['acc_pcs'] + $r['fraction']*$r['acc_ctn'];		else			$rcvq[$r['po_item_id']] += $r['pcs'] + $r['fraction']*$r['ctn'];		//print "<li> $r[po_item_id] = ".$rcvq[$r['po_item_id']];		//print_r($r);	}	if (!$rcvq) return;	foreach ($rcvq as $k=>$v){		$con->sql_query("update po_items set delivered = $v where id=$k and branch_id=$bid");	}}function update_sku_item_cost($id,$branch_id){	global $con;    //$con->sql_query("update sku_items_cost set changed=1 where branch_id=$branch_id and sku_item_id in (select sku_item_id from grn_items left join grn on grn_id=grn.id and grn_items.branch_id=grn.branch_id where grn_items.grn_id=$id and grn_items.branch_id=$branch_id and grn.approved=1 and grn.status<2 and grn.active=1)");    	//update sku_item_cost	$sql = "select distinct(sku_item_id) as sid	from grn_items	left join grn on grn_id=grn.id and grn_items.branch_id=grn.branch_id	where grn_items.grn_id=$id and grn_items.branch_id=$branch_id";	$q1 = $con->sql_query($sql);	$sid_list = array();	while($r = $con->sql_fetchrow($q1)){		$sid_list[] = mi($r['sid']);		if(count($sid_list)>=1000){ // maximum 1000 items per query			$con->sql_query("update sku_items_cost set changed=1 where branch_id=$branch_id and sku_item_id in (".join(',',$sid_list).")");			$sid_list = array();		}	}	if($sid_list){ // still got some items need to update		$con->sql_query("update sku_items_cost set changed=1 where branch_id=$branch_id and sku_item_id in (".join(',',$sid_list).")");	}}function do_reset($grn_id,$branch_id){	global $con,$sessioninfo,$config,$smarty;	$required_level = isset($config['doc_reset_level']) ? $config['doc_reset_level'] : 9999;	if($sessioninfo['level']<$required_level){        js_redirect(sprintf('Forbidden', 'GRN', BRANCH_CODE), "/goods_receiving_note.php");	}	$form=load_grn_header($grn_id,$branch_id);	$aid=$form['approval_history_id'];	$approvals=$form['approvals'];	$status = 0;	// insert approval history	$upd = array();	$upd['approval_history_id'] = $aid;	$upd['branch_id'] = $branch_id;	$upd['user_id'] = $sessioninfo['id'];	$upd['status'] = $status;	$upd['log'] = $_REQUEST['reason'];	$con->sql_query("insert into branch_approval_history_items ".mysql_insert_by_field($upd)) or die(mysql_error());	$con->sql_query("update branch_approval_history set status=$status where id = $aid and branch_id = $branch_id") or die(mysql_error());	// update sku item cost	update_sku_item_cost($grn_id,$branch_id);	// reset grn	$upd = array();	$upd['status'] = $status;	$upd['last_update'] = 'CURRENT_TIMESTAMP';	$upd['approved'] = 0;	$upd['by_account'] = 0;		$con->sql_query("update grn set ".mysql_update_by_field($upd)." where id=$grn_id and branch_id=$branch_id") or die(mysql_error());		// delete from vender sku history	$con->sql_query("delete from vendor_sku_history where branch_id = $branch_id and source= 'GRN' and ref_id = $grn_id");	// update po qty if type = 'PO'    $grr = $smarty->get_template_vars('grr');    if(!$grr){		$con->sql_query("select * from grr_items where branch_id=$branch_id and id=".mi($form['grr_item_id']));		$grr = $con->sql_fetchrow();		$con->sql_freeresult();	}	if($grr['po_id']>0&&$grr['type']=='PO'){        update_po_receiving_count($grr['doc_no']);        if($config['po_enable_ibt']){			update_sku_monitoring_group_items_changed($grr['doc_no'], $branch_id, $grn_id);		}	}	// save log    log_br($sessioninfo['id'], 'GRN', $grn_id, sprintf("GRN Reset (#$form[id])",$grn_id));    	header("Location: /goods_receiving_note.php?t=reset&id=$grn_id");	exit;}?>