<?php/*2/24/2012 12:54:43 PM Justin- Added new checking function to check sold S/N and show error msg toward user.07/12/2013 04:09 PM Justin- Bug fixed on pointing wrong have_sn, it should be 2 instead of 1.07/16/2013 03:53 PM Justin- Modified to change the status for S/N to wording instead of numberic.10/16/2013 4:02 PM Justin- Enhanced to have new feature that can auto generate S/N (need config).- Bug fixed on GRN that has been imported will still load back the imported items once other SKU item being set to use S/N.11/21/2013 2:01 PM Justin- Enhanced to show available GRN while SKU item is set to pre-list.- Enhanced to calculate the auto generate S/N by SKU instead of SKU item.6/19/2015 3:32 PM Justin- Enhanced to allow user can search by S/N.3/23/2017 4:20 PM Justin- Enhanced to auto transfer the S/N if found the GRN is IBT from DO Transfer.- Enhanced the validation to have new set of checking process for IBT GRN.3/29/2017 2:38 PM Justin- Bug fixed on system showing wrong receiving qty.- Bug fixed on system showing MYSQL error while transferring existing S/N.3/30/2017 4:34 PM Justin- Bug fixed on S/N which had sold will not be recorded into the grn items.3/31/2017 11:35 AM Justin- Bug fixed on system cannot get the sold list to be recorded into the grn items.2017-09-13 10:41 AM Qiu Ying- Bug fixed on treating special characters as wildcard character5/20/2019 10:39 AM William- Pickup report_prefix for enhance "GRN" and "GRR".2/7/2020 1:57 PM Justin- Bug fixed on PHP fatal error on PHP7.- Bug fixed on system disallowed user for importing the GRN while there are GRN item does not have any qty.*/include("include/common.php");//ini_set("display_errors",1);if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('MASTERFILE')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'MASTERFILE', BRANCH_CODE), "/index.php");$smarty->assign("sn_rows", 20);$smarty->assign("master_title", "GRN");class SKU_items_Serial_No_GRN_Imp extends Module{	var $page_size = 30;	    function _default(){		global $con, $smarty;		$this->first_load = 1;		$this->search();		$this->display("masterfile_sku_items.serial_no.import_items.tpl");	}	function save(){		global $con, $smarty, $sessioninfo, $LANG;		$form=$_REQUEST;		$err = $this->validate($form);		if(!$err){ // do insertion while does not have any errors			foreach($this->sn_items as $grn_id=>$sku_items){				$is_ibt = $form['ibt'][$grn_id]['is_ibt'];				$do_id = $form['ibt'][$grn_id]['do_id'];				$do_bid = $form['ibt'][$grn_id]['do_branch_id'];				foreach($sku_items as $sid=>$idx){					$ins['branch_id'] = $sessioninfo['branch_id'];					$ins['located_branch_id'] = $sessioninfo['branch_id'];					$ins['sku_item_id'] = $sid;					$ins['added'] = "CURRENT_TIMESTAMP";					$ins['created_by'] = $sessioninfo['id'];					$sn_list = explode("\n", $form['sn'][$grn_id][$sid]);					$new_sn_list = array();					for($i=0; $i<count($sn_list); $i++){ // loop all S/N from each sku item with different branches						$sn = trim($sn_list[$i]);						if(!$sn) continue;						$new_sn_list[] = $sn;											$ins['serial_no'] = strtoupper($sn);						$sql = $con->sql_query("select * from pos_items_sn where sku_item_id = ".mi($sid)." and serial_no = ".ms($sn));						$sn_info = $con->sql_fetchassoc($sql);						if($is_ibt && $do_id && $do_bid && $con->sql_numrows($sql)>0){							$upd = array();							$upd['located_branch_id'] = $sessioninfo['branch_id'];							$upd['last_update'] = 'CURRENT_TIMESTAMP';							$upd['status'] = 'Available';							$con->sql_query("update pos_items_sn set ".mysql_update_by_field($upd)." where id = ".mi($sn_info['id'])." and sku_item_id = ".mi($sid)." and serial_no = ".ms($sn));							$id = $sn_info['id'];							$remarks = "edit";						}else{							$con->sql_query("insert into pos_items_sn ".mysql_insert_by_field($ins));							$id = $con->sql_nextid();							$remarks = "add";						}						$con->sql_freeresult($sql);												/*if($sn_info['status']) $status = $sn_info['status'];						else $status = "Available";*/						$status = "Available";						// insert S/N history						$his_ins['pisn_id'] = $id;						$his_ins['branch_id'] = $ins['branch_id'];						$his_ins['sku_item_id'] = $ins['sku_item_id'];						$his_ins['located_branch_id'] = $sessioninfo['branch_id'];						$his_ins['serial_no'] = $ins['serial_no'];						$his_ins['remark'] = $remarks;						$his_ins['status'] = $status;						$his_ins['active'] = 1;						$his_ins['added'] = "CURRENT_TIMESTAMP";						$his_ins['user_id'] = $sessioninfo['id'];						$con->sql_query("insert into pos_items_sn_history ".mysql_insert_by_field($his_ins));					}					// update grn items for those imported S/N					if(count($new_sn_list) > 0){						if(isset($this->grn_sn_sold_list[$grn_id][$sid])){							foreach($this->grn_sn_sold_list[$grn_id][$sid] as $tmp_sn){								if(!in_array($tmp_sn, $new_sn_list)) $new_sn_list[] = $tmp_sn;							}						}												$sn_import = serialize($new_sn_list);						$con->sql_query("update grn_items set sn_import=".ms($sn_import)." where grn_id = ".mi($grn_id)." and branch_id = ".mi($sessioninfo['branch_id'])." and sku_item_id = ".mi($sid));					}				}				$grn_list[] = $grn_id;			}			$smarty->assign("grn_list", join(",",$grn_list));			$smarty->assign("branch_id", $sessioninfo['branch_id']);					}else{			$smarty->assign("item_check", $form['item_check']);			$smarty->assign("errm", $err);			$smarty->assign("ibt", $form['ibt']);			$smarty->assign("sn_items", $this->sn_items);		}		$this->first_load = 1;		$this->search();		//$this->print_sn($grn_id, $sessioninfo['branch_id']);	    $this->display('masterfile_sku_items.serial_no.import_items.tpl');	}	function validate($form){		global $con, $LANG, $sessioninfo;		$err = array();				$this->grn_sn_sold_list = $all_sn_by_si = array();		foreach($form['sn'] as $grn_id=>$sku_items){			foreach($sku_items as $sid=>$idx){				$r['mid'] = $form['mid'][$grn_id][$sid];				$r['sku_item_id'] = $form['sku_item_id'][$grn_id][$sid];				$is_ibt = $form['ibt'][$grn_id]['is_ibt'];				$do_id = $form['ibt'][$grn_id]['do_id'];				$do_bid = $form['ibt'][$grn_id]['do_branch_id'];				$q1 = $con->sql_query("select sku_item_code, description from sku_items where id = ".mi($r['sku_item_id']));				$tmp = $con->sql_fetchassoc($q1);				$con->sql_freeresult($q1);				$r['sku_item_code'] = $tmp['sku_item_code'];				$r['sku_description'] = $tmp['description'];				$r['qty'] = $form['qty'][$grn_id][$sid];				$r['sn'] = $form['sn'][$grn_id][$sid];				$sn_list = explode("\n", $form['sn'][$grn_id][$sid]);				$tmp_sn_list = $sn_list;				$duplicate_list = $db_duplicate_list = $all_duplicate_list = $curr_sn_list = $sn_sold_list = $db_diff_branch_list = array();				$ttl_sn=0;				// check total S/N keyed in whether matched with rcv qty				for($i=0; $i<count($sn_list); $i++){					//$sn = preg_replace("/[^A-Za-z0-9]/","",trim($sn_list[$i]));					$sn = trim($sn_list[$i]);					if(!$sn) continue;					$is_duplicated = "";					for($j=0; $j<count($tmp_sn_list); $j++){						//$tmp_sn = preg_replace("/[^A-Za-z0-9]/","",trim($tmp_sn_list[$j]));						$tmp_sn = trim($tmp_sn_list[$j]);						if($i == $j || !$tmp_sn) continue;						if($sn == $tmp_sn){							$is_duplicated = 1;						}					}					if($is_duplicated) $duplicate_list[$sn] = $sn; // found it is duplicated					$curr_sn_list[] = $sn;					$ttl_sn++;				}				$r['ttl_sn'] = $ttl_sn;				if($curr_sn_list) $sn_list = join("', '", $curr_sn_list);				if(count($all_sn_by_si[$sid]) > 0){					for($i=0; $i<count($curr_sn_list); $i++){						if(in_array($curr_sn_list[$i], $all_sn_by_si[$sid])){							$all_duplicate_list[$curr_sn_list[$i]] = $curr_sn_list[$i];						}					}				}				if(count($all_duplicate_list)>0){					$all_duplicated_list = join(", ", $all_duplicate_list);					$err['top'][$grn_id][$sid][] = sprintf($LANG['DO_SN_SKU_DUPLICATE'], "", $all_duplicated_list);				}													// S/N duplicated on current list				if(count($duplicate_list)>0){					$duplicated_list = join(", ", $duplicate_list);					$err['top'][$grn_id][$sid][] = sprintf($LANG['DO_SN_DUPLICATE'], "", "<br /> $duplicated_list");				}								// check if GRN is from IBT, then S/N must same with DO Transfer otherwise prompt error msg				if($is_ibt && $do_id && $do_bid){					$invalid_grn_sn_list = $curr_grn_sn_sold_list = array();					$filter = "di.do_id = ".mi($do_id)." and di.branch_id = ".mi($do_bid)." and di.sku_item_id = ".mi($sid);										$q1=$con->sql_query("select di.*										 from do_items di										 left join do on do_id = do.id and di.branch_id = do.branch_id										 where $filter and di.serial_no != '' and di.serial_no is not null										 order by di.id");										while($r1 = $con->sql_fetchassoc($q1)){						$do_serial_no = unserialize($r1['serial_no']);						if(count($do_serial_no) == 0) continue; // skip all the do items that does not have S/N												$ibt[$grn]['do_id'] = $r1['do_id'];						$ibt[$grn]['do_branch_id'] = $r1['branch_id'];												foreach($do_serial_no as $bid=>$do_sn_list){							$do_sn_list = explode("\n", $do_sn_list);							$curr_invalid_grn_sn_list = array();							$grn_do_sn_matched_count = 0;														foreach($curr_sn_list as $key=>$curr_sn){								// if the S/N is not found from DO items, record as error								if(!in_array($curr_sn, $do_sn_list)){									$curr_invalid_grn_sn_list[] = $curr_sn;								}else{									$q2 = $con->sql_query("select * from pos_items_sn where sku_item_id = ".mi($r1['sku_item_id'])." and serial_no = ".ms($curr_sn)." and located_branch_id = ".mi($sessioninfo['branch_id']));									// check against database that having existed S/N									$pisn_info = $con->sql_fetchassoc($q2);									$con->sql_freeresult($q2);																		// if the S/N is matched with DO Transfer but it is sold, show error									if($pisn_info['status'] == "Sold"){										$curr_grn_sn_sold_list[] = $curr_sn;									}																		$grn_do_sn_matched_count++;								}							}														// loop S/N from DO to check if S/N have been sold							$q2 = $con->sql_query("select * from pos_items_sn where sku_item_id = ".mi($r1['sku_item_id'])." and serial_no in ('".join("','", $do_sn_list)."') and located_branch_id = ".mi($sessioninfo['branch_id'])." and status = 'Sold'");														$total_do_sn_sold = $con->sql_numrows($q2);							while($r2 = $con->sql_fetchassoc($q2)){								$this->grn_sn_sold_list[$grn_id][$r1['sku_item_id']][] = $r2['serial_no']; // need to use this on save function							}							$con->sql_freeresult($q2);														$do_actual_sold_count = count($do_sn_list)-$total_do_sn_sold; // need to deduct the sold S/N							// found current S/N list are fully matched with DO Transfer, reset the error msg							if($grn_do_sn_matched_count == $do_actual_sold_count || $form['qty'][$grn_id][$sid] != $ttl_sn) unset($curr_invalid_grn_sn_list);							else $invalid_grn_sn_list = array_merge($invalid_grn_sn_list, $curr_invalid_grn_sn_list);						}					}					$con->sql_freeresult($q1);										if($invalid_grn_sn_list){						$invalid_grn_sn_list = join(", ", $invalid_grn_sn_list); 						$err['top'][$grn_id][$sid][] = sprintf($LANG['SKU_GRN_SN_UNMATCHED'], $invalid_grn_sn_list);					}										if($curr_grn_sn_sold_list){						$curr_grn_sn_sold_list = join(", ", $curr_grn_sn_sold_list); 						$err['top'][$grn_id][$sid][] = sprintf($LANG['SKU_SN_SOLD'], $curr_grn_sn_sold_list);					}				}else{					// check against database that having existed S/N					$sql = $con->sql_query("select * from pos_items_sn where sku_item_id = ".mi($sid)." and serial_no in ('".$sn_list."')");					if($con->sql_numrows($sql)>0){						while($r1=$con->sql_fetchassoc($sql)){							if($r1['located_branch_id'] != $sessioninfo['branch_id']){ // found it is existed but located at other branch								$db_diff_branch_list[$r1['serial_no']] = $r1['serial_no'];							}else $db_duplicate_list[$r1['serial_no']] = $r1['serial_no'];						}						$con->sql_freeresult($sql);					}					// S/N duplicated with database					if(count($db_duplicate_list)>0){						$sn_duplicated = join(", ", $db_duplicate_list);						$err['top'][$grn_id][$sid][] = sprintf($LANG['SKU_SN_EXISTED'], "<br /> $sn_duplicated");					}										// S/N existed but located on other branch					if(count($db_diff_branch_list)>0){						$sn_diff_branch = join(", ", $db_diff_branch_list);						$err['top'][$grn_id][$sid][] = sprintf($LANG['SKU_SN_DIFF_BRANCH'], "<br /> $sn_diff_branch");					}				}					// check between rcv qty and S/N qty matching or not				if($form['qty'][$grn_id][$sid] > 0 && !$ttl_sn) $err['top'][$grn_id][$sid][] = sprintf($LANG['DO_SN_EMPTY'], "");				elseif($form['qty'][$grn_id][$sid] != $ttl_sn) $err['top'][$grn_id][$sid][] = sprintf($LANG['DO_SN_INVALID_QTY'], "");								//if($all_sn_by_si[$sid]['sn_list']) $all_sn_by_si[$sid]['sn_list'] .= ",";				if($all_sn_by_si[$sid]) array_merge($all_sn_by_si[$sid], $curr_sn_list);				else $all_sn_by_si[$sid] = $curr_sn_list;								if($ttl_sn > 0) $this->sn_items[$grn_id][$sid] = $r;			}		}				return $err;	}	function search(){        global $con, $smarty, $sessioninfo, $config;        /*$form = $_REQUEST;		unset($form['branch_id']);		if(BRANCH_CODE != "HQ") $form['branch_id'] = $sessioninfo['branch_id'];		else{			if($form['search_branch_id']) $form['branch_id'] = $form['search_branch_id'];		}	    if (preg_match("/^grn/i", $_REQUEST['search'])){	    	$_REQUEST['search'] = intval(substr($_REQUEST['search'],3));		}		$find_grn[] = "gi.grn_id = ".mi($_REQUEST['search']);		if($form['branch_id'] > 0) $find_grn[] = "gi.branch_id = ".mi($form['branch_id']);*/		$find_grn = $find_sn = array();		$t = mi($_REQUEST['t']);		switch ($t){			case 0: // show pending for import	        	$find_grn[] = "(gi.sn_import is null or gi.sn_import = '' or gi.sn_import = 'N;')";	        	break;				case 1: // show imported			    $find_grn[] = "gi.sn_import != '' and gi.sn_import != 'N;'";			    break;		    case 2: // search for GRN by ID or doc no from GRR	        	$str = trim($_REQUEST['search']);				if(!$str) die('Cannot search empty string');					$where = "(grn.id=".ms(preg_replace("/[^0-9]/","", $str));				if($config['use_grn_future']) $where .= " or (select gri.id from grr_items gri where gri.doc_no like ".ms("%".replace_special_char($str)."%")." and gri.grr_id = grn.grr_id and gri.branch_id = grn.branch_id group by gri.grr_id))";		        else{		        	$where .= " or gri.doc_no like ".ms("%".replace_special_char($str)."%").")";					$left_join = "left join grr_items gri on gri.id = grn.grr_item_id and gri.branch_id = grn.branch_id";				}							$sn_count = strlen($str);				$sn_search = 's:'.mi($sn_count).':"'.replace_special_char($str).'";';				$where .= " or gi.sn_import like ".ms('%'.$sn_search.'%');								$find_grn[] = $where;				break;			default:				die('Invalid Page');		}		$find_grn[] = "grn.branch_id = ".$sessioninfo['branch_id'];		if(!$config['use_grn_future_allow_generate_gra']) $return_pcs=" - (ifnull(gi.return_ctn * rcv_uom.fraction,0) + ifnull(gi.return_pcs,0))";		$sql = $con->sql_query("select *, gi.grn_id as mid, gi.id as did, grn.amount as grn_amount, group_concat(distinct gi.sku_item_id separator ', ') as grp_si_id,								sum(if(gi.acc_ctn is null and gi.acc_pcs is null, ifnull(gi.ctn,0) * rcv_uom.fraction + ifnull(gi.pcs,0), ifnull(gi.acc_ctn,0) * rcv_uom.fraction + ifnull(gi.acc_pcs,0)$return_pcs)) as qty,								gi.id as grn_item_id, vendor.description as vendor, gi.sn_import,branch.report_prefix								from grn								left join branch on grn.branch_id = branch.id								left join grn_items gi on grn.id = gi.grn_id and grn.branch_id = gi.branch_id								left join sku_items si on gi.sku_item_id = si.id								left join sku on si.sku_id = sku.id								left join uom rcv_uom on gi.uom_id = rcv_uom.id								left join vendor on vendor.id = grn.vendor_id								$left_join								where ".join(" and ", $find_grn)." 								and grn.active = 1 and grn.status = 1 and grn.authorized = 1 and grn.approved = 1 and sku.have_sn != 0								group by grn.id								having qty > 0								order by grn.id");		while($r = $con->sql_fetchassoc($sql)){			if($config['use_grn_future']) $sql1 = $con->sql_query("select group_concat(distinct doc_no separator ', ') as doc_no, type, case when type = 'PO' then 1 when type = 'INVOICE' then 2 when type = 'DO' then 3 else 4 end as type_asc from grr_items where grr_id = ".mi($r['grr_id'])." and branch_id = ".mi($r['branch_id'])." group by type_asc order by type_asc ASC limit 1");			else $sql1 = $con->sql_query("select doc_no, type from grr_items where id = ".mi($r['grr_item_id'])." and branch_id = ".mi($r['branch_id']));			$r1=$con->sql_fetchassoc($sql1);			$con->sql_freeresult($sql1);			$r['doc_no'] = $r1['doc_no'];			$r['type'] = $r1['type'];			// found GRN is ibt, need to deduct quantity if S/N have been sold			if($r['is_ibt'] && $r['doc_no'] && $r['type'] == "DO"){				$doc_no = str_replace(",", "','", $r['doc_no']);				$filter = "do.do_no in (".ms($doc_no).") and do.do_branch_id = ".mi($r['branch_id'])." and do.do_type = 'transfer'";								$q1=$con->sql_query("select di.*									 from do_items di									 left join do on do_id = do.id and di.branch_id = do.branch_id									 where $filter and di.serial_no != '' and di.serial_no is not null and di.sku_item_id in (".$r['grp_si_id'].")									 order by di.id");								while($r2 = $con->sql_fetchassoc($q1)){					$serial_no = unserialize($r2['serial_no']);					if(count($serial_no) == 0) continue; // skip all the do items that does not have S/N										$ibt[$grn]['do_id'] = $r2['do_id'];					$ibt[$grn]['do_branch_id'] = $r2['branch_id'];										foreach($serial_no as $bid=>$sn_list){						$curr_sn_list = explode("\n", $sn_list);						foreach($curr_sn_list as $key=>$sn){							// search for those S/N which have been sold on the current branch before import it							$q2 = $con->sql_query("select * from pos_items_sn pis where pis.status = 'Sold' and pis.sku_item_id = ".mi($r2['sku_item_id'])." and pis.serial_no = ".ms($sn)." and pis.located_branch_id = ".mi($r['branch_id']));														if($con->sql_numrows($q2) > 0){								$r['qty'] -= 1;							}							$con->sql_freeresult($q2);						}					}				}				$con->sql_freeresult($q1);			}			$items[] = $r;		}		$con->sql_freeresult($sql);		$smarty->assign('items',$items);		$smarty->assign('t', $t);		$smarty->assign('search', $str);		if(!$this->first_load) $this->display("masterfile_sku_items.serial_no.import_items.list.tpl");	}	function import_dtl_items(){		global $con, $smarty, $sessioninfo;        $form = $_REQUEST;				// if found form got imported SN		if($form['sn']){			$existed_grn = array();			foreach($form['sn'] as $grn=>$dummy){				$existed_grn[] = $grn;			}		}		if(count($existed_grn)>0) $grn_filter = "and gi.grn_id not in (".join(",", $existed_grn).")";		if($form['item_check']){			if(!$config['use_grn_future_allow_generate_gra']) $return_pcs=" - (ifnull(gi.return_ctn * rcv_uom.fraction,0) + ifnull(gi.return_pcs,0))";			foreach($form['item_check'] as $grn=>$dummy){				$items = array();				$r = array();				$q1 = $con->sql_query("select *, si.description as sku_description,									   sum(if(gi.acc_ctn is null and gi.acc_pcs is null, ifnull(gi.ctn,0) * rcv_uom.fraction + ifnull(gi.pcs,0), ifnull(gi.acc_ctn,0) * rcv_uom.fraction + ifnull(gi.acc_pcs,0)$return_pcs)) as qty,branch.report_prefix 									   from grn_items gi									   left join branch on gi.branch_id =branch.id									   left join grn on grn.id = gi.grn_id and grn.branch_id = gi.branch_id									   left join sku_items si on si.id = gi.sku_item_id									   left join sku on sku.id = si.sku_id									   left join uom rcv_uom on gi.uom_id = rcv_uom.id									   where gi.grn_id = ".mi($grn)." and gi.branch_id = ".mi($sessioninfo['branch_id'])."									   and sku.have_sn != 0 and (gi.sn_import is null or gi.sn_import = '') $grn_filter									   group by si.id									   order by si.sku_item_code");				while($r = $con->sql_fetchassoc($q1)){					$ibt[$r['grn_id']]['is_ibt'] = $r['is_ibt'];					$ibt[$grn]['report_prefix'] = $r['report_prefix'];					$items[$r['grn_id']][$r['sku_item_id']] = $r;				}				$con->sql_freeresult($q1); 				// found GRN is ibt, need to deduct quantity if S/N have been sold				if($ibt[$grn]['is_ibt']){					$q1 = $con->sql_query("select gi.doc_no 										   from grn 										   left join grr on grr.id = grn.grr_id and grr.branch_id = grn.branch_id 										   left join grr_items gi on gi.grr_id = grr.id and gi.branch_id = grr.branch_id 										   where grn.id = ".mi($grn)." and grn.branch_id = ".mi($sessioninfo['branch_id'])." and gi.type = 'DO' and grn.approved=1 and grn.active=1 and grn.status=1 and grr.active=1");										$doc_list = array();					while($r = $con->sql_fetchassoc($q1)){						$doc_list[$r['doc_no']] = $r['doc_no'];					}					$con->sql_freeresult($q1);										if($doc_list){						$doc_no = join("','",$doc_list);						$filter = "do.do_no in (".ms($doc_no).") and do.do_branch_id = ".mi($sessioninfo['branch_id'])." and do.do_type = 'transfer'";												$q1=$con->sql_query("select di.*											 from do_items di											 left join do on do_id = do.id and di.branch_id = do.branch_id											 where $filter and di.serial_no != '' and di.serial_no is not null and di.sku_item_id in (".join(", ", array_keys($items[$grn])).")											 order by di.id");												while($r = $con->sql_fetchassoc($q1)){							$serial_no = unserialize($r['serial_no']);							if(count($serial_no) == 0) continue; // skip all the do items that does not have S/N														$ibt[$grn]['do_id'] = $r['do_id'];							$ibt[$grn]['do_branch_id'] = $r['branch_id'];														foreach($serial_no as $bid=>$sn_list){								$curr_sn_list = explode("\n", $sn_list);								foreach($curr_sn_list as $key=>$sn){									// search for those S/N which have been sold on the current branch before import it									$q2 = $con->sql_query("select * from pos_items_sn pis where pis.status = 'Sold' and pis.sku_item_id = ".mi($r['sku_item_id'])." and pis.serial_no = ".ms($sn)." and pis.located_branch_id = ".mi($sessioninfo['branch_id']));																		if($con->sql_numrows($q2) > 0){										$items[$grn][$r['sku_item_id']]['qty'] -= 1;									}									$con->sql_freeresult($q2);								}							}						}						$con->sql_freeresult($q1);					}				}								$smarty->assign("ibt", $ibt);				$smarty->assign("sn_items", $items);				$temp = array();								$temp['rowdata'] = $smarty->fetch("masterfile_sku_items.serial_no.import_items.list_row.tpl");				$row_items[] = $temp;			}		}		print json_encode($row_items);		//$smarty->assign('sku_items',$sku_items);		//$smarty->display('masterfile_sku_items.serial_no.import_items.list_row.tpl');	}	function view_sn(){		global $con, $smarty;		$form = $_REQUEST;		$items = $this->sn_list();		$smarty->assign("items", $items);		$smarty->display("masterfile_sku_items.serial_no.import_items.view.tpl");	}		function print_sn(){		global $con, $smarty;		$form = $_REQUEST;				if(explode(",", $form['grn_id'])) $grn_list = explode(",", $form['grn_id']); // serve multiple GRN printing		else $grn_list[] = $form['grn_id']; // serve only one GRN printing				foreach($grn_list as $row=>$grn_id){			$_REQUEST['grn_id'] = $grn_id;			$items = $this->sn_list();			$item_per_page= $config['sn_ifg_report_print_item_per_page'] ? $config['sn_ifg_report_print_item_per_page'] : 23;			$item_per_lastpage = $config['sn_ifg_report_print_item_last_page']>0 ? $config['sn_ifg_report_print_item_last_page'] : $item_per_page-5;			$totalpage = 1 + ceil((count($items)-$item_per_lastpage)/$item_per_page);			$q1 = $con->sql_query("select * from branch where id = ".mi($form['branch_id']));			$smarty->assign("branch", $con->sql_fetchassoc($q1));			$con->sql_freeresult($q1);			for ($i=0,$page=1;$page<=$totalpage;$i+=$item_per_page,$page++){				if($page == $totalpage) $smarty->assign("is_last_page", 1);				$smarty->assign("page", "Page $page of $totalpage");				$smarty->assign("start_counter", $i);				$smarty->assign("PAGE_SIZE", ($page < $totalpage) ? $item_per_page : $item_per_lastpage);				$tmp_items = array_slice($items,$i,$item_per_page);				$smarty->assign("items", $tmp_items);				$smarty->assign("sn", $sn);				if($config['sn_ifg_alt_print_template']) $smarty->display($config['sn_ifg_alt_print_template']);				else $smarty->display("masterfile_sku_items.serial_no.import_items.print.tpl");				$smarty->assign("skip_header",1);			}		}	}	function sn_list(){		global $con;		$form = $_REQUEST;		$sql = $con->sql_query("select *, si.description as sku_description, v.description as vendor, c.description as department, gi.sn_import								from grn								left join grn_items gi on gi.grn_id = grn.id and gi.branch_id = grn.branch_id 								left join sku_items si on si.id = gi.sku_item_id								left join grr on grr.id = grn.grr_id and grr.branch_id = grn.branch_id 								left join vendor v on v.id = grn.vendor_id								left join category c on c.id = grn.department_id								where grn.id = ".mi($form['grn_id'])." and grn.branch_id = ".mi($form['branch_id'])." order by gi.id");		while($r = $con->sql_fetchassoc($sql)){			$grn_sn_list = array();			if(unserialize($r['sn_import'])) $grn_sn_list = unserialize($r['sn_import']);			if(count($grn_sn_list) == 0) continue;			// trim the serial no to ignore all spacing characters			foreach($grn_sn_list as $row=>$val) $grn_sn_list[$row] = trim($val);			if($r['is_ibt']){				$do_sn_list = array();				$sql1 = $con->sql_query("select * from grr_items where grr_id = ".mi($r['grr_id'])." and branch_id = ".mi($r['branch_id'])." and type = 'DO'");					while($r1 = $con->sql_fetchassoc($sql1)){					$sql2 = $con->sql_query("select di.serial_no, do.do_branch_id, di.sku_item_id from do left join do_items di on di.do_id = do.id and di.branch_id = do.branch_id where do.do_no = ".ms($r1['doc_no'])." and do.do_branch_id = ".mi($r1['branch_id'])." and do.do_type = 'transfer' and do.checkout = 1 and di.sku_item_id = ".mi($r['sku_item_id']));					while($r2 = $con->sql_fetchassoc($sql2)){						if(unserialize($r2['serial_no'])){							$tmp_sn_list = array();							$do_sn = unserialize($r2['serial_no']);							$tmp_sn_list = explode("\n", $do_sn[$r2['do_branch_id']]);							$do_sn_list = array_merge($do_sn_list, $tmp_sn_list);						}					}					$con->sql_freeresult($sql2);				}				$con->sql_freeresult($sql1);				// search S/N from DO whether exist or not				if(count($do_sn_list) > 0){					foreach($do_sn_list as $row=>$val){						if(in_array(trim($val), $grn_sn_list)){ // found it is existed in DO, means it is transfered							$remark = "Transferred from DO";						}else{ // found not existed in DO, means it is extra from DO							$remark = "Extra in DO";						}						$r['sn'] = $val;						$r['remark'] = $remark;						$items[] = $r;						$do_sn_list[$row] = trim($val);					}				}				if(count($grn_sn_list) > 0){					foreach($grn_sn_list as $row=>$val){						if(!in_array(trim($val), $do_sn_list)){ // found it is not found in DO created from GRN							$r['sn'] = $val;							$r['remark'] = "Not Found in DO";							$items[] = $r;						}					}				}			}else{				if(count($grn_sn_list) > 0){					foreach($grn_sn_list as $row=>$val){						// search whether it is newly added or existed in db						$sql1 = $con->sql_query("select serial_no from pos_items_sn where serial_no = ".ms($val)." and sku_item_id = ".mi($r['sku_item_id'])." and located_branch_id = ".mi($r['branch_id']));						if($con->sql_numrows($sql1) > 0){ // it is newly created							$sql2 = $con->sql_query("select remark from pos_items_sn_history where serial_no = ".ms($val)." and sku_item_id = ".mi($r['sku_item_id'])." and located_branch_id = ".mi($r['branch_id'])." order by added desc limit 1");							if($con->sql_numrows($sql2) > 0){								$pisnh = $con->sql_fetchassoc($sql2);								if($pisnh['remark'] == "add"){ // means newly added									$remark = "New Added";								}else{ // means it is existed and transferred to current branch									$remark = "Transferred";								}							}							$con->sql_freeresult($sql2);						}else{ // it is not found in S/N, INVALID!							$remark = "Not found in Database!";						}						$con->sql_freeresult($sql1);						$r['sn'] = $val;						$r['remark'] = $remark;						$items[] = $r;					}				}			}		}		$con->sql_freeresult($sql);		return $items;	}		function ajax_auto_generate_sn(){		global $con, $smarty;				$form = $_REQUEST;				if($form['qty_remains'] <= 0){			print "The S/N has been fully entered, auto generate is not required.";			exit;		}				$sn_list = array();		$q1 = $con->sql_query("select * from sku_items si where si.id = ".mi($form['curr_sid']));		$si_info = $con->sql_fetchassoc($q1);		$con->sql_freeresult($q1);				//$si_info['sku_id'] = str_pad($si_info['sku_id'], 6, "0", STR_PAD_LEFT);				$first_sn = $this->get_max_sn($form['curr_sid'], $si_info['sku_id']);		$sn_list[] = $first_sn;				for($i = 1; $i < $form['qty_remains']; $i++){			$running_sn = $first_sn + $i;			$sn_list[] = str_pad($running_sn, 12, "0", STR_PAD_LEFT);		}				$ret['ok'] = 1;		if($form['curr_sn']) $ret['html'] = trim($form['curr_sn'])."\n";		$ret['html'] .= join("\n", $sn_list);				print json_encode($ret);	}		function get_max_sn($curr_sid, $sku_id){		global $con, $smarty;				$form = $_REQUEST;		$first_sn = "";				$prefix_sku_id = str_pad($sku_id, 6, "0", STR_PAD_LEFT);				// search from current page with similar SKU item that having max S/N and use it as starting S/N		foreach($form['sn'] as $grn_id=>$sku_items){			foreach($sku_items as $sid=>$idx){				if($sku_id != $form['sku_id'][$grn_id][$sid]) continue;								$sn_list = explode("\n", $form['sn'][$grn_id][$sid]);				$new_sn_list = array();				if($sn_list){					foreach($sn_list as $dummy=>$tmp_sn){						if(!preg_match("/^$prefix_sku_id/", $tmp_sn)) continue;						if($first_sn < $tmp_sn){							$first_sn = $tmp_sn;						}					}				}			}		}				if(!$first_sn){			// try to get the max serial no that created from previous auto generate			$q1 = $con->sql_query("select max(pis.serial_no) as sn 								   from pos_items_sn pis								   left join sku_items si on si.id = pis.sku_item_id 								   where si.sku_id = ".mi($sku_id)." 								   and pis.serial_no like ".ms($prefix_sku_id."%")." 								   and length(serial_no) = 12");			$sn_info = $con->sql_fetchassoc($q1);			$con->sql_freeresult($q1);						if(!$sn_info['sn']){				$running_num = str_pad("1", 6, "0", STR_PAD_LEFT);				$first_sn = $prefix_sku_id.$running_num;			}else{				$first_sn = $sn_info['sn'] + 1;			}		}else $first_sn += 1;		$first_sn = str_pad($first_sn, 12, "0", STR_PAD_LEFT);				return $first_sn;	}}$SKU_items_Serial_No_GRN_Imp = new SKU_items_Serial_No_GRN_Imp('SKU Serial No - Import from GRN');?>