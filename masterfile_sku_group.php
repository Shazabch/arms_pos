<?/*6/28/2010 12:51:30 PM Andy- SKU Group add "GRN cutoff date", "report usage" and "allowed user list".- SKU Group when save will save department id(use for sku monitoring to filter).8/5/2010 5:57:27 PM Andy- SKU Group Drop "GRN cutoff date", "report usage", "department" and "allowed user list".6/24/2011 4:50:32 PM Andy- Make all branch default sort by sequence, code.7/19/2011 2:11:42 PM Justin- Added department checking for import feature.7/21/2011 4:52:32 PM Justin- Fixed the import function that cannot work properly once successfully added item.9/13/2012 5:31:00 PM- sku group id change to get max id when insert11/30/2012 4:30 PM Andy- Change sku group item list from mutliple select to table list.12/12/2012 4:56:00 PM Fithri- multiple user view/edit- owner can share sku with other user- dont allow delete item from sku group if the item got sales1/11/2012 3:58 PM Andy- Add return how many item has been added into list.1/24/2013 5:59 PM Justin- Enhanced to filter vendor only while user filter it.2:33 PM 1/29/2015 Andy- Added log when user update the sku group, record the item count.3/4/2015 11:51 AM Andy- Enhanced the log when user save the data, record what branch id, sku group id and row count.3/19/2015 11:31 AM Andy- Enhanced to prompt error when user save sku group, the item count in JS different with PHP.- Extend the log to record down the item count by JS.12/6/2016 9:39 AM Andy- Hide ARMS user from user list.13/2/2017 10:15 AM Zhi Kai- Change the title of 'SKU Group Master file' to 'SKU Group'.5/2/2017 14:13 Qiu Ying- Enhanced to load SKU from SKU table instead of vendor_sku_history13/12/2019 11:00 AM William- Enhanced to remove AUTO_INCREMENT of "sku_group" table.*/include("include/common.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('MASTERFILE')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'MASTERFILE', BRANCH_CODE), "/index.php");$maintenance->check(173);$smarty->assign("PAGE_TITLE", "SKU Group");if (isset($_REQUEST['a'])){	$id = intval($_REQUEST['id']);	switch ($_REQUEST['a'])	{		case 'save':			//print_r($_REQUEST);exit;			validate_data($upd,$err);						if ($err)			{				print $err;				exit;			}			else			{			    $sku_group_id = intval($_REQUEST['sku_group_id']);			    $branch_id = intval($_REQUEST['branch_id']);			    $user_id = $sessioninfo['id'];							    if($sku_group_id<=0){                    // Insert into sku group                    $upd['added'] = 'CURRENT_TIMESTAMP';										$max_failed_attemp = 5;					$failed_attemp = -1;										do {						$failed_attemp++;						// get new promotion ID, to avoid replica bugs						$con->sql_query("select max(sku_group_id) as max_id from sku_group where 1");						$max_id = mi($con->sql_fetchfield(0))+1;						$con->sql_freeresult();						$upd['sku_group_id'] = $max_id;						$sql = "insert into sku_group " . mysql_insert_by_field($upd);						if($failed_attemp<$max_failed_attemp){							$q_success = $con->sql_query($sql, false,false);						}else{							$q_success = $con->sql_query($sql); // attemp insert more than 5 time, maybe is other error, stop unlimited loop						}					} while (!$q_success);   // insert until success										$upd2['sku_group_id'] = $max_id;					$upd2['branch_id'] = $upd['branch_id'];				}else{					// Update SKU Group					$con->sql_query("update sku_group set ".mysql_update_by_field($upd,array('code','description','last_update'))." where sku_group_id=$sku_group_id and branch_id=$branch_id") or die(mysql_error());										// delete sku group item					$sql = "delete from sku_group_item where sku_group_id=$sku_group_id and branch_id=$branch_id";					$con->sql_query($sql) or die(mysql_error());										$upd2['sku_group_id'] = $sku_group_id;					$upd2['branch_id'] = $branch_id;				}								// Insert each item into sku group item				$sku_item_codes = $_REQUEST['sku_code_list'];				$added_by = $_REQUEST['added_by'];				$added_timestamp = $_REQUEST['added_timestamp'];								//$upd2['branch_id'] = $upd['branch_id'];				$upd2['user_id'] = $upd['user_id'];				foreach($sku_item_codes as $id){					$upd2['sku_item_code'] = $id;					$upd2['added_by'] = $added_by[$id];					$upd2['added_timestamp'] = $added_timestamp[$id];	                $con->sql_query("insert into sku_group_item ". mysql_insert_by_field($upd2)) or die(mysql_error());				}			    			    if($config['enable_vendor_portal']){			    	// delete those sku alrdy not in the list			    	check_sku_group_vp_date_control($branch_id, $sku_group_id);			    }			    				load_table();				// add log				$msg = "Save SKU Group (Group ID:$sku_group_id Branch ID:$branch_id), Item Count: ".count($sku_item_codes);				$msg .= ", Item count when user submit: ".mi($_REQUEST['total_item_count']);				log_br($sessioninfo['id'], 'SKU Group', $upd2['sku_group_id'], $msg);								if($sku_group_id<=0){					print "<script>alert('$LANG[MSTSKUGROUP_NEW_RECORD_ADDED]');</script>\n";				}else{                    print "<script>alert('$LANG[MSTSKUGROUP_DATA_UPDATED]');</script>\n";				}			}			exit;		case 'edit':			$sku_group_id = intval($_REQUEST['sku_group_id']);			$branch_id = intval($_REQUEST['branch_id']);			/*$user_id = intval($_REQUEST['user_id']);            if($sessioninfo['id']!=$user_id){				print "Error: Invalid User";				exit;			}*/										$sql = "select * from sku_group where sku_group_id=$sku_group_id and branch_id=$branch_id";			$con->sql_query($sql) or die(mysql_error());							if ($con->sql_numrows()<=0)			{				print "Error: Invalid SKU Group";				exit;			}			$table = $con->sql_fetchrow();			$con->sql_query("select sku_group_item.*, sku_items.artno, sku_items.id as sku_item_id, sku_items.mcode, sku_items.description, user.u as added_by_u			from sku_group_item 			left join sku_items using(sku_item_code) 			left join user on user.id=sku_group_item.added_by			where sku_group_id=$sku_group_id and branch_id=$branch_id") or die(mysql_error());						$group_item = $con->sql_fetchrowset();			$con->sql_freeresult();						foreach($group_item as $gk => $gi) {				if ($config['sku_group_block_delete_item_has_sale']) {					$con->sql_query("select sku_item_id from pos_items where sku_item_id = ".mi($gi['sku_item_id'])." limit 1") or die(mysql_error());					$tmp = $con->sql_fetchassoc();					$group_item[$gk]['cannot_delete'] = $tmp ? 1 : 0;					$con->sql_freeresult();				}				else {					$group_item[$gk]['cannot_delete'] = 0;				}			}						load_branches();			load_dept();			$smarty->assign('table',$table);			$smarty->assign('group_item',$group_item);			$smarty->display('sku_items_autocomplete_multiple_sku_group.tpl');			exit;		case 'edit_share':			$sku_group_id = mi($_REQUEST['sku_group_id']);			$branch_id = mi($_REQUEST['branch_id']);			$con->sql_query("select share_with from sku_group where sku_group_id=$sku_group_id and branch_id=$branch_id limit 1");			$sw = $con->sql_fetchfield(0);			$sh = unserialize($sw);			if (!$sh) $sh = array();			$con->sql_query("select id, u from user where active=1 and template=0 and is_arms_user=0 order by u");			$shared = $con->sql_fetchrowset();			echo "<script>";			echo "ul = $('user_list');";			echo "sl = $('share_list');";			echo 'ul.options.length=0;';			echo 'sl.options.length=0;';			foreach ($shared as $s) {				if (in_array($s['id'],$sh)) echo "sl.options[sl.options.length] = new Option('$s[u]','$s[id]');";				else echo "ul.options[ul.options.length] = new Option('$s[u]','$s[id]');";				//print "console.log('$s[u] - $s[id]');";			}			echo "</script>";			exit;		case 'save_edit_share':			$sku_group_id = mi($_REQUEST['sku_group_id']);			$branch_id = mi($_REQUEST['branch_id']);						$idlist = serialize($_REQUEST['share_list']);			$sql = "update sku_group set share_with=".ms($idlist)." where sku_group_id=$sku_group_id and branch_id=$branch_id limit 1";			$con->sql_query($sql) or die(mysql_error());						load_table();						if ($con->sql_affectedrows()) print "<script>alert('Update successfully');</script>\n";			else print "<script>alert('Update error');</script>\n";			exit;		case 'delete':			    $sku_group_id = intval($_REQUEST['sku_group_id']);			    $branch_id = intval($_REQUEST['branch_id']);			    /*$user_id = intval($_REQUEST['user_id']);			    			    if($sessioninfo['id']!=$user_id){					print "Error: Invalid User";					exit;				}*/				$sql = "delete from sku_group where sku_group_id=$sku_group_id and branch_id=$branch_id";								$con->sql_query($sql) or die(mysql_error());								$sql = "delete from sku_group_item where sku_group_id=$sku_group_id and branch_id=$branch_id";				$con->sql_query($sql) or die(mysql_error());								$con->sql_query("optimize table sku_group") or die(mysql_error());				$con->sql_query("optimize table sku_group_item") or die(mysql_error());				check_sku_group_vp_date_control($branch_id, $sku_group_id);				load_table();			exit;		case 'ajax_load_sku':		    ajax_load_sku();		    exit;		case 'ajax_import_by_text':		    ajax_import_by_text();		    exit;		case 'ajax_add_sku_item_group_item':			ajax_add_sku_item_group_item();			exit;		default:			print "<h3>Unhandled Request</h3>";			print_r($_REQUEST);			exit;	}}load_branches();load_dept();load_table(true);$smarty->display("masterfile_sku_group_index.tpl");function load_table($sqlonly = false){	global $con, $smarty,$sessioninfo,$config;	$sql = "select s1.*,count(s2.sku_item_code) as item_count	from sku_group s1	left join sku_group_item s2 using(sku_group_id,branch_id)	where s1.user_id=".mi($sessioninfo['id'])." or s1.share_with like '%\"".mi($sessioninfo['id'])."\"%' group by sku_group_id,branch_id,user_id order by code";		$con->sql_query($sql) or die(mysql_error());	while($r = $con->sql_fetchrow()){		if(!$config['enable_vendor_portal']) $r['can_edit_share'] = ($r['user_id'] == $sessioninfo['id']) ? true:false; //only owner can edit share permission		else $r['can_edit_share'] = true; // can always edit        $sku_group[] = $r;	}	//$sku_group = $con->sql_fetchrowset();	$smarty->assign("sku_group", $sku_group);	if (!$sqlonly) $smarty->display("masterfile_sku_group_table.tpl");}function validate_data(&$upd,&$err){	global $LANG, $con, $sessioninfo;	$code = trim(strtoupper($_REQUEST['code']));	$description = trim($_REQUEST['description']);	$sku_group_id = intval($_REQUEST['sku_group_id']);	$branch_id = intval($_REQUEST['branch_id']);	$sku_item_codes = $_REQUEST['sku_code_list'];		$upd['code'] = $code;	$upd['description'] = $description;		$upd['branch_id']  = get_request_branch();	$upd['user_id'] = $sessioninfo['id'];	$upd['last_update'] = 'CURRENT_TIMESTAMP';		if($sku_group_id>0){        $upd['sku_group_id']  = $sku_group_id;	}		if ($code == ''){        $err = "Error: ".$LANG['MSTSKUGROUP_CODE_EMPTY'];        return;	}			// if old code != new code, check new code exists	if($sku_group_id<=0){        $sql = "select * from sku_group where code = ". ms($code);	}else{        $sql = "select * from sku_group where (sku_group_id <> $sku_group_id or branch_id<>$branch_id) and code = ". ms($code);	}	$con->sql_query($sql) or die(mysql_error());	if ($con->sql_numrows() > 0)	{		$err = "Error: ".sprintf($LANG['MSTSKUGROUP_CODE_DUPLICATE'], $code);		return;	}	if ($description  == ''){        $err = "Error: ".$LANG['MSTSKUGROUP_DESCRIPTION_EMPTY'];        return;	}		if(count($sku_item_codes)<=0){        $err = "Error: ".$LANG['MSTSKUGROUP_ITEM_EMPTY'];        return;	}		if($_REQUEST['total_item_count'] != count($_REQUEST['sku_code_list'])){		$err = "Error: Submitted item count: ".mi($_REQUEST['total_item_count'])." not match with server received: ".mi(count($_REQUEST['sku_code_list']));		return;	}}function ajax_load_sku(){	global $con, $smarty, $sessioninfo;    $vendor_id = intval($_REQUEST['vendor_id']);	$dept_id = intval($_REQUEST['department_id']);		if(BRANCH_CODE == 'HQ'){        $branch_id = intval($_REQUEST['branch_id']);	}else{        $branch_id = intval($sessioninfo['branch_id']);	}		$filter = array();	if($vendor_id) $filter[] = "sku.vendor_id = ".mi($vendor_id);	/*	if (BRANCH_CODE != 'HQ') {		$branch_check .= "vendor_sku_history.branch_id = $bid and ";	}*/		//$filter[] = "vendor_sku_history.branch_id = $branch_id";	$filter[] = "category.department_id = ".mi($dept_id);	$filter = join(' and ', $filter);	// sort descending by history added - to get the latest price info	$sql = "select sku_id, sku_item_code, sku_items.block_list, sku_items.id, sku_items.description, 	sku_items.artno, sku_items.mcode, sku.varieties, 	if(sip.price is not null and sip.price != '', sip.price, sku_items.selling_price) as selling_price,	if(sic.grn_cost is not null and sic.grn_cost != '', sic.grn_cost, sku_items.cost_price) as cost_price	from sku_items	left join sku on sku_id = sku.id	left join category on sku.category_id = category.id	left join sku_items_price sip on sip.sku_item_id = sku_items.id and sip.branch_id = ".mi($branch_id)."	left join sku_items_cost sic on sic.sku_item_id = sku_items.id and sic.branch_id = ".mi($branch_id)."	where $filter	group by sku_items.id	order by sku_items.id, sku_items.added desc, sku_items.description, sku_items.artno, sku_items.mcode";	//die($sql);	$rr1 = $con->sql_query($sql);	$items = array();	while ($r=$con->sql_fetchassoc($rr1)){		// skip if item is blocked		$r['block_list'] = unserialize($r['block_list']);		if (isset($r['block_list'][$sessioninfo['branch_id']])) continue;		$items[] = $r;	}	$con->sql_freeresult($rr1);	$smarty->assign("items", $items);	$smarty->display('masterfile_sku_group.show_sku.tpl');}function load_dept(){	global $con,$smarty,$sessioninfo;		$con->sql_query("select * from category where id in ($sessioninfo[department_ids]) order by description");	$smarty->assign("departments", $con->sql_fetchrowset());}function ajax_import_by_text(){	global $con;	$dept_id = $_REQUEST['dept_id'];	$text = trim($_REQUEST['text_value']);	if(!$text){		print "Error";		exit;	}	$temp = preg_split("/\s*[\n\r,]+\s*/", $text);	foreach($temp as $t){	    if(trim($t)=='')    continue;		$text_array[] = ms($t);	}		$item_list = join(',',$text_array);	//print "<script>alert('".jsstring($item_list)."');</script>";	//$filter[] = 'active=1';	$filter[] = "(si.mcode in ($item_list) or si.sku_item_code in ($item_list)) and c.department_id = ".mi($dept_id);	$filter = join(' and ',$filter);	$sql = "select si.sku_item_code, si.description, si.artno, si.mcode			from sku_items si			left join sku on sku.id = si.sku_id			left join category c on c.id = sku.category_id			where $filter";	//print $sql;	$con->sql_query($sql) or die(mysql_error());	$count = 0;	$code_list = array();	//print "<script>";	while($r = $con->sql_fetchrow()){		$code_list[] = $r['sku_item_code'];				//print "var artno=\"$r[artno]\"; var mcode=\"$r[mcode]\";";		//print "add_sku_to_list('$r[sku_item_code]','".jsstring($r['description'])."');";		$count++;	}		if($code_list){		$ret = array();		$ret['ok'] = 1;		$ret['code_list'] = $code_list;		print json_encode($ret);		//ajax_add_sku_item_group_item($params);	}else{		die("No Item Match. Please check your department and code.");	}	/*if($count>0){		print "alert('$count item(s) matched');";	}else{        print "alert('No item match');";	}	print "</script>";*/}function load_branches(){	global $con,$smarty,$sessioninfo;		if (BRANCH_CODE == 'HQ') {		$q_b = $con->sql_query("select * from branch where active=1 order by sequence,code") or die(mysql_error());		$smarty->assign('branches',$con->sql_fetchrowset($q_b));	}}function check_sku_group_vp_date_control($branch_id, $sku_group_id){	global $con;		$con->sql_query("delete sgvpfrom sku_group_vp_date_control sgvpwhere sgvp.branch_id=".mi($branch_id)." and sgvp.sku_group_id=".mi($sku_group_id)." and sgvp.sku_item_id not in (select si.idfrom sku_group_item sgijoin sku_items si on si.sku_item_code=sgi.sku_item_codewhere sgi.branch_id=".mi($branch_id)." and sgi.sku_group_id=".mi($sku_group_id).")");}function ajax_add_sku_item_group_item($params = array()){	global $con, $smarty, $sessioninfo;		$code_list = $_REQUEST['code_list'];	//$sku_group_id = mi($_REQUEST['sku_group_id']);	//$branch_id = mi($_REQUEST['branch_id']);		if(isset($params['code_list']))	$code_list = $params['code_list'];	if(!$code_list || !is_array($code_list))	die('Invalid Item to add.');		$ret = array();	$timestamp = date("Y-m-d H:i:s");	$q1 = $con->sql_query("select id,sku_item_code,artno,mcode,description from sku_items where sku_item_code in (".join(',', $code_list).")");	while($r = $con->sql_fetchassoc($q1)){		$item = $r;		$item['added_by'] = $sessioninfo['id'];		$item['added_by_u'] = $sessioninfo['u'];		$item['added_timestamp'] = $timestamp;				$smarty->assign('item', $item);		$ret['html'] .= $smarty->fetch('masterfile_sku_group_popup.item_row.tpl');	}	$con->sql_freeresult($q1);			if($ret['html']){		$ret['ok'] = 1;		$ret['added_item_count'] = count($code_list);	} 	else{		$ret['failed_reason'] = "No Item Added.";	}		if($is_return_data){		return $ret;	}else{		print json_encode($ret);	}}?>