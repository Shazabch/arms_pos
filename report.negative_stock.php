<?php/*7/8/2010 5:09:27 PM Andy- Fix report showing in-correct data.7/10/2010 1:32:29 AM yinsee- show cost and selling in single branch mode7/13/2010 3:19:22 PM Andy- Fix Negative Stock Report when show by parent will display wrong SKU ARMS Code.7/16/2010 5:39:25 PM Andy- Hide Item with "SKU without inventory".10/4/2010 11:17:02 AM Andy- Enhance branch selection dropdown, allow it to show branch group and individual branch data.1/25/2011 11:04:46 AM Alex- change use report_server- add department privilege filter6/24/2011 6:22:16 PM Andy- Make all branch default sort by sequence, code.2/4/2013 5:34 PM Justin- Converted this report to extend module instead of report.- Enhanced to show and filter branches from regions or branch group base on user's regions.4/28/2014 11:51 AM Fithri- add option to filter out inactive SKU items6/18/2014 9:53 AM Fithri- report privilege & config checking is set to be the same as in menu (menu.tpl)12/2/2014 2:29 PM Andy- Change the selling price & GP calculation to check inclusive tax and output tax rate.2/21/2020 3:27 PM William- Enhanced to change connection "$con" to use report server connection "$con_multi".*/include("include/common.php");//$con = new sql_db('agrofresh-hq.dyndns.org','arms_slave','arms_slave','armshq');include("include/class.report.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('REPORTS_SKU')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'REPORTS_SKU', BRANCH_CODE), "/index.php");class negative_stock extends Module{	var $branches_group = array();  // use to hold all branches group data	var $branches = array();    // use to hold all branches data	var $branch_id; // use to store user selected branch id	var $branch_id_list = array(); // use to store all branch need to generate	function __construct($title){		global $con, $smarty, $sessioninfo, $config, $con_multi, $appCore;				if(!$con_multi)	$con_multi = $appCore->reportManager->connectReportServer();		$q1 = $con_multi->sql_query("select * from branch where active=1 and id>0 order by sequence,code");		while($r = $con_multi->sql_fetchassoc($q1)){			if($config['masterfile_branch_region'] && $r['code'] != "HQ" && !check_user_regions($r['id'])) continue;			$this->branches[$r['id']] = $r;		}		$con_multi->sql_freeresult($q1);		$smarty->assign('branches',$this->branches);		// load branch group items		$q1 = $con_multi->sql_query("select bgi.*,branch.code,branch.description		from branch_group_items bgi		left join branch on bgi.branch_id=branch.id		where branch.active=1		order by branch.sequence, branch.code");		while($r = $con_multi->sql_fetchassoc($q1)){			if($config['masterfile_branch_region'] && $r['code'] != "HQ" && !check_user_regions($r['branch_id'])) continue;			$this->branches_group['items'][$r['branch_group_id']][$r['branch_id']] = $r;			$this->branches_group['have_group'][$r['branch_id']] = $r['branch_id'];		}		$con_multi->sql_freeresult($q1);				// load branch group header		$q1 = $con_multi->sql_query("select * from branch_group",false,false);		while($r = $con_multi->sql_fetchassoc($q1)){			if(!$this->branches_group['items'][$r['id']]) continue;            $this->branches_group['header'][$r['id']] = $r;		}		$con_multi->sql_freeresult($q1);				$smarty->assign('branches_group',$this->branches_group);        		parent::__construct($title);	}	function _default(){	    global $sessioninfo, $smarty;	    	    if($_REQUEST['subm']){			$this->generate_report();			if(isset($_REQUEST['output_excel'])){			    include_once("include/excelwriter.php");	            log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Daily Category Sales Report To Excel");				Header('Content-Type: application/msexcel');				Header('Content-Disposition: attachment;filename=arms'.time().'.xls');				print ExcelWriter::GetHeader();				$smarty->assign('no_header_footer', 1);			}		}						$this->display();	}		function run_report($bid)	{	    global $con, $sessioninfo, $con_multi, $config;		$group_by_sku = $this->group_by_sku;	    $one_more_level = $this->one_more_level;    	    if($one_more_level){	        $join_category = " left join category_cache ccp on ccp.category_id=sku.category_id	left join category on ccp.p$one_more_level = category.id ";	        $str_p = ", ccp.p$one_more_level as p,category.description as cname";	    }		if($this->filter)   $filter = join(" and ", $this->filter);		else    $filter = 1;		        $sb_tbl = "stock_balance_b".mi($bid)."_".date("Y", strtotime($this->date_to));		// check stock table table exists		$q_exp = $con_multi->sql_query("explain $sb_tbl",false,false);		if(!$q_exp) return;      	if($group_by_sku){            $sql = "select si.sku_id,si.id as sku_item_id,si.description $str_p ,sum(sb.qty*fraction) as qty,sum(sb.cost*qty) as tcostfrom sku_items sileft join sku on sku.id=si.sku_id $join_categoryleft join category_cache cc on cc.category_id=sku.category_idleft join uom on si.packing_uom_id=uom.idleft join $sb_tbl sb on sb.sku_item_id=si.id and ".ms($this->date_to)." between sb.from_date and sb.to_datewhere $filter group by si.sku_id having qty<0";        }else{            $sql = "select sku_item_code,selling_price as price,mcode,artno,si.id as sku_item_id,si.description $str_p ,sb.qty,(sb.qty*sb.cost) as tcost,			output_gst.rate as output_gst_rate,			if(if(si.inclusive_tax='inherit',sku.mst_inclusive_tax,si.inclusive_tax)='inherit',cc.inclusive_tax,if(si.inclusive_tax='inherit',sku.mst_inclusive_tax,si.inclusive_tax)) as inclusive_taxfrom sku_items sileft join sku on sku.id=si.sku_id $join_categoryleft join category_cache cc on cc.category_id=sku.category_idleft join gst output_gst on output_gst.id=if(if(si.output_tax<0,sku.mst_output_tax,si.output_tax)<0,cc.output_tax,if(si.output_tax<0,sku.mst_output_tax,si.output_tax))left join $sb_tbl sb on sb.sku_item_id=si.id and ".ms($this->date_to)." between sb.from_date and sb.to_datewhere $filter and sb.qty<0 group by si.id";		}		//if($sessioninfo['u']=='wsatp')	print $sql;		$q1 = $con_multi->sql_query($sql);//print "$sql<br /><br />";//xx		$lbl = $bid;				if($con_multi->sql_numrows($q1)>0){		    while($r = $con_multi->sql_fetchrow($q1)){		        if($group_by_sku){					// group by sku no display selling price					$key = $r['sku_id'];				}else{                    $key = $r['sku_item_code'];					$this->sku[$key]['code'] = $key;    // use sku item code to show under arms code                    			    	// get selling price			    	$con_multi->sql_query("select price from sku_items_price_history where sku_item_id=$r[sku_item_id] and branch_id=$bid and added<=".ms($this->date_to)." order by added desc limit 1") or die(mysql_error());			    	$sp = $con_multi->sql_fetchfield(0);			    	$con_multi->sql_freeresult();			    	if ($sp) $r['price'] = $sp;										// inclusive tax					if($config['enable_gst']){						if($r['inclusive_tax']=='yes'){							$r['price'] = round($r['price'] /(100+$r['output_gst_rate'])*100, 2);						}					}									}								$this->category[$r['p']]['id'] = $r['p'];                $this->category[$r['p']]['cname'] = $r['cname'];                                                $this->sku[$key]['description'] = $r['description'];				$this->sku[$key]['mcode'] = $r['mcode'];                $this->sku[$key]['artno'] = $r['artno'];                                if($this->is_all_branch||$this->is_bg){  // selected all branches or branch group                    $this->table[$r['p']][$key]['qty'][$lbl] += $r['qty'];                    $this->table[$r['p']][$key]['qty']['total'] += $r['qty'];                                        $this->table[$r['p']][$key]['tcost'][$lbl] += $r['tcost'];                    $this->table[$r['p']][$key]['tcost']['total'] += $r['tcost'];					$this->total[$r['p']]['qty'][$lbl] += $r['qty'];					$this->total['total']['qty'][$lbl] += $r['qty'];					$this->total[$r['p']]['qty']['total'] += $r['qty'];					$this->total['total']['qty']['total'] += $r['qty'];										$this->total[$r['p']]['tcost'][$lbl] += $r['tcost'];					$this->total['total']['tcost'][$lbl] += $r['tcost'];					$this->total[$r['p']]['tcost']['total'] += $r['tcost'];					$this->total['total']['tcost']['total'] += $r['tcost'];					                }else{  // selected single branch                	$this->table[$r['p']][$key]['price'] += $r['price'];                    $this->table[$r['p']][$key]['qty'] += $r['qty'];                    $this->table[$r['p']][$key]['tprice'] += $r['price']*abs($r['qty']);                    $this->table[$r['p']][$key]['tcost'] += $r['tcost']*-1;					$this->total[$r['p']]['price'] += $r['price'];					$this->total['total']['price'] += $r['price'];					$this->total[$r['p']]['qty'] += $r['qty'];					$this->total['total']['qty'] += $r['qty'];					$this->total[$r['p']]['tprice'] += $r['price']*abs($r['qty']);					$this->total['total']['tprice'] += $r['price']*abs($r['qty']);					$this->total[$r['p']]['tcost'] += $r['tcost']*-1;					$this->total['total']['tcost'] += $r['tcost']*-1;				}			}		}		$con_multi->sql_freeresult($q1);	}	function generate_report()	{		global $con, $smarty, $con_multi;		$this->process_form();		$this->is_all_branch = false;		if($this->branch_id_list){			foreach($this->branch_id_list as $bid){				$this->run_report($bid);			}		}				if($this->group_by_sku&&$this->sku){    // construct parent list			$temp_sku_id = array();			foreach($this->sku as $sku_id=>$dummy){                $temp_sku_id[] = mi($sku_id);			}			$con_multi->sql_query("select sku_id, sku_item_code from sku_items where sku_id in (".join(',', $temp_sku_id).") and is_parent=1");			unset($temp_sku_id);			while($r = $con_multi->sql_fetchrow()){				$this->sku[$r['sku_id']]['code'] = substr($r['sku_item_code'], 0 ,8)."****";			}			$con_multi->sql_freeresult();		}    	$smarty->assign('report_title',join('&nbsp;&nbsp;&nbsp;&nbsp;', $this->report_title));				$smarty->assign('date_length',$this->date_to);		$smarty->assign('table',$this->table);		$smarty->assign('total',$this->total);		$smarty->assign('sku',$this->sku);		$smarty->assign('category',$this->category);		$smarty->assign('branch_name',$branch_name);	}	function process_form()	{	    global $con,$smarty,$sessioninfo,$config,$con_multi;		// do my own form process		// call parent		//parent::process_form();				/*$con->sql_query("select * from branch where active=1 and id>0 order by sequence,code");		while($r = $con->sql_fetchassoc()){			if($config['masterfile_branch_region'] && $r['code'] != "HQ" && !check_user_regions($r['id'])) continue;			$this->branches[$r['id']] = $r;		}		$con->sql_freeresult();		$smarty->assign('branches',$this->branches);				$this->branches_group = $this->load_branch_group();*/		if(BRANCH_CODE == 'HQ'){    // HQ mode			$this->branch_id = mi($_REQUEST['branch_id']);			if(preg_match("/^REGION_/", $_REQUEST['branch_id'])){				$region = str_replace("REGION_", "", $_REQUEST['branch_id']);				$q1 = $con_multi->sql_query("select b.* from branch b where b.active = 1 and b.region = ".ms($region));				while($r = $con_multi->sql_fetchassoc($q1)){					if($config['masterfile_branch_region'] && $r['code'] != "HQ" && !check_user_regions($r['id'])) continue;					$this->branch_id_list[] = $r['id'];				}				$con_multi->sql_freeresult($q1);				$this->report_title[] = "Region: ".$region;			}elseif($this->branch_id<0){ // branch group selected				$this->bgid = abs($this->branch_id);				if($this->branches_group){					foreach($this->branches_group['items'][$this->bgid] as $bid=>$b){						if($config['masterfile_branch_region'] && get_branch_code($bid) != "HQ" && !check_user_regions($bid)) continue;						$this->branch_id_list[] = $bid;					}				}				$this->report_title[] = "Branch Group: ".$this->branches_group['header'][$this->bgid]['code'];			}elseif($this->branch_id){  // single branch selected			    $this->branch_id_list[] = $this->branch_id;                $this->report_title[] = "Branch: ".get_branch_code($this->branch_id);			}   			else{   // all branches selected				foreach($this->branches as $bid=>$b){					if($config['masterfile_branch_region'] && get_branch_code($bid) != "HQ" && !check_user_regions($bid)) continue;                    $this->branch_id_list[] = $bid;				}				$this->report_title[] = "Branch: All";			}		}else{  // Branches mode            $this->branch_id = mi($sessioninfo['branch_id']);            $this->branch_id_list[] = mi($sessioninfo['branch_id']);            $this->report_title[] = "Branch: ".BRANCH_CODE;		}				$group_by_sku = $_REQUEST['group_sku'];				$this->date_to = $_REQUEST['date_to'];		$this->report_title[] = "Date: ".$this->date_to;		//$this->date_from = $_REQUEST['date_from'];		// Get Category ID b4 process        $category_id = $_REQUEST['category_id'];        	    if($category_id)	    {	        $con_multi->sql_query("select level,description from category where id=".mi($category_id)) or die(mysql_error());    		$level = $con_multi->sql_fetchfield('level');    		$category_name = $con_multi->sql_fetchfield('description');			$con_multi->sql_freeresult();    		// check one more level for grouping    		$con_multi->sql_query("select max(level) from category") or die(mysql_error());    		$max_level = $con_multi->sql_fetchfield(0);			$con_multi->sql_freeresult();    		if($level<$max_level)	$one_more_level = $level+1;    		else    $one_more_level = $level;	        $filter[] = "ccp.p$level=".mi($category_id);	        $this->report_title[] = "Category: $category_name";	    }else{			$this->report_title[] = "Category: All";			$filter[] = "cc.p2 in (".join(",",array_keys($sessioninfo['departments'])).")";		}		$filter[] = "((sku.no_inventory='inherit' and cc.no_inventory='no') or sku.no_inventory='no')";		$filter[] = $_REQUEST['exclude_inactive_sku'] ? 'si.active=1' : '1';		//$filter[] = "pos.date<=".ms($this->date_to);		//if($filter)	$filter = join(" and ",$filter);		$this->category_id = $category_id;		$this->one_more_level = $one_more_level;		$this->group_by_sku = $group_by_sku;				$this->filter = $filter;				$this->cat_name = $category_name;				$smarty->assign('category_name',$category_name);	}		function default_values()	{	    $_REQUEST['date_from'] = date("Y-m-d", strtotime("-1 month"));	    $_REQUEST['date_to'] = date("Y-m-d");	}}//$con_multi = new mysql_multi();$report = new negative_stock('Negative Stock');//$con_multi->close_connection();?>