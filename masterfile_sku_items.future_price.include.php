<?php/*7/13/2012 4:02:34 PM Justin- Fixed bugs of report show only one row.7/17/2012 5:02:23 PM Justin- Bug fixed for report printing missed to print qprice items.7/23/2012 9:15:34 AM Justin- Changed the wording from "Future Price Change" become "Batch Price Change".7/27/2012 3:17:34 PM Justin- Fixed bug on system should not skip those deleted qprice item.8/3/2012 6:02:23 PM Justin- Enhanced to disallow user key in zero min qty or price for qprice.8/16/2012 10:44 AM Andy- Add when change price will also automatically copy price to item under same parent/child, same uom, same price typ. (need config sku_change_price_always_apply_to_same_uom)7/3/2013 11:32 AM Fithri- pm notification standardization7/29/2013 4:49 PM Andy- Fix Batch Price Change after approve will become blank page.- Fix Batch Price Change pass wrong document ID if is auto approve.- Fix Batch Price Change cannot load approval history if the document directly get approve.12/16/2013 11:59 AM Justin- Bug fixed once found future price got problem, system will die the page instead of return user to the page and show error msg.12/23/2013 10:23 AM Fithri- new module 'Stucked Documents Approval'5/20/2014 10:12 AM Fithri- able to select item(s) to reject & must provide reason for each rejected item7/17/2014 3:03 PM Justin- Enhanced to have GP, GP(%) and Variance calculation.10/9/2014 4:19 PM Justin- Enhanced to have GST calculation.3/6/2015 3:27 PM Andy- Enhanced the modules to check when get sku/category gst, no need to check force zero rate.3/13/2015 6:21 PM Justin- Bug fixed on GST information gone missing after returned from errors.3/21/2015 2:06 PM Justin- Bug fixed on date by branch always contains data even though it is not being set.3/21/2015 11:34 AM Justin- Enhanced to have new feature "import from price wizard".- Enhanced to allow user show full items while exceeded the maximum items.3/23/2015 5:37 PM Justin- Bug fixed on "Show Items" button always appear.4/7/2016 10:46 AM Andy- Enhanced to load item selling price before gst.- Fix copy price bug, when user submit but got error return back, the copy price dialog will always prompt.05/26/2016 13:30 Edwin- Bug fixed on unnecessary words shown when branch date assigned wrongly10/7/2016 11:46 AM Andy- Fixed stucked approval redirect to wrong php.6/2/2017 13:28 Qiu Ying- Enhanced to add a "Add All Price Type" button in order to add SKU with different price type11/9/2018 4:42 PM Justin- Enhanced to have Remark data.11/12/2018 5:52 PM Andy- Increased maintenance version to 373.*/$maintenance->check(373);$MAXIMUM_ITEMS = 2000;$smarty->assign("MAXIMUM_ITEMS", $MAXIMUM_ITEMS);function load_header($fp_id, $branch_id){	global $con, $smarty, $sessioninfo;	$q1=$con->sql_query("select sifp.*, u.u as username, bah.approvals						from sku_items_future_price sifp						left join user u on u.id = sifp.user_id						left join branch_approval_history bah on bah.id = sifp.approval_history_id and bah.branch_id = sifp.branch_id						where sifp.id=".mi($fp_id)." and sifp.branch_id=".mi($branch_id));	$mst = $con->sql_fetchassoc($q1);	$con->sql_freeresult($q1);	$mst['effective_branches'] = unserialize($mst['effective_branches']);		if($mst['approval_history_id']>0){		$q2=$con->sql_query("select i.timestamp, i.log, i.status, user.u 							from branch_approval_history_items i 							left join branch_approval_history h on i.approval_history_id=h.id and i.branch_id=h.branch_id 							left join user on i.user_id = user.id 							where h.ref_table = 'future_price' and i.branch_id=".mi($branch_id)." and h.id=".mi($mst['approval_history_id'])."							order by i.timestamp");		$approval_history = array();		while($r = $con->sql_fetchassoc($q2)){			$r['more_info'] = unserialize($r['more_info']);			$approval_history[] = $r;		}		$con->sql_freeresult($q2);		$smarty->assign("approval_history", $approval_history);		}		if(preg_match("/^\|$sessioninfo[id]\|/", $mst['approvals'])) $mst['is_approval'] = 1;	return $mst;}function load_items($fp_id, $branch_id, $is_print_report=false){	global $con, $smarty, $MAXIMUM_ITEMS;	// check got gst or not	$gst_settings = check_gst_status();		// load output tax list	$output_tax_list = array();	$q1 = $con->sql_query("select * from gst where active=1 and type = 'supply'");	while($r = $con->sql_fetchassoc($q1)){		$output_tax_list[$r['id']] = $r;	}	$con->sql_freeresult($q1);		$items_limit = "";	if($_REQUEST['a'] != "do_print" && $_REQUEST['a'] != "open"){		$q1=$con->sql_query("select count(*)							from sku_items_future_price_items sifpi							where sifpi.fp_id=".mi($fp_id)." and sifpi.branch_id=".mi($branch_id));		$total_count = $con->sql_fetchfield(0);		$con->sql_freeresult($q1);				if($total_count > $MAXIMUM_ITEMS){			$items_limit = "limit ".$MAXIMUM_ITEMS;			$smarty->assign("item_max", 1);		}	}		$cat_output_tax_list = $cat_inclusive_tax_list = array();	$q1=$con->sql_query("select sifpi.*, sku.sku_type, si.sku_item_code, si.artno, si.mcode, si.description, si.doc_allow_decimal,si.sku_id, 						 puom.fraction as packing_uom_fraction, sic.qty as stock_bal, sku.category_id, sku.category_id, sku.mst_output_tax, 						 si.output_tax, sku.mst_inclusive_tax, si.inclusive_tax						 from sku_items_future_price_items sifpi						 left join sku_items si on si.id = sifpi.sku_item_id						 left join sku on sku.id = si.sku_id						 left join uom puom on puom.id=si.packing_uom_id						 left join sku_items_cost sic on sic.sku_item_id = sifpi.sku_item_id and sic.branch_id = sifpi.branch_id						 where sifpi.fp_id=".mi($fp_id)." and sifpi.branch_id=".mi($branch_id)."						 order by sifpi.id ".						 $items_limit);	while($r = $con->sql_fetchassoc($q1)){		$sid = $r['sku_item_id'];				$r['extra_info'] = unserialize($r['extra_info']);		// get category tax info		if(!$cat_output_tax_list[$r['category_id']]) $cat_output_tax_list[$r['category_id']] = get_category_gst("output_tax", $r['category_id'], array('no_check_use_zero_rate'=>1));		if(!$cat_inclusive_tax_list[$r['category_id']]) $cat_inclusive_tax_list[$r['category_id']] = get_category_gst("inclusive_tax", $r['category_id']);		$cat_output_tax = $cat_output_tax_list[$r['category_id']];		$cat_inclusive_tax = $cat_inclusive_tax_list[$r['category_id']];				// get output tax follow by item > sku > category		if($r['output_tax'] == -1) $output_tax = $r['mst_output_tax'];		else $output_tax = $r['output_tax'];				if($output_tax == -1){			$r['gst_rate'] = $cat_output_tax['rate'];			$r['gst_code'] = $cat_output_tax['code'];		}else{			$r['gst_rate'] = $output_tax_list[$output_tax]['rate'];			$r['gst_code'] = $output_tax_list[$output_tax]['code'];		}		// get inclusive tax follow by item > sku > category		if($r['inclusive_tax'] == "inherit") $inclusive_tax = $r['mst_inclusive_tax'];		else $inclusive_tax = $r['inclusive_tax'];				if($inclusive_tax == "inherit") $inclusive_tax = $cat_inclusive_tax;		$r['inclusive_tax'] = $inclusive_tax;				// check price before gst		if($gst_settings){			if($inclusive_tax == 'yes'){				$prm = array();				$prm['selling_price'] = $r['selling_price'];				$prm['inclusive_tax'] = $inclusive_tax;				$prm['gst_rate'] = $r['gst_rate'];				$ret = calculate_gst_sp($prm);				$r['selling_price_before_gst'] = $ret['gst_selling_price'];			}else{				$r['selling_price_before_gst'] = $r['selling_price'];			}		}				if(!$is_print_report && $r['type'] == "qprice" && $qprice_items[$sid]) $items['qprice_items'][$sid][] = $r;		else $items['items'][] = $r;				if($r['type'] == "qprice") $qprice_items[$sid] = 1;	}	return $items;}function future_price_approval($fp_id, $branch_id, $status, $auto_approve=false, $approval_on_behalf = false){    global $con, $sessioninfo, $smarty, $config; 	$form=$_REQUEST; 	$approved=0;	$approval_status = array(1 => "Approved", 2 => "Rejected", 3 => "KIV (Pending)", 4 => "Terminated");	$aid=$form['approval_history_id'];	$approvals=$form['approvals'];	if($status==1){		$upd = array();		$err = validate($form);			if($err['mst']){			$smarty->assign("errm", $err);			$smarty->display("masterfile_sku_items.future_price_approval.tpl");			exit;		}else{			$upd['date'] = $form['date'];			$upd['hour'] = $form['hour'];			$upd['minute'] = $form['minute'];			$upd['date_by_branch'] = $form['date_by_branch'];			$effective_branches = array();			if($form['effective_branches']){				foreach($form['effective_branches'] as $bid=>$val){					if($form['date_by_branch']){						$effective_branches[$bid]['hour'] = $form['branch_hour'][$bid];						$effective_branches[$bid]['minute'] = $form['branch_minute'][$bid];						$effective_branches[$bid]['date'] = $form['branch_date'][$bid];					}else $effective_branches[$bid] = $bid;				}			}			$upd['effective_branches'] = serialize($effective_branches);			$upd['remark'] = $form['remark'];			$upd['last_update'] = "CURRENT_TIMESTAMP";		}			$comment="Approved";		$params = array();		$params['approve'] = 1;		$params['user_id'] = $sessioninfo['id'];		$params['id'] = $aid;		$params['branch_id'] = $branch_id;		$params['update_approval_flow'] = true;		if($auto_approve) $params['auto_approve'] = true;    	$is_last = check_is_last_approval_by_id($params, $con);	    	if($is_last)  $approved = 1;				//process rejected items		if ($config['sku_change_price_approval_allow_reject_by_items'] && $_REQUEST['rejected_item_id']) {					$cols = array();			$s1 = $con->sql_query($abc='desc sku_items_future_price');//print "$abc<br />";			while ($r = $con->sql_fetchassoc($s1)) {				if ($r['Field'] == 'id') continue;				$cols[] = $r['Field'];			}						$field_list = join(',',$cols);			$con->sql_query($abc="insert into sku_items_future_price ($field_list) select $field_list from sku_items_future_price where id = $fp_id and branch_id = $branch_id");//print "$abc<br />";			$new_fp_id = $con->sql_nextid();						if ($new_fp_id) {							$con->sql_query($abc="update sku_items_future_price set approved=0, status=0, approval_history_id=NULL, added=CURRENT_TIMESTAMP, last_update=CURRENT_TIMESTAMP where id = $new_fp_id and branch_id = $branch_id limit 1");//print "$abc<br />";								foreach ($_REQUEST['rejected_item_id'] as $row_id => $dummy) {									$s2 = $con->sql_query("select extra_info from sku_items_future_price_items where id = ".mi($row_id)." and branch_id = $branch_id limit 1");					$r = $con->sql_fetchassoc($s2);					if ($r) $ext_info = unserialize($r['extra_info']);					$ext_info['reject_reason'] = $_REQUEST['rejected_item_reason'][$row_id];					$con->sql_query("update sku_items_future_price_items set fp_id = $new_fp_id, extra_info = ".ms(serialize($ext_info))." where id = ".mi($row_id)." and branch_id = $branch_id limit 1");				}								// and send out pm to the owner				$s7 = $con->sql_query("select user_id from sku_items_future_price where id = $fp_id and branch_id = $branch_id limit 1");				$r = $con->sql_fetchassoc($s7);				$owner_id = mi($r['user_id']);								$pm = array();				$pm['branch_id'] = $sessioninfo['branch_id'];				$pm['from_user_id'] = $sessioninfo['id'];				$pm['to_user_id'] = $owner_id;				$pm['msg'] = "Rejected Price Change Items (ID#$fp_id)";				$pm['url'] = "masterfile_sku_items.future_price.php?a=open&id=$new_fp_id&branch_id=$branch_id";				$pm['added'] = 'CURRENT_TIMESTAMP';				$con->sql_query("insert into pm ".mysql_insert_by_field($pm));			}		}	}	else{	  	$comment=$form['comment'];    	$con->sql_query("update branch_approval_history set status=".mi($status).", approvals = ".ms($approvals).", ref_id=".mi($fp_id)." where id = $aid and branch_id = $branch_id") or die(mysql_error());  	}	if ($approval_on_behalf) {		$comment .= " (by ".$approval_on_behalf['on_behalf_by_u']." on behalf of ".$approval_on_behalf['on_behalf_of_u'].")";	}	$comment = ms($comment);	$con->sql_query("insert into branch_approval_history_items (approval_history_id, branch_id, user_id, status, log) values ($aid, $form[branch_id], $sessioninfo[id], $status, $comment)");		$upd['status'] = $status;	$upd['approved'] = $approved;	$con->sql_query("update sku_items_future_price set ".mysql_update_by_field($upd)." where id=$fp_id and branch_id=$branch_id");	//send_pm_to_user($fp_id, $branch_id, $aid, $status);	$to = get_pm_recipient_list2($fp_id,$aid,$status,'approval',$branch_id,'future_price');	$status_str = ($is_last || $status != 1) ? $approval_status[$status] : '';	send_pm2($to, "Batch Price Change Approval (ID#$fp_id) $approval_status[$status]", "masterfile_sku_items.future_price.php?a=view&id=$fp_id&branch_id=$branch_id", array('module_name'=>'future_price'));	if ($approved)		$status_msg="Fully Approved";	elseif ($status==1)		$status_msg="Approved";	elseif ($status==2)		$status_msg="Rejected";	elseif ($status==5)		$status_msg="Cancelled/Terminated";	else	    die("WTF?");	log_br($sessioninfo['id'], 'FUTURE_PRICE', $fp_id, "Batch Price Change $status_msg by $sessioninfo[u] (ID#$fp_id)");		if($auto_approve){		header("Location: /masterfile_sku_items.future_price.php?act=approve&id=$fp_id");		exit;	}		if(strpos($_SERVER['PHP_SELF'], 'masterfile_sku_items.future_price_approval.php') !== false){	// at approval screen			if ($approval_on_behalf) {			header("Location: /stucked_document_approvals.php?m=future_price");			exit;		}			header("Location: ".$_SERVER['PHP_SELF']);		exit;	}}/*function send_pm_to_user($fp_id, $branch_id, $aid, $status){	global $con, $sessioninfo, $smarty, $approval_status;	// get the PM list	$con->sql_query("select notify_usersfrom branch_approval_history where id=$aid and branch_id = $branch_id");	$r = $con->sql_fetchrow();	$recipients = $r[0];	$recipients = str_replace("|$sessioninfo[id]|", "|", $recipients);	$to = preg_split("/\|/", $recipients);	// send pm	send_pm($to, "Batch Price Change Approval (ID#$fp_id) $approval_status[$status]", "masterfile_sku_items.future_price.php?a=view&id=$fp_id&branch_id=$branch_id");}*/function fp_print(){	global $con, $smarty, $config, $sessioninfo;	$form=$_REQUEST;	$q1 = $con->sql_query("select * from branch where id=".mi($form['branch_id']));	$smarty->assign("branch", $con->sql_fetchrow($q1));	$con->sql_freeresult($q1);	$form=load_header($form['id'], $form['branch_id']);	$smarty->assign("form", $form);		$fp_items=load_items($form['id'], $form['branch_id'], 1);	// It is A4 paper and landscape	if($config['masterfile_future_price_alt_print_template']){		$tpl = $config['masterfile_future_price_alt_print_template'];	}else{		$tpl = "masterfile_sku_items.future_price.print.tpl";	}	$item_per_page = $config['masterfile_future_price_report_print_item_per_page']?$config['masterfile_future_price_report_print_item_per_page']:30;	$item_per_lastpage = $config['masterfile_future_price_print_item_last_page']>0 ? $config['masterfile_future_price_report_print_item_last_page'] : $item_per_page-5;	$totalpage = 1 + ceil((count($fp_items)-$item_per_lastpage)/$item_per_page);	for($i=0,$page=1;$page<=$totalpage;$i+=$item_per_page,$page++){		if($page == $totalpage) $smarty->assign("is_lastpage", 1);		$smarty->assign("page", "Page $page of $totalpage");		$smarty->assign("start_counter", $i);		$smarty->assign("PAGE_SIZE", ($page < $totalpage) ? $item_per_page : $item_per_lastpage);		$items = array_slice($fp_items,$i,$item_per_page);		$smarty->assign("items", $items['items']);		$smarty->display($tpl);		$smarty->assign("skip_header",1);	}}function validate(&$form){	global $con, $LANG, $sessioninfo;	$curr_times = strtotime(date("Y-m-d H:i:s"));	if(count($form['effective_branches']) == 0){		$err['mst'][] = $LANG['MST_FP_BRANCH_EMPTY'];	}		if($form['date_by_branch']){		$invalid_branches = array();		if($form['effective_branches']){			foreach($form['effective_branches'] as $bid=>$val){				//print $form['branch_date'][$bid];				$tmp['effective_branches'][$bid]['date'] = $form['branch_date'][$bid];				$tmp['effective_branches'][$bid]['hour'] = $form['branch_hour'][$bid];				$tmp['effective_branches'][$bid]['minute'] = $form['branch_minute'][$bid];				$tmp_times = strtotime($form['branch_date'][$bid]." ".$form['branch_hour'][$bid].":".$form['branch_minute'][$bid].":00");				if(!$form['branch_date'][$bid] || $tmp_times <= $curr_times) $invalid_branches[] = get_branch_code($bid);			}		}					if($invalid_branches) $err['mst'][] = sprintf($LANG['MST_FP_DATE_INVALID'], "for ".join(", ", $invalid_branches));				$form['effective_branches'] = $tmp['effective_branches'];	}elseif(!$form['date'] || strtotime($form['date']." ".$form['hour'].":".$form['minute'].":00") <= $curr_times){		$err['mst'][] = sprintf($LANG['MST_FP_DATE_INVALID'], "");	}		if(!$form['date_by_branch']){		if($form['effective_branches']){			foreach($form['effective_branches'] as $bid=>$val){				$form['effective_branches'][$bid]['date'] = "";				$form['effective_branches'][$bid]['hour'] = "";				$form['effective_branches'][$bid]['minute'] = "";			}		}	}		if(isset($_FILES['csv'])){		$filename = $_FILES['csv']['name'];		$allowed =  array('CSV', 'csv');		$ext = pathinfo($filename, PATHINFO_EXTENSION);		if(!in_array($ext,$allowed)){			$err['mst'][] = $LANG['MST_FP_CSV_INVALID'];		}	}		$si_list = $qprice_si_error = array();	if(count($form['si_id']) > 0){		foreach($form['si_id'] as $id=>$sid){			$item['row_no'] = $form['row_no'][$id];			$item['id'] = $id;			$item['sku_item_id'] = $sid;			$item['sku_item_code'] = $form['si_code'][$id];			$item['sku_id'] = $form['si_sku_id'][$id];			$item['artno'] = $form['si_artno'][$id];			$item['mcode'] = $form['si_mcode'][$id];			$item['description'] = $form['si_description'][$id];			$item['packing_uom_fraction'] = $form['si_packing_uom_fraction'][$id];			$item['sku_type'] = $form['si_sku_type'][$id];			$item['cost'] = $form['cost'][$id];			$item['selling_price'] = $form['selling_price'][$id];			$item['type'] = $form['type'][$id];			$item['trade_discount_code'] = $form['trade_discount_code'][$id];			$item['min_qty'] = mi($form['min_qty'][$id]);			$item['future_selling_price'] = mf($form['future_selling_price'][$id]);			$item['is_deleted'] = $form['is_deleted'][$id];			$item['is_qprice'] = $form['is_qprice'][$id];			$item['inclusive_tax'] = $form['inclusive_tax'][$id];			$item['gst_id'] = $form['gst_id'][$id];			$item['gst_code'] = $form['gst_code'][$id];			$item['gst_rate'] = $form['gst_rate'][$id];						if($si_list[$sid][$item['type']] && !$item['is_deleted']){				if($item['type'] == "qprice" && !$qprice_si_error[$sid]){					if(isset($si_list[$sid][$item['type']][$item['min_qty']])){						$err['dtl'][] = sprintf($LANG['MST_FP_QPRICE_ITEM_EXISTED'], $item['sku_item_code'], $item['min_qty'], $item['future_selling_price']);						$qprice_si_error[$sid] = true;					}					if(!$item['min_qty'] || !$item['future_selling_price']){						$err['dtl'][] = sprintf($LANG['MST_FP_QPRICE_ITEM_EMPTY'], $item['sku_item_code']);						$qprice_si_error[$sid] = true;					}				}elseif($item['type'] != "qprice"){					$err['dtl'][] = sprintf($LANG['MST_FP_ITEM_EXISTED'], $item['sku_item_code'], $item['row_no']);				}			}						if(!$item['is_deleted']) $si_list[$sid][$item['type']][$item['min_qty']] = 1;						if($item['is_qprice']) $form['qprice_items'][$sid][] = $item;			else $form['items'][] = $item;		}	}else $err['dtl'][] = $LANG['MST_FP_ITEM_EMPTY'];	return $err;}?>