<?php/*2/26/2010 4:28:52 PM Andy- change memory limit to 512M4/15/2010 2:03:54 PM Andy- Add function generate_multiple_item_to_group_item()6/28/2010 12:50:04 PM Andy- Change all report to only can use those sku group which usage is "for report".6/28/2010 12:50:13 PM Justin- Optimize year selection dropdown sql.7/30/2010 5:36:24 PM Andy- Change all report to can use all sku group.10/11/2010 1:07:15 PM Andy- Add race filter for report.1/25/2011 12:19:05 PM Alex- add department privilege filter at display()6/24/2011 4:20:24 PM Andy- Make all branch default sort by sequence, code.7/6/2011 12:00:41 PM Andy- Change split() to use explode()10/28/2011 12:06:55 PM Andy- Fix min max year query.4/2/2012 10:04:23 AM Andy- Check maintenance version 119.2/4/2013 5:34 PM Justin- Enhanced to filter branches from regions or branch group base on user's regions.5/8/2013 4:13 PM Andy- Reduce the sql call in init().5/27/2014 3:27 PM Fithri- enhance all reports that have brand information to have brand group filter.4:09 PM 11/27/2014 Andy- Fix init load branch group bug.7/7/2015 3:33 PM Justin- Enhanced to pick up sales date from DO instead of POS only.12/24/2015 1:55 PM DingRen- add filter inactive vendor3/14/2016 3:30 PM Andy- Fix load default year list bug.10/23/2018 11:35 AM Justin- Enhanced to add "CONCESS" into SKU Type ENUM list when creating new table.2/1/2019 2:29 PM Andy- Enhanced report class to have load_default_report_data().3/18/2019 5:29 PM Andy- Enhanced to load brand list.4/3/2019 1:22 PM Justin- Bug fixed on brand filter.2/3/2020 2:37 PM Andy- Enhanced all connection to use report server.- Removed function "generate_target_table".*/ini_set('memory_limit', '512M');set_time_limit(0);$maintenance->check(244);class Report{	var $template;	var $title;	var $err = array();	var $months = array(1=>'Jan',	2=>'Feb',	3=>'Mar',	4=>'Apr',	5=>'May',	6=>'Jun',	7=>'Jul',	8=>'Aug',	9=>'Sep',	10=>'Oct',	11=>'Nov',	12=>'Dec');	var $branch_group;	var $race_list = array('M'=>'Malay', 'C'=>'Chinese', 'I'=>'Indian', 'O'=>'Others');	var $brands_list = array();	var $vendors_list = array();	function generate_report() { print "please do your own report coding"; } 	function default_values() {}		function __construct($title, $template='')	{		global $con_multi, $appCore;				// Connect Report Server		if(!$con_multi)	$con_multi = $appCore->reportManager->connectReportServer();				$this->title = $title;				if ($template=='')		{			$template = str_replace(".php", ".tpl", basename($_SERVER['PHP_SELF']));		}				$this->template = $template;				$this->load_default_report_data();				if ($_REQUEST['ajax'] == 1)		{			$a = $_REQUEST['a'];			$this->$a();			exit;		}		if (isset($_REQUEST['submit'])||isset($_REQUEST['subm']))		{			$this->process_form();						/*global $con;			$old_con = $con;			$con = new mysql_multi();			$this->generate_report();			unset($con);			$con = $old_con;*/			$this->generate_report();		}		else		    $this->default_values();		$this->display();	}		function load_default_report_data(){		global $smarty, $con, $sessioninfo, $log_detail, $config, $con_multi;				// Branch		$q1 = $con_multi->sql_query("select * from branch where active=1 order by sequence, code");		while($r = $con_multi->sql_fetchassoc($q1)){			if($config['masterfile_branch_region'] && $r['code'] != "HQ" && !check_user_regions($r['id'])) continue;			$branches[$r['id']] = $r;		}		$con_multi->sql_freeresult($q1);			//print "here<br>";		//print_r($branches);		$smarty->assign("branches", $branches);				// Brand		$filter_brand = $this->brands_list = array();		$filter_brand[] = "active=1";		if($sessioninfo['brand_ids']){			$filter_brand[] = "id in ($sessioninfo[brand_ids])";		}		$str_filter = join(' and ', $filter_brand);		$sql = "select * from brand where $str_filter order by description";		$con_multi->sql_query($sql);		while($r = $con_multi->sql_fetchassoc()){			$this->brands_list[$r['id']] = $r;		}		$con_multi->sql_freeresult();		$smarty->assign("brands_list", $this->brands_list);				// Vendor		if($sessioninfo['vendor_ids']){			$filter_vendor = " and id in ($sessioninfo[vendor_ids])";		}		$con_multi->sql_query("select id,description from vendor where active=1 $filter_vendor order by description") or die(mysql_error());		$temp = $con_multi->sql_fetchrowset();		$con_multi->sql_freeresult();		foreach($temp as $r){			$this->vendors_list[$r['id']] = $r;		}		$smarty->assign("vendor", $this->vendors_list);				// Department		$con_multi->sql_query("select * from category where id in ($sessioninfo[department_ids]) and active=1 order by description");		while($r = $con_multi->sql_fetchassoc()){			$this->dept_list[$r['id']] = $r;		}		$con_multi->sql_freeresult();		$smarty->assign("departments", $this->dept_list);	}	function display()	{		global $smarty, $con, $sessioninfo, $config, $con_multi;						$smarty->assign("months", $this->months);		$smarty->assign("race_list", $this->race_list);				$q1 = $con_multi->sql_query("select year(min(date)) as min_year, year(max(date)) as max_year from pos where date>0");		while ($r = $con_multi->sql_fetchassoc($q1)){            $min_year = $r['min_year'];            $max_year = $r['max_year'];		}		$con_multi->sql_freeresult($q1);				$count_year = $max_year - $min_year;				for($i=0; $i<=$count_year; $i++){			$tmp_year = $min_year+$i;			$year[$tmp_year][0] = $tmp_year;			$year[$tmp_year]['year'] = $tmp_year;		}				// show year		$q1 = $con_multi->sql_query("select year(min(do_date)) as min_year, year(max(do_date)) as max_year from do where do_date>0");		while ($r = $con_multi->sql_fetchassoc($q1)){            $min_year = $r['min_year'];            $max_year = $r['max_year'];		}		$con_multi->sql_freeresult($q1);				$count_year = $max_year - $min_year;				for($i=0; $i<=$count_year; $i++){			$tmp_year = $min_year+$i;			if(!$year[$tmp_year]){				$year[$tmp_year][0] = $tmp_year;				$year[$tmp_year]['year'] = $tmp_year;			}		}				ksort($year);		$smarty->assign("years", $year);				//$con->sql_query("select * from brand order by description") or die(mysql_error());		//$smarty->assign("brand",$con->sql_fetchrowset());				$con_multi->sql_query("select * from sku_type") or die(mysql_error());		$smarty->assign("sku_type",$con_multi->sql_fetchrowset());		$con_multi->sql_freeresult();						if(!isset($_REQUEST['current_root_id'])){            $con_multi->sql_query("select c.* from category c							left join category_cache cc on cc.p1 = c.id							where c.level=1 and cc.p2 in ($sessioninfo[department_ids])							group by c.id") or die(mysql_error());			$smarty->assign("category_list",$con_multi->sql_fetchrowset());			$con_multi->sql_freeresult();		}				if($sessioninfo['level']>=900){			$sku_group_filter = '';		}elseif($sessioninfo['level']>=500){            $sku_group_filter = "where branch_id=".mi($sessioninfo['branch_id']);		}else{            $sku_group_filter = "where user_id=".mi($sessioninfo['id']);		}        if($sessioninfo['level']>=900){			$sku_group_filter = '';		}elseif($sessioninfo['level']>=500){            $sku_group_filter = "where sg.branch_id=".mi($sessioninfo['branch_id']);		}else{            $sku_group_filter = "where sg.user_id=".mi($sessioninfo['id']);		}        $con_multi->sql_query("select sg.*,user.u		from sku_group sg		left join user on sg.user_id=user.id		$sku_group_filter order by sg.description") or die(mysql_error());		$smarty->assign("sku_group",$con_multi->sql_fetchrowset());		$con_multi->sql_freeresult();				$this->load_branch_group();				$smarty->assign("PAGE_TITLE", $this->title);				//$month=array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");				//$smarty->assign('month',$month);				if (isset($_REQUEST['output_excel']))		{		    include("excelwriter.php");		    $smarty->assign('no_header_footer', true);	    	  //$log_serialize = $this->load_details($_REQUEST);  		  log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export $this->title To Excel($_REQUEST[report_title])");  		    		  Header('Content-Type: application/msexcel');  			Header('Content-Disposition: attachment;filename=arms'.time().'.xls');  			  			print ExcelWriter::GetHeader();  			$smarty->display($this->template);  			print ExcelWriter::GetFooter();  		    exit;		}		else			$smarty->display($this->template);	}	/*	function load_details($a)	{	   global $log_detail;	   $i=0;     foreach($a as $key=>$v)     {        if($i<$a['c'])        {            $log_detail[$key] = $v;        }        $i++;     }     return serialize($log_detail);  }	*/	function process_form()	{		if (isset($_REQUEST['branch_id']))		{			$this->branch_id = intval($_REQUEST['branch_id']);		}				if (isset($_REQUEST['date_from']))		{			$this->date_from = $_REQUEST['date_from'];			if (strtotime($this->date_from)===false)			{				$this->err[] = "Invalid Date-From";			}		}		if (isset($_REQUEST['date_to']))		{			$this->date_to = $_REQUEST['date_to'];			if (strtotime($this->date_to)===false)			{				$this->err[] = "Invalid Date-To";			}			if (strtotime($this->date_to)<strtotime($this->date_from)) {				// autoswap date from and to 				$tmp = $this->date_to;				$this->date_to = $this->date_from;				$this->date_from = $tmp;			}		}				if(isset($_REQUEST['order_type'])){			$this->order_type = $_REQUEST['order_type'];		}				if(isset($_REQUEST['filter_number'])){			$this->filter_number = $_REQUEST['filter_number'];		}				if(isset($_REQUEST['quantity_amount_type'])){			$this->quantity_amount_type = $_REQUEST['quantity_amount_type'];		}				if(isset($_REQUEST['filter_type'])){			if($_REQUEST['filter_type']=='category'){			    if($_REQUEST['category_id']==''||$_REQUEST['category']==''||$_REQUEST['category']=='Enter keyword to search'){	                $this->err[] = "Please key in category";				}			}else{			    if($_REQUEST['filter_type']!='all'){				    if($_REQUEST['sku_code_list_2']==''){		                $this->err[] = "Please search the SKU item then click add";					}				}			}		}else{		    if(isset($_REQUEST['span_status'])){				if($_REQUEST['span_status']=='on'){				    if(isset($_REQUEST['category_id'])||isset($_REQUEST['category'])){						if($_REQUEST['category_id']==''||$_REQUEST['category']==''||$_REQUEST['category']=='Enter keyword to search'){						    			                $this->err[] = "Please key in category";						}					}				}			}else if(isset($_REQUEST['category_id'])||isset($_REQUEST['category'])){			    if($this->optional_category || ($_REQUEST['all_category']=='on')){				}else{                    if($_REQUEST['category_id']==''||$_REQUEST['category']==''||$_REQUEST['category']=='Enter keyword to search'){		                $this->err[] = "Please key in category";					}				}			}						if(isset($_REQUEST['sku_code_list_2'])){				if($_REQUEST['sku_code_list_2']==''){	                $this->err[] = "Please search the SKU item then click add";				}			}		}				// SKU Slow Moving Checking				if(isset($_REQUEST['quantity'])){			if($_REQUEST['quantity']==''||$_REQUEST['quantity']<=0){                $this->err[] = "Please key in Quantity";			}		}		if ($this->err)		{		    global $smarty,$con, $con_multi;		    		    if(isset($_REQUEST['sku_code_list_2'])){                $code_list = $_REQUEST['sku_code_list_2'];                $list = explode(",",$code_list);                $category = array();                			    for($i=0; $i<count($list); $i++){			        $con_multi->sql_query("select description from sku_items where sku_item_code=".ms($list[$i])) or die(sql_error());			        $temp = $con_multi->sql_fetchrow();					$con_multi->sql_freeresult();			        $category[$list[$i]]['sku_item_code']=$list[$i];			        $category[$list[$i]]['description']=$temp['description'];				}				$smarty->assign('category',$category);			}						$smarty->assign("err", $this->err);			$this->display();			exit;		}				$this->load_branch_group();	}		/*function generate_target_table($bid, $year)	{		global $con, $con_multi;				//$con_multi->sql_query("create table if not exists sales_target_b$bid (date date, year int, month int, sku_type enum('CONSIGN','OUTRIGHT','CONCESS'), department_id int, target double, primary key (date, year, month, department_id, sku_type), index(sku_type, year, month))");		$q1 = $con_multi->sql_query("select id from category where level=2");		print "running $bid/$year - ";		while($d = $con_multi->sql_fetchrow($q1))		{			print "generate $d[id]";			for($i=0;$i<365;$i++)			{				print ".";				$target=(rand()%5+1)*1000;				$con->sql_query("replace into sales_target_b$bid values 						(date_add('$year-1-1', interval $i day), year(date_add('$year-1-1', interval $i day)), month(date_add('$year-1-1', interval $i day)),'CONSIGN',$d[id],$target),						(date_add('$year-1-1', interval $i day), year(date_add('$year-1-1', interval $i day)), month(date_add('$year-1-1', interval $i day)),'OUTRIGHT',$d[id],$target)");			}		}		$con_multi->sql_freeresult();		print "done!\n\n";	}*/		function getFirstDayOfWeek($year, $weeknr)	{		$offset = date('w', mktime(0,0,0,1,1,$year));		$offset = ($offset < 5) ? 1-$offset : 8-$offset;		$monday = mktime(0,0,0,1,1+$offset,$year);		$date = strtotime('+' . ($weeknr - 1) . ' weeks', $monday);		return date('Y-m-d',$date);	}	function __destruct()	{		// nop	}		function ajax_get_brand_by_department()	{		global $con, $sessioninfo, $con_multi, $appCore;				// Connect Report Server		if(!$con_multi)	$con_multi = $appCore->reportManager->connectReportServer();				$dept_id = $_REQUEST['dept_id'];		$selected = $_REQUEST['selected'];			    if($sessioninfo['brand_ids']){			$filter_brand = "and brand_id in ($sessioninfo[brand_ids])";		}				$sql = "select distinct(brand_id),description	from sku left join category_cache using (category_id)	left join brand on brand_id = brand.id	where p2=".mi($dept_id)." and description <> '' $filter_brand order by description";		$con_multi->sql_query($sql) or die(mysql_error());				print "<select name=brand_id>";		if (isset($_REQUEST['show_all'])) print "<option value='All'>-- All --</option>";		print "<option value=0>UNBRANDED</option>";		while($r=$con_multi->sql_fetchrow())		{		    if($selected==$r['brand_id']){		        print "<option value=\"$r[brand_id]\" selected> $r[description]</option>";			}else{	            print "<option value=\"$r[brand_id]\"> $r[description]</option>";			}		}		$con_multi->sql_freeresult();		print "</select>";		exit;	}		function generate_dates($fr, $to, $keyfmt, $valuefmt)	{	    for($d=strtotime($fr);$d<=strtotime($to);$d+=86400)	    {			$ret[date($keyfmt,$d)] = date($valuefmt,$d);		}		return $ret;	}		function generate_months($fr, $to, $keyfmt, $valuefmt, $include_last = false)	{		$to = strtotime($to);				if($include_last){            for($d=strtotime($fr);$d<=$to;$d+=86400)		    {				$ret[date($keyfmt,$d)] = date($valuefmt,$d);			}		}else{            for($d=strtotime($fr);$d<$to;$d+=86400)		    {				$ret[date($keyfmt,$d)] = date($valuefmt,$d);			}		}		return $ret;	}		function ajax_get_brand_by_category_id()	{		global $con, $con_multi, $appCore;				// Connect Report Server		if(!$con_multi)	$con_multi = $appCore->reportManager->connectReportServer();				$category_id = $_REQUEST['category_id'];		$selected = $_REQUEST['selected'];		$view_all = $_REQUEST['view_all'];				if(isset($_REQUEST['view_all'])&&$_REQUEST['view_all']=='all_brand'){		    $s1 = $con_multi->sql_query("select id as brand_id,description from brand order by description") or die(mysql_error());		}else{            if($category_id!=''){	            $con_multi->sql_query("select level from category where id=".mi($category_id)) or die(mysql_error());				$temp = $con_multi->sql_fetchrow();				$con_multi->sql_freeresult();				$level = $temp['level'];				if($level!=0){	                $sql = "select distinct(brand_id),description					from sku left join category_cache using (category_id)					left join brand on brand_id = brand.id					where p$level=".mi($category_id)." and description <> '' order by description";					$s1 = $con_multi->sql_query($sql) or die(mysql_error());				}			}		}				print "<select name=brand_id>";				if (isset($_REQUEST['show_all'])){		    if($selected=='All'){		        print "<option value='All' selected>-- All --</option>";		    }else{		                        print "<option value='All'>-- All --</option>";			}            		}		 		if($selected==0&&$selected!='All'){            print "<option value=0 selected>UNBRANDED</option>";		}else{            print "<option value=0>UNBRANDED</option>";		}				/*		if(isset($_REQUEST['view_all'])&&$_REQUEST['view_all']=='all_brand'){		}		*/		$brand_groups = get_brand_group();		if ($brand_groups) {			print '<optgroup label="Brand Group">';			foreach ($brand_groups as $bgk => $bgv) {				if($selected==$bgk) print "<option selected value=\"$bgk\">$bgv</option>";				else print "<option value=\"$bgk\">$bgv</option>";			}			print '</optgroup>';		}				if (isset($s1) && $con_multi->sql_numrows($s1)) {			print '<optgroup label="Brand">';			while($r=$con_multi->sql_fetchrow($s1))			{				if($selected==$r['brand_id']){					print "<option value=\"$r[brand_id]\" selected> $r[description]</option>";				}else{					print "<option value=\"$r[brand_id]\"> $r[description]</option>";				}			}			print '</optgroup>';			$con_multi->sql_freeresult($s1);		}		print "</select>";    		exit;	}		function load_branch_group($id=0){		global $con,$smarty,$config, $con_multi;		//print "load_branch_group";	    if($this->branch_group)  return $this->branch_group;		$branch_group = array();		$this->branch_group = array();				// check whether select all or specified group		if($id>0){			$where = "where id=".mi($id);			$where2 = "and bgi.branch_group_id=".mi($id);		}		// load items		$q1 = $con_multi->sql_query("select bgi.*,branch.code,branch.description from branch_group_items bgi left join branch on bgi.branch_id=branch.id where branch.active=1 $where2 order by branch.sequence, branch.code",false,false);		while($r = $con_multi->sql_fetchassoc($q1)){			if($config['masterfile_branch_region'] && $r['code'] != "HQ" && !check_user_regions($r['branch_id'])) continue;	        $branch_group['items'][$r['branch_group_id']][$r['branch_id']] = $r;	        $branch_group['have_group'][$r['branch_id']] = $r['branch_id'];		}		$con_multi->sql_freeresult();				// load header		$q1 = $con_multi->sql_query("select * from branch_group $where",false,false);		if($con_multi->sql_numrows()<=0) return;		while($r = $con_multi->sql_fetchassoc($q1)){			if(!$branch_group['items'][$r['id']]) continue;            $branch_group['header'][$r['id']] = $r;		}		$con_multi->sql_freeresult();				//print_r($branch_group);		$this->branch_group = $branch_group;		//print_r($this->branch_group);		$smarty->assign('branch_group',$branch_group);		$smarty->assign('branches_group',$branch_group);		return $branch_group;	}		protected function generate_multiple_item_to_group_item(){	    global $con, $con_multi;		$sku_item_code_arr = $_REQUEST['sku_code_list'];		if(!$sku_item_code_arr) return false;		$temp = array();		$group_item = array();		foreach($sku_item_code_arr as $sku_item_code){			$temp[] = ms($sku_item_code);		}		$con_multi->sql_query("select id,sku_item_code,description from sku_items where sku_item_code in (".join(',', $temp).")");		while($r = $con_multi->sql_fetchrow()){            $group_item[$r['id']] = $r;		}		$con_multi->sql_freeresult();				return $group_item;	}}if (isset($_REQUEST['a']) && $_REQUEST['a']=='ajax_get_brand_by_department') { Report::ajax_get_brand_by_department(); exit; }if (isset($_REQUEST['a']) && $_REQUEST['a']=='ajax_get_brand_by_category_id') { Report::ajax_get_brand_by_category_id(); exit; }//$con->sql_query("drop table if exists sales_target_b$bid");/*if (isset($_REQUEST['generate_target_table'])) {	set_time_limit(0);	$con->sql_query("drop table if exists sales_target_b1");	$con->sql_query("drop table if exists sales_target_b2");	$con->sql_query("drop table if exists sales_target_b3");	$con->sql_query("drop table if exists sales_target_b4");	$con->sql_query("drop table if exists sales_target_b5");	$con->sql_query("drop table if exists sales_target_b6");	$con->sql_query("drop table if exists sales_target_b7");	Report::generate_target_table(1,2007);	Report::generate_target_table(2,2007);	Report::generate_target_table(3,2007);	Report::generate_target_table(4,2007);	Report::generate_target_table(5,2007);	Report::generate_target_table(6,2007);	Report::generate_target_table(7,2007);	Report::generate_target_table(1,2006);	Report::generate_target_table(2,2006);	Report::generate_target_table(3,2006);	Report::generate_target_table(4,2006);	Report::generate_target_table(5,2006);	Report::generate_target_table(6,2006);	Report::generate_target_table(7,2006);	Report::generate_target_table(1,2008);	Report::generate_target_table(2,2008);	Report::generate_target_table(3,2008);	Report::generate_target_table(4,2008);	Report::generate_target_table(5,2008);	Report::generate_target_table(6,2008);	Report::generate_target_table(7,2008);	exit;}*/?>