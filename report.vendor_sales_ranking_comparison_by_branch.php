<?php/*REVISION HISTORY================5/31/2010 5:10:11 PM Alex- Add sku_type filter6/09/2010 5:10:46 PM Justin- Allow branch to view, but only show their own branch (now only HQ can view)- Add filter "SKU type" -> consignment / outright / all6/15/2010 4:10:40 PM Justin- Fixed the bugs of unable to display total for column and row.7/1/2010 2:34:04 PM Justin- Fixed the Use GRN bugs by applying new method while select Use GRN but without selecting Vendor. 8/8/2010 5:11:36 PM Justin- Amended the entire structure of queries to accept incoming branch or branch group selected by users.- Amended the report titles to have more information.8/11/2010 11:50:15 AM Justin- Fixed the Use GRN feature as below:  -> If user use GRN without vendor, system first will calculate all vendors as usual and when grouping of vendor, system will based on the last stock which extract from sku history and place the proper vendor.  6/27/2011 10:04:09 AM Andy- Make all branch default sort by sequence, code.7/6/2011 2:46:07 PM Andy- Change split() to use explode()10/19/2011 2:33:09 PM Andy- Change "Use GRN" script.- Change to only load active branch data when choose all branches.10/28/2011 12:45:47 PM Andy- Fix "Use GRN" script.11/15/2011 2:34:58 PM Andy- Add checking for config.use_grn_last_vendor_include_master, if found config then last GRN only check master vendor.3/15/2012 4:54:00 PM Andy- Change Report to use sku vendor from cache table.4/28/2014 11:51 AM Fithri- add option to filter out inactive SKU items6/18/2014 9:53 AM Fithri- report privilege & config checking is set to be the same as in menu (menu.tpl)8/7/2014 2:33 PM Justin- Added new info "Cost Price" (need config).8/14/2014 10:53 AM Fithri- fix bug wrong figures when check "Use GRN"10/21/2014 4:45 PM Fithri- optimize for ANEKA2/26/2019 5:31 PM Andy- Fixed bug on view details cannot load if got branch group.2/19/2020 11:07 AM William- Enhanced to change connection "$con" to use report server connection "$con_multi".*/include("include/common.php");include("include/class.report.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('REPORTS_PERFORMANCE')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'REPORTS_PERFORMANCE', BRANCH_CODE), "/index.php");//$con_multi= new mysql_multi();class VendorSales extends Report{	function run_report($bid_list)	{		global $con,$sessioninfo, $con_multi, $config;		$filter = $this->filter;		$one_more_level = $this->one_more_level;        $vendor_id = $this->vendor_id;        $date_to = $this->date_to;        $GRN = $this->GRN;        		$table = $this->table;		$label = $this->label;		$v_filter = '';		if(!$GRN){			if($vendor_id!='all'){				$v_filter = " and vendor_id = ".intval($_REQUEST['vendor_id']);			}else{	          if($sessioninfo['vendor_ids']){					$v_filter = " and vendor_id in ($sessioninfo[vendor_ids])";				}			}		}				/*if($GRN && $vendor_id!='all'){			// find items that we receive by			$con_multi->sql_query("select group_concat(sku_item_id) as sku_item_set_id, vendor_id, added 								   from vendor_sku_history 								   where added <= ".ms($this->date)." $v_filter 								   and branch_id in (".join(",", $bid).")								  group by vendor_id 								   order by vendor_id, added desc");						while($r=$con_multi->sql_fetchrow()){				$vendors = $r[1];				$last = $r[0][strlen($r[0])-1];				if($last == ','){					$r[0] = $r[0].'0';				}				$items = $r[0];			}		}*/				if(!$bid_list)	return false;				foreach($bid_list as $bid){			$bid = mi($bid);			if(!$bid)	continue;						$tbl = 'sku_items_sales_cache_b'.$bid;						if($GRN){				$use_grn_xtra_join = "left join vendor_sku_history_b".$bid." vsh on vsh.sku_item_id=pos.sku_item_id and pos.date between vsh.from_date and vsh.to_date and vsh.vendor_id=$vendor_id				left join vendor last_ven on last_ven.id=vsh.vendor_id";				$use_grn_xtra_col = ",vsh.vendor_id as vendor_id, last_ven.description vname";			}						foreach ($this->dates as $dd)			{				$date_filter = 'date between '.ms($dd['f']).' and '.ms($dd['t']);								// get sales data				$sql = "select sku_item_code,sku_items.id as sku_item_id,sum(pos.qty) as qty, pos.date,						sum(pos.amount) as amount,sku_items.description,p$one_more_level as p,						category.description as cname,sku.vendor_id,vendor.description as vname,						sum(pos.cost) as cost $use_grn_xtra_col						from $tbl pos						left join sku_items on pos.sku_item_id = sku_items.id						left join sku on sku_id = sku.id						left join category_cache using (category_id)						left join category on category_cache.p$one_more_level = category.id						left join vendor on sku.vendor_id=vendor.id						$use_grn_xtra_join						where $filter $v_filter and $date_filter						group by sku_items.id";				//print "$sql<br /><br />";				$q1 = $con_multi->sql_query($sql);//print "$sql<br /><br />";//xx				while($r = $con_multi->sql_fetchassoc($q1)){					/*if($GRN){	// got use grn						if(!$config['use_grn_last_vendor_include_master']){	// do not include master							$r['vendor_id'] = $r['vname'] = '';						}												// check last vendor						$q2 = $con_multi->sql_query("select vsh.vendor_id, vendor.description as vname												   from vendor_sku_history vsh												   left join vendor on vendor.id=vsh.vendor_id												   where vsh.added <= ".ms($this->date_from)."												   and vsh.branch_id=$bid												   and vsh.sku_item_id = ".mi($r['sku_item_id'])."												   and source='GRN' 												   order by vsh.added desc												  limit 1");						$last_vendor = $con_multi->sql_fetchassoc($q2);						$con_multi->sql_freeresult($q2);												if($last_vendor){	// got last vendor, replace last vendor to master vendor							$r['vendor_id'] = $last_vendor['vendor_id'];							$r['vname'] = $last_vendor['vname'];						}												if($vendor_id!='all' && $r['vendor_id'] != $vendor_id){	// last vendor not selected vendor							// check whether got receive GRN between this date range							$q3 = $con_multi->sql_query("select vsh.vendor_id, vendor.description as vname									   from vendor_sku_history vsh									   left join vendor on vendor.id=vsh.vendor_id									   where vsh.added between ".ms($this->date_from)." and ".ms($this->date)."									   and vsh.branch_id=$bid									   and vsh.sku_item_id = ".mi($r['sku_item_id'])."									   and source='GRN' and vendor_id=".mi($vendor_id)."									   limit 1");							if($con_multi->sql_numrows($q3)>0){								$vsh = $con_multi->sql_fetchassoc($q3);								$r['vendor_id'] = $vsh['vendor_id'];								$r['vname'] = $vsh['vname'];							}							$con_multi->sql_freeresult($q3);						}					}*/										if($vendor_id!='all' && $r['vendor_id'] != $vendor_id){	// got select vendor						continue;	// skip this sku					}										if($sessioninfo['u']=='wsatp'){						//print "bid=$bid, code = $r[sku_item_code], vid = ".$r['vendor_id'].", qty= $r[qty]<br />";					}															//echo $z['vendor_id']."<br />";					$table[$r['vendor_id']]['vendor_id']=$r['vendor_id'];					$table[$r['vendor_id']]['description']=$r['vname'];										$table[$r['vendor_id']]['qty'][$bid]+=$r['qty'];					$table[$r['vendor_id']]['amount'][$bid]+=$r['amount'];					$table[$r['vendor_id']]['cost'][$bid]+=$r['cost'];										$table[$r['vendor_id']]['qty']['total']+=$r['qty'];					$table[$r['vendor_id']]['amount']['total']+=$r['amount'];					$table[$r['vendor_id']]['cost']['total']+=$r['cost'];				}				$con_multi->sql_freeresult($q1);			}		}				/*for($i=0; $i<count($tbl_name); $i++){			// With Using GRN			if($vendor_id){				$v_filter = " and vendor.id = ".ms($vendors)." and sku_items.id in (".$items.")";			}			$sql = "select sku_item_code,sku_items.id as sku_item_id,sum(pos.qty) as qty, pos.date,					sum(pos.amount) as amount,sku_items.description,p$one_more_level as p,					category.description as cname,vendor_id,vendor.description as vname					from $tbl_name[$i] pos					left join sku_items on pos.sku_item_id = sku_items.id					left join sku on sku_id = sku.id					left join category_cache using (category_id)					left join category on category_cache.p$one_more_level = category.id					left join vendor on sku.vendor_id=vendor.id					where $filter $v_filter					group by vendor.id, sku_items.id";			$lbl = $bid[$i];				$list_sql = $con_multi->sql_query($sql) or die(sql_error());			if($con_multi->sql_numrows($list_sql)>0){				foreach($con_multi->sql_fetchrowset($list_sql) as $z){									if($GRN && $vendor_id == 'all'){						$con_multi->sql_query("select vsh.vendor_id, vendor.description as vname, added 											   from vendor_sku_history vsh											   left join vendor on vendor.id=vsh.vendor_id											   where vsh.added <= ".ms($date_to)."											   and vsh.branch_id in (".join(",", $bid).")											   and vsh.sku_item_id = ".ms($z['sku_item_id'])." 											   order by vsh.added desc											   limit 1");						if($con_multi->sql_numrows()>0){							foreach($con_multi->sql_fetchrowset() as $y){								$z['vendor_id'] = $y['vendor_id'];								$z['vname'] = $y['vname'];							}							$con_multi->sql_freeresult();						}					}					//echo $z['vendor_id']."<br />";					$table[$z['vendor_id']]['vendor_id']=$z['vendor_id'];	                $table[$z['vendor_id']]['description']=$z['vname'];	                					$table[$z['vendor_id']]['qty'][$lbl]+=$z['qty'];					$table[$z['vendor_id']]['amount'][$lbl]+=$z['amount'];										$table[$z['vendor_id']]['qty']['total']+=$z['qty'];					$table[$z['vendor_id']]['amount']['total']+=$z['amount'];				}				$con_multi->sql_freeresult();			}		}*/		//$con_multi->close_connection();				$this->table = $table;		$this->label = $label;	}		function generate_report()	{		global $con, $smarty,$start_date,$end_date,$con_multi;				$filter_number = intval($_REQUEST['filter_number']);				if($filter_number > 1000 || $filter_number < 1){			$filter_number = 1000;		}				$branch_group = $this->branch_group;		$selected_bg_id = intval($_REQUEST['branch_group']);		if(strpos($_REQUEST['branch_id'],'bg,')===0){   // is branch group			list($dummy,$bg_id) = explode(",",$_REQUEST['branch_id']);			//$tbl_name[] = "sku_items_sales_cache_bg".$bg_id;			$get_branch_group_code = $con_multi->sql_query("select branch_group_items.branch_id, branch_group.code 													  from branch_group 													  join branch_group_items on branch_group.id = branch_group_items.branch_group_id 													  where id = $bg_id");			while($bg = $con_multi->sql_fetchrow($get_branch_group_code)){				$g_bid[] = $bg['branch_id'];				$tbl_name[] = "sku_items_sales_cache_b".$bg['branch_id'];				$bg_code = $bg['code'];				$this->label[$bg['branch_id']] = $bg['code'];			}			$con_multi->sql_freeresult($get_branch_group_code);			$report_title[] = "Branch Group: ".$bg_code;			$this->run_report($g_bid);		}else{            $bid  = get_request_branch(true);			if (BRANCH_CODE != 'HQ'){	// is a particular branch	            $tbl_name[] = "sku_items_sales_cache_b".$bid;	            $g_bid[] = $bid;	            $this->run_report($g_bid);	            $this->label[$bid] = get_branch_code($bid);	            $branch_code = BRANCH_CODE;			}else{	// from HQ user				if($bid==0){	// is all the branches	                //$b_sql = "select * from branch where id not in (select branch_id from branch_group_items) order by sequence,code";					$b_sql = "select * from branch where active=1 order by sequence,code";					$q_b = $con_multi->sql_query($b_sql);					while($r = $con_multi->sql_fetchrow($q_b)){                        $tbl_name[] = "sku_items_sales_cache_b".$r['id'];                        $this->label[$r['id']] = $r['code'];                        $g_bid[] = $r['id'];					}					$con_multi->sql_freeresult($q_b);										/*if($branch_group['header']){						foreach($branch_group['header'] as $bg_id=>$bg){                            $tbl_name[] = "sku_items_sales_cache_bg".$bg_id;                            $this->label[$bg_id] = get_branch_code($bg_id);						}					}*/	                $report_title[] = 'Branch: All';					$this->run_report($g_bid);				}else{	// is a particular branch	                $tbl_name[] = "sku_items_sales_cache_b".$bid;	                $g_bid[] = $bid;		            $this->run_report($g_bid);					$branch_code = get_branch_code($bid);					$report_title[] = "Branch: ".$branch_code;					$this->label[$bid] = $branch_code;				}			}		}		    $table = $this->table;	    $label = $this->label;	    		if($table){			foreach(array_keys($table) as $k)			{				$a1=array();$a2=array();				foreach($label as $lbl=>$dummy)				{					$a1[$lbl] = doubleval($table[$k]['amount'][$lbl]);				}				if (min($a1)<$minimum_amount) { unset($table[$k]); continue; }			    foreach($label as $lbl=>$dummy)				{					$a2[$lbl] = doubleval($table[$k]['qty'][$lbl]);					if(!$label[$lbl]) unset($label[$lbl]);				}			    if (min($a2)<$minimum_transaction) unset($table[$k]);			}	        	        usort($table, array($this,"sort_table"));	        	        for($i=0; $i<$filter_number; $i++){				foreach($label as $idx=>$dummy){					$table2['amount'][$idx]+=$table[$i]['amount'][$idx];					$table2['qty'][$idx]+=$table[$i]['qty'][$idx];					$table2['cost'][$idx]+=$table[$i]['cost'][$idx];						$table2['amount']['total']+=$table[$i]['amount'][$idx];					$table2['qty']['total']+=$table[$i]['qty'][$idx];					$table2['cost']['total']+=$table[$i]['cost'][$idx];				}			}		}							$vendor_id = $this->vendor_id;				if($vendor_id=='all'){            $vendor_name = 'All';		}else{            if($vendor_id!=0){	            $con_multi->sql_query("select description from vendor where id=".mi($vendor_id))or die(mysql_error());	            $vn = $con_multi->sql_fetchrow();				$con_multi->sql_freeresult();	            $vendor_name = $vn['description'];			}		}		$report_title[] = "Date: ".$start_date." to ".$end_date;		$report_title[] = "Date Type: ".strtoupper($this->filter_date);		$sku_type = ($this->sku_type) ? $this->sku_type : "All";		$report_title[] = "SKU Type: ".$sku_type;		$con_multi->sql_query("select description from category where id = ".mi($this->category_id));		$cat = $con_multi->sql_fetchrow();		$con_multi->sql_freeresult();		$cat_desc = ($this->category_id) ? $cat['description'] : "All";		$report_title[] = "Category: ".$cat_desc;		$report_title[] = "Vendor: ".$vendor_name;		$use_grn = ($this->GRN) ? "YES" : "NO";		$report_title[] = "Use GRN: ".$use_grn;		$report_title[] = "Ascending by: ".strtoupper($this->order_type);		$report_title[] = "Filter Number: ".$this->filter_number;				$smarty->assign('report_title',join("&nbsp;&nbsp;&nbsp;&nbsp;", $report_title));		$smarty->assign('vendor_name',$vendor_name);		$smarty->assign('label',$label);		$smarty->assign('table',$table);		$smarty->assign('table2',$table2);		$smarty->assign('filter_number',$filter_number);	}		function process_form()	{	    global $config,$con,$smarty,$sessioninfo,$start_date,$end_date,$con_multi;		// do my own form process		// call parent		parent::process_form();				$this->date = $date = $_REQUEST['date'];				if($_REQUEST['filter_date']=='mtd'){			$start_date = date("Y",strtotime($date))."-".date("m",strtotime($date))."-1";			$end_date = $date;		}else{            $year = date("Y",strtotime($date));			$financial_start_date = $year.$config['financial_start_date'];			if(strtotime($date)<strtotime($financial_start_date)){				$year--;				$financial_start_date = $year.$config['financial_start_date'];			}			$start_date = $financial_start_date;			$end_date = $date;		}		$filter_date = "date between ".ms($start_date)." and ".ms($end_date);		$this->dates = $this->dates_by_month($start_date,$end_date);				$category_id = $_REQUEST['category_id'];	    $vendor_id = $_REQUEST['vendor_id'];	    $filter_type = $_REQUEST['filter_type'];	    $GRN = $_REQUEST['GRN'];	    $sku_type = $_REQUEST['sku_type'];	    if($filter_type=='category'){	        $con_multi->sql_query("select level from category where id=".mi($category_id)) or die(mysql_error());			$temp = $con_multi->sql_fetchrow();			$con_multi->sql_freeresult();			$level = $temp['level'];    		// check one more level for grouping    		$con_multi->sql_query("select max(level) from category") or die(mysql_error());    		$max_level = $con_multi->sql_fetchfield(0);			$con_multi->sql_freeresult();    		if($level<$max_level)	$one_more_level = $level+1;    		else    $one_more_level = $level;			$filter[] = "p$level=".mi($category_id);	    }else{            $one_more_level = 2;            $filter[] =  "p2 in ($sessioninfo[department_ids])";		}		if ($sku_type) $filter[] = "sku.sku_type=".ms($sku_type);		//$filter[] = $filter_date; //already use new date filter (by month)		$filter[] = $_REQUEST['exclude_inactive_sku'] ? 'sku_items.active=1' : '1';		$filter = join(" and ",$filter);				$this->filter = $filter;		$this->one_more_level = $one_more_level;		$this->date_from = $start_date;		$this->date_to = $end_date;		$this->filter_date = $_REQUEST['filter_date'];		$this->sku_type = $sku_type;		$this->category_id = $category_id;		$this->vendor_id = $vendor_id;		$this->GRN = $GRN;				$smarty->assign('start_date',$start_date);		$smarty->assign('end_date',$end_date);	}		function default_values()	{	    $view_type = $_REQUEST['view_type'];	    if($view_type=="day"){                $_REQUEST['date_from'] = date("Y-m-d", strtotime("-1 month"));		}else{            $_REQUEST['date_from'] = date("Y-m-d", strtotime("-1 year"));		}		$_REQUEST['date_to'] = date("Y-m-d");	}		function sort_table($a,$b)	{	    if(isset($_REQUEST['quantity_amount_type'])){	        $arrange_type = $_REQUEST['quantity_amount_type'];	    }else{            $arrange_type = 'amount';		}	    if ($a[$arrange_type]['total']==$b[$arrange_type]['total']) return 0;	    if($this->order_type=="bottom"){            return ($a[$arrange_type]['total']<$b[$arrange_type]['total']) ? -1 : 1;		}else{            return ($a[$arrange_type]['total']>$b[$arrange_type]['total']) ? -1 : 1;		}	}		function ajax_show_details(){		global $con,$con_multi,$smarty,$config,$sessioninfo;				$date = $_REQUEST['date'];		$category_id = $_REQUEST['category_id'];	    $vendor_id = $_REQUEST['vendor_id'];	    $filter_type = $_REQUEST['filter_type'];	    $GRN = $_REQUEST['GRN'];	    $sku_type = $_REQUEST['sku_type'];	    $filter = array();	    $gbid = array();		if(!$GRN){			$filter[] = "vendor_id = ".mi($vendor_id);		}				if($vendor_id){			$con_multi->sql_query("select description from vendor where id=".mi($vendor_id))or die(mysql_error());			$vn = $con_multi->sql_fetchrow();			$con_multi->sql_freeresult();			$vendor_name = $vn['description'];		}			if($_REQUEST['filter_date']=='mtd'){			$start_date = date("Y",strtotime($date))."-".date("m",strtotime($date))."-1";			$end_date = $date;		}else{            $year = date("Y",strtotime($date));			$financial_start_date = $year.$config['financial_start_date'];			if(strtotime($date)<strtotime($financial_start_date)){				$year--;				$financial_start_date = $year.$config['financial_start_date'];			}			$start_date = $financial_start_date;			$end_date = $date;		}		//$filter[] = "date between ".ms($start_date)." and ".ms($end_date);		$this->dates = $this->dates_by_month($start_date,$end_date);	    if($filter_type=='category'){	        $con_multi->sql_query("select level from category where id=".mi($category_id)) or die(mysql_error());			$temp = $con_multi->sql_fetchrow();			$con_multi->sql_freeresult();			$level = $temp['level'];    		// check one more level for grouping    		$con_multi->sql_query("select max(level) from category") or die(mysql_error());    		$max_level = $con_multi->sql_fetchfield(0);			$con_multi->sql_freeresult();    		if($level<$max_level)	$one_more_level = $level+1;    		else    $one_more_level = $level;			$filter[] = "p$level=".mi($category_id);	    }else{            $one_more_level = 2;            $filter[] =  "p2 in ($sessioninfo[department_ids])";		}		if ($sku_type) $filter[] = "sku.sku_type=".ms($sku_type);		$filter[] = $_REQUEST['exclude_inactive_sku'] ? 'sku_items.active=1' : '1';				if ($GRN) $filter[] = "vsh.vendor_id = $vendor_id";		$filter = join(" and ",$filter);			$branch_group = $this->branch_group;		$selected_bg_id = intval($_REQUEST['branch_group']);		if(strpos($_REQUEST['branch_id'],'bg,')===0){   // is branch group			list($dummy,$bg_id) = explode(",",$_REQUEST['branch_id']);			$tbl_name[] = "sku_items_sales_cache_bg".$bg_id;			$get_branch_group_code = $con_multi->sql_query("select branch_group_items.branch_id, branch_group.code 													  from branch_group 													  join branch_group_items on branch_group.id = branch_group_items.branch_group_id 													  where id = $bg_id");			while($bg = $con_multi->sql_fetchrow($get_branch_group_code)){				$gbid[] = $bg['branch_id'];				//$bg_code = $bg['code'];				$label[$bg['branch_id']] = $bg['code'];			}			$con_multi->sql_freeresult($get_branch_group_code);			//$report_title[] = "Branch Group: ".$bg_code;			//$this->run_report($g_bid,$tbl_name);		}else{            $bid  = get_request_branch(true);			if (BRANCH_CODE != 'HQ'){	// is from sub branch	            $tbl_name[] = "sku_items_sales_cache_b".$bid;	            $gbid[] = $bid;	            //$this->run_report($g_bid,$tbl_name);	            $label[$bid] = get_branch_code($bid);	            //$branch_code = BRANCH_CODE;			}else{	// from HQ user				if($bid==0){	// is all the branches	                $b_sql = "select * from branch where active=1 order by sequence,code";										$q_b = $con_multi->sql_query($b_sql);					while($r = $con_multi->sql_fetchrow($q_b)){                        $tbl_name[] = "sku_items_sales_cache_b".$r['id'];                        $label[$r['id']] = $r['code'];                        $gbid[] = $r['id'];					}					$con_multi->sql_freeresult($q_b);										/*if($branch_group['header']){						foreach($branch_group['header'] as $bg_id=>$bg){                            $tbl_name[] = "sku_items_sales_cache_bg".$bg_id;                            $label[$bg_id] = get_branch_code($bg_id);						}					}*/					//print_r($bid);	                //$report_title[] = 'Branch: All';					//$this->run_report($g_bid,$tbl_name);				}else{	// is a particular branch	                $tbl_name[] = "sku_items_sales_cache_b".$bid;	                $gbid[] = $bid;		            //$this->run_report($g_bid,$tbl_name);					//$branch_code = get_branch_code($bid);					//$report_title[] = "Branch: ".$branch_code;					$label[$bid] = $branch_code;				}			}		}		//print_r($label);		/*if($GRN){			// find items that we receive by			$con_multi->sql_query("select group_concat(sku_item_id) as sku_item_set_id, vendor_id, added 								   from vendor_sku_history 								   where added <= ".ms($date_to)." 								   and branch_id in (".join(",", $bid).")								   and vendor_id = ".mi($vendor_id)."								   group by vendor_id 								   order by vendor_id, added desc");						while($r=$con_multi->sql_fetchrow()){				$vendors = $r[1];				$last = $r[0][strlen($r[0])-1];				if($last == ','){					$r[0] = $r[0].'0';				}				$items = $r[0];			}			$con_multi->sql_freeresult();		}*/				foreach($gbid as $bid){			$bid = mi($bid);			if(!$bid)	continue;						$tbl = 'sku_items_sales_cache_b'.$bid;			if($GRN){				$vsh_vid = ", vsh.vendor_id as grn_vendor_id";				$vsh_join = "left join vendor_sku_history_b$bid vsh on pos.sku_item_id = vsh.sku_item_id and pos.date between vsh.from_date and vsh.to_date";			}						foreach ($this->dates as $dd)			{				$date_filter = 'date between '.ms($dd['f']).' and '.ms($dd['t']);							$sql = "select sku_item_code,sku_items.id as sku_item_id,sum(pos.qty) as qty, pos.date, sum(pos.amount) as amount, 						d.description as department_name, category_cache.p2 as dept_id, sku.vendor_id, sum(pos.cost) as cost $vsh_vid						from $tbl pos						left join sku_items on pos.sku_item_id = sku_items.id						left join sku on sku_id = sku.id						left join category_cache using (category_id)						left join category c on category_cache.p$one_more_level = c.id						left join category d on category_cache.p2 = d.id						$vsh_join						where $filter and $date_filter						group by sku_items.id";						//print "$sql<br />";				$q1 = $con_multi->sql_query($sql);//print "$sql<br /><br />";//xx				while($r = $con_multi->sql_fetchassoc($q1)){									if($GRN) {						$r['vendor_id'] = $r['grn_vendor_id'];						$r['vname'] = $vendor_name;					}										//not using this anymore					/*					if($GRN){ // got use grn						// check last vendor						$q2 = $con_multi->sql_query("select vsh.vendor_id, vendor.description as vname												   from vendor_sku_history vsh												   left join vendor on vendor.id=vsh.vendor_id												   where vsh.added <= ".ms($start_date)."												   and vsh.branch_id=$bid												   and vsh.sku_item_id = ".mi($r['sku_item_id'])." 												   and source='GRN'												   order by vsh.added desc												   limit 1");						$last_vendor = $con_multi->sql_fetchassoc($q2);						$con_multi->sql_freeresult($q2);												if($last_vendor){	// got last vendor, replace last vendor to master vendor							$r['vendor_id'] = $last_vendor['vendor_id'];							$r['vname'] = $last_vendor['vname'];						}												if($vendor_id!='all' && $r['vendor_id'] != $vendor_id){	// last vendor not selected vendor							// check whether got receive GRN between this date range							$q3 = $con_multi->sql_query("select vsh.vendor_id, vendor.description as vname									   from vendor_sku_history vsh									   left join vendor on vendor.id=vsh.vendor_id									   where vsh.added between ".ms($start_date)." and ".ms($date)."									   and vsh.branch_id=$bid									   and vsh.sku_item_id = ".mi($r['sku_item_id'])."									   and source='GRN' and vendor_id=".mi($vendor_id)."									   limit 1");							if($con_multi->sql_numrows($q3)>0){								$vsh = $con_multi->sql_fetchassoc($q3);								$r['vendor_id'] = $vsh['vendor_id'];								$r['vname'] = $vsh['vname'];							}							$con_multi->sql_freeresult($q3);						}					}					*/										if($vendor_id!='all' && $r['vendor_id'] != $vendor_id){	// got select vendor						continue;	// skip this sku					}					//print "code = $r[sku_item_code], vid = ".$r['vendor_id'].", qty=$r[qty]<br />";										$detail[$r['dept_id']]['dept_id']=$r['dept_id'];					$detail[$r['dept_id']]['department_name']=$r['department_name'];										$detail[$r['dept_id']]['qty'][$bid]+=$r['qty'];					$detail[$r['dept_id']]['amount'][$bid]+=$r['amount'];					$detail[$r['dept_id']]['cost'][$bid]+=$r['cost'];										$detail[$r['dept_id']]['qty']['total']+=$r['qty'];					$detail[$r['dept_id']]['amount']['total']+=$r['amount'];					$detail[$r['dept_id']]['cost']['total']+=$r['cost'];					$total['amount'][$bid]+=$r['amount'];					$total['qty'][$bid]+=$r['qty'];					$total['cost'][$bid]+=$r['cost'];					$total['amount']['total']+=$r['amount'];					$total['qty']['total']+=$r['qty'];					$total['cost']['total']+=$r['cost'];				}				$con_multi->sql_freeresult($q1);			}		}		/*for($i=0; $i<count($tbl_name); $i++){			// With Using GRN			if(count($items)>0) $grn_filter = " and sku_items.id in (".$items.")";			$sql = "select sku_item_code,sku_items.id as sku_item_id,sum(pos.qty) as qty, pos.date,					sum(pos.amount) as amount, d.description as department_name, category_cache.p2 as dept_id					from $tbl_name[$i] pos					left join sku_items on pos.sku_item_id = sku_items.id					left join sku on sku_id = sku.id					left join category_cache using (category_id)					left join category c on category_cache.p$one_more_level = c.id					left join category d on category_cache.p2 = d.id					where $filter $grn_filter					group by category_cache.p2";			$lbl = $gbid[$i];				$list_sql = $con_multi->sql_query($sql) or die(sql_error());			if($con_multi->sql_numrows($list_sql)>0){				foreach($con_multi->sql_fetchrowset($list_sql) as $z){					//echo $z['vendor_id']."<br />";					$detail[$z['dept_id']]['dept_id']=$z['dept_id'];	                $detail[$z['dept_id']]['department_name']=$z['department_name'];	                					$detail[$z['dept_id']]['qty'][$lbl]+=$z['qty'];					$detail[$z['dept_id']]['amount'][$lbl]+=$z['amount'];										$detail[$z['dept_id']]['qty']['total']+=$z['qty'];					$detail[$z['dept_id']]['amount']['total']+=$z['amount'];					$total['amount'][$lbl]+=$z['amount'];					$total['qty'][$lbl]+=$z['qty'];					$total['amount']['total']+=$z['amount'];					$total['qty']['total']+=$z['qty'];				}				$con_multi->sql_freeresult();			}		}*/		//$con_multi->close_connection();		//$this->order_type = $_REQUEST['order_type'];		//usort($detail, array($this,"sort_table"));		//print_r($detail);		$smarty->assign('label',$label);		$smarty->assign('detail',$detail);		$smarty->assign('vendor_id',$vendor_id);		$smarty->assign('total',$total);		$smarty->display("report.vendor_sales_ranking_comparison_by_branch.detail.tpl");			}		function dates_by_month ($from, $to)	{		$f = strtotime($from);		$t = strtotime($to);		list($fy,$fm,$fd) = explode('-',$from);		list($ty,$tm,$td) = explode('-',$to);		$fy = mi($fy);		$fm = mi($fm);		$fd = mi($fd);		$ty = mi($ty);		$tm = mi($tm);		$td = mi($td);		$ym = array();		for ($i = $f; $i <= $t; $i += 86400)		{			$y = mi(date('Y',$i));			$m = mi(date('m',$i));			$ym[$y][$m] = true;		}		$dates = array();		foreach ($ym as $y =>$mlist)		{			foreach ($mlist as $m =>$dummy)			{				if ($y == $fy && $m == $fm) $d1 = $fd;				else $d1 = 1;								if ($y == $ty && $m == $tm) $d2 = $td;				else $d2 = cal_days_in_month(CAL_GREGORIAN,$m,$y);								$dates[] = array(					'f' => ($y.'-'.$m.'-'.$d1),					't' => ($y.'-'.$m.'-'.$d2)				);			}		}		/*		print '<pre>';		print_r($dates);		print '</pre>';		*/				return $dates;	}	}$report = new VendorSales('Vendor Sales Ranking Comparison by Branch');?>