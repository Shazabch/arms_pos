<?
/*
7/30/2009 10:45:36 AM Andy
- if open branch selling price set to 0;

8/4/2009 2:14:42 PM Andy
- add reset function

5/31/2010 2:54:17 PM Andy
- Disable Cosignment Lost/Over Invoice
- CN/DN/Invoice/DO (Markup/Discount) now can implement new consignment discount format.

6/9/2010 4:56:29 PM Andy
- Fix print multiple invoice middle line cannot be hide even config already set.
- Fix stock balance calculation to ignore inactive grr.
- Remove pos_transaction import modules.
- All report which use pos_transaction will change to use pos and pos_items.
- SKU items, category, pwp and member sales cache will directly generate once counter collection is finalized.
- All Sales cache will be delete once counter collection is un-finalized.
- cron to calculate pwp and member sales cache is retired.
- Counter collection finalize status will change to store in a new table.

7/14/2010 2:52:33 PM Andy
- Add settings for consignment invoice.
- Able to control whether use item discount or not.
- Able to control whether split invoice by price type or not when confirm.

7/19/2010 4:54:33 PM Andy
- Invoice change to directly export to sales when approved.

7/23/2010 11:43:25 AM Andy
- Consignment Invoice when auto split by price type, bring item discount to sheet discount. (this will only work if there is no sheet discount)

10/12/2010 6:13:39 PM Andy
- Add new setting: Auto bring item discount to sheet discount when confirm. (Only if there is no split and all items have same discount percent). (can control by config to turn it default on)

11/9/2010 12:14:12 PM Andy
- Add checking for canceled/deleted and prevent it to be edit.

1/25/2011 11:13:13 AM Andy
- Fix a bugs which cause multiple approval make document stuck.

1/26/2011 10:13:56 AM Andy
- Fix a bugs cause if direct approve will not get invoice no.

3/31/2011 3:00:29 PM Andy
- Fix a bugs when consignment invoice reset, sales cache din't update.

4/27/2011 4:24:11 PM Justin/Andy
- Fixed the bugs which not load the type of Invoice while completely approved the invoice but still not auto import to POS.

6/20/2011 6:27:33 PM  Justin
- Added the recalculation for foreign amount while the Invoice is check with "Split by Price Type".

6/24/2011 3:49:24 PM Andy
- Make all branch default sort by sequence, code.

7/6/2011 11:10:04 AM Andy
- Change split() to use explode()

5:22 PM 11/9/2011 Justin
- Fixed the bugs trade discount code get wrongly.

2/17/2012 6:22:54 PM Justin
- Fixed the bug when do reset, system update it as terminated/cancelled.

3/26/2012 2:13:32 PM Justin
- Renamed "price_type_id" into "price_type".
- Added new function "update_ci_sheet_price_type".

9/19/2012 10:50 AM Drkoay
- fix bug, missing fraction calculation on export_pos
- update export_pos, added discount_selling_price_percent discount_item_row_percent

1/25/2013 4:49 PM Justin
- Enhanced to capture and update monthly report history to have new CN/DN IDs generated by Split by Price Type.

7/3/2013 11:32 AM Fithri
- pm notification standardization

8/1/2013 3:37 PM Andy
- Change module to use get_pm_recipient_list2() and send_pm2() in order to compatible with latest Approval Flow Settings.
- Fix consignment invoice to only export pos when fully get approve.
- Fix consignment invoice cannot capture reject message.
- Enhance to load more_info when select approval history.

9/4/2013 5:07 PM Andy
- Fix consignment invoice does not mark some item to recalculate stock balance when reset.

12/23/2013 10:23 AM Fithri
- new module 'Stucked Documents Approval'

12/24/2013 3:49 PM Andy
- Fix invoice number cannot be generated if document get directly approve and split into multiple invoice.

1/9/2013 5:48 PM Andy
- Fix invoice reset should recaculate the stock balance for both branch.

1/17/2015 11:23 AM Justin
- Enhanced to have GST calculation.

4/3/2015 2:25 PM Justin
- Bug fixed on GST indicator does not capture properly.
- Enhanced to pickup GST summary.

4/17/2015 3:54 PM Justin
- Bug fixed on sheet discount didn't round up to 2 decimal points.

5/8/2015 11:17 AM Andy
- Fix the invoice calculation.
- Fix GST summary amount to use amount exclusive gst.

5/14/2015 11:39 AM Andy
- Enhanced the recalculate_ci_gst_amount function.

5/18/2015 2:11 PM Andy
- Fix gst rounding calculation.

5/19/2015 10:26 AM Andy
- Fix recalculate amount din't calculate discount selling price and bearning percent.
- Fix the total discount causing different at amount2, due to rounding issue.

6/4/2015 10:43 AM Andy
- Fix foreign discount calculation.

8/21/2015 4:20 PM Andy
- Fix split by price type export wrong pos.

9/01/2015 2:05 PM DingRen
- Enhance calculate foreign GST amount on load_gst_summary

10/7/2016 11:46 AM Andy
- Fixed stucked approval redirect to wrong php.
*/

$approval_status = array(1 => "Approved", 2 => "Rejected", 5 => "Cancelled/Terminated");
$maintenance->check(271);

function load_ci_header($id, $branch_id){
	global $con, $smarty, $sessioninfo, $gst_list;
	$q1=$con->sql_query("select ci.*, bah.approvals, branch.report_prefix as prefix, category.description as dept_name, b2.code as ci_branch_name, user.u as user,b2.ci_allow_edit_selling_price as allow_edit_selling_price
from ci
left join branch_approval_history bah on bah.id = ci.approval_history_id and bah.branch_id = ci.branch_id
left join branch on branch.id=ci.branch_id
left join branch b2 on b2.id=ci_branch_id
left join category on category.id=ci.dept_id
left join user on user.id=ci.user_id
where ci.id=$id and ci.branch_id=$branch_id");
	$form = $con->sql_fetchrow($q1);
	//print_r($form);
	$form['deliver_branch']=unserialize($form['deliver_branch']);
	//$form['checkout_info']=unserialize($form['checkout_info']);
	$form['open_info']=unserialize($form['open_info']);
	if ($form['approval_history_id']>0){
		$q2=$con->sql_query("select i.timestamp, i.log, i.status, user.u, i.more_info
from branch_approval_history_items i
left join branch_approval_history h on i.approval_history_id = h.id and i.branch_id = h.branch_id
left join user on i.user_id=user.id
where h.ref_table='ci' and i.branch_id=$branch_id and i.approval_history_id=$form[approval_history_id]
order by i.timestamp");
		$approval_history = array();
		while($r = $con->sql_fetchassoc($q2)){
			$r['more_info'] = unserialize($r['more_info']);
			$approval_history[] = $r;
		}
		$con->sql_freeresult($q2);
		$smarty->assign("approval_history", $approval_history);
	}
	//if($form['discount'])	$form['disc_arr'] = split("[+]", $form['discount']);
	/*if(preg_match("/^\|$sessioninfo[id]\|/", $form['approvals'])) 
		$form['is_approval'] = 1;*/	
	
	$params = array();
	$params['user_id'] = $sessioninfo['id'];
	$params['id'] = $form['approval_history_id'];
	$params['branch_id'] = $branch_id;
	$params['check_is_approval'] = true;
	$is_approval = check_is_last_approval_by_id($params, $con);
	if($is_approval)  $form['is_approval'] = 1;
    //print_r($form);

	if($form['is_under_gst']){
		construct_gst_list('supply');
	}
    
	return $form;	
}

function get_item_selling($sid, $deliver_branch, $ci_bid){
	global $con, $branch_id;
	
	if (is_array($deliver_branch)){
		//echo "1: multiple branches:<br>";
		foreach($deliver_branch as $k=>$v)
			$ret['selling_price_allocation'][$v]=get_selling_price($sid,$v);				
	}
	else{
		if($ci_bid){
			$bid=intval($ci_bid);
			//echo "2: ci_branch_id:<br>";
			$ret['selling_price']=get_selling_price($sid,$bid);
		}
		else{
			$bid=$branch_id; 
			//echo "3: branch_id:<br>";		
			$ret['selling_price']= 0;
		}

		//$ret['selling_price']=get_selling_price($sid,$bid);
	}
	return $ret;
}

function get_selling_price($sid,$bid){
	global $con;
	
	$q1=$con->sql_query("select round(if(sip.price is null, si.selling_price, sip.price),3) as selling_price   
from sku_items si
left join sku_items_price sip on sip.sku_item_id=si.id and branch_id=$bid
where si.id=$sid");
    $r1 = $con->sql_fetchrow($q1);
	return $r1['selling_price'];
}

function load_ci_items($ci_id, $branch_id, $use_tmp = false){
	global $con, $sessioninfo, $gst_list;
	
 	$form=$_REQUEST;
	$owner_filter='';
	if($use_tmp){
		$table="tmp_ci_items";
		$owner_filter=" and tci.user_id=$sessioninfo[id] ";
	}
	else{
		$table="ci_items";
	}
	//$table = 'ci_items';
	
	$q1=$con->sql_query("select tci.*, sku_items.sku_item_code, sku_items.description as description, sku_items.artno, sku_items.mcode, uom.id as uom_id, uom.code as uom_code, uom.fraction as uom_fraction, tci.selling_price as selling_price, ci.deliver_branch, ci.ci_branch_id,tci.price_type as trade_discount_code, gst.indicator_receipt
from $table tci 
left join ci on ci.id=ci_id and ci.branch_id=tci.branch_id
left join sku_items on tci.sku_item_id=sku_items.id
left join uom on uom.id=tci.uom_id 
left join gst on gst.id = tci.gst_id
where ci_id=$ci_id and tci.branch_id = $branch_id $owner_filter
order by tci.id");

	while($r = $con->sql_fetchassoc($q1)){
	    $sid = mi($r['sku_item_id']);
	    $ci_branch_id = mi($r['ci_branch_id']);
	    // fix old items which does not have price type id
	    if(!$r['price_type']){
			$con->sql_query("select if(trade_discount_code,trade_discount_code,default_trade_discount_code) as trade_discount_code
			from sku_items si
			left join sku_items_price sip on branch_id=$ci_branch_id and si.id=sip.sku_item_id
			left join sku on sku.id=si.sku_id
			where si.id=$sid");
			$temp = $con->sql_fetchrow();
			$r['trade_discount_code'] = $temp['trade_discount_code'];
			$con->sql_freeresult();

			//$con->sql_query("select tdt.id,tdt.code from trade_discount_type tdt where code=".ms($r['trade_discount_code']));
			//$temp = $con->sql_fetchrow();
			$r['price_type'] = $temp['trade_discount_code'];
			$con->sql_freeresult();

			$con->sql_query("update $table set price_type=".ms($r['price_type'])." where branch_id=$branch_id and ci_id=$ci_id and id=$r[id]");

		}
		if($r['discount'])	$r['disc_arr'] = explode("+", $r['discount']);
		
		// pre load gst id, code and rate
		if($_REQUEST['is_under_gst'] && !$r['gst_id']){
			$r['gst_id'] = $gst_list[0]['id'];
			$r['gst_code'] = $gst_list[0]['code'];
			$r['gst_rate'] = $gst_list[0]['rate'];
		}
		
		// gst
		if($r['gst_id'] > 0){
			check_and_extend_gst_list($r);
		}
		
		$items[] = $r;
	}
	$con->sql_freeresult($q1);
	//return $con->sql_fetchrowset($q1);
	return $items;
	
	/*while($r1=$con->sql_fetchrow($q1)){
		$r1['ctn_allocation'] = unserialize($r1['ctn_allocation']);
		$r1['pcs_allocation'] = unserialize($r1['pcs_allocation']);
		
		if($use_tmp){
			//echo "Latest = ";
			if(!$form['deliver_branch'])
				$deliver_branch = unserialize($r1['deliver_branch']);
			else
				$deliver_branch = $form['deliver_branch'];
			
			if(!$form['ci_branch_id'])
				$ci_bid=$r1['ci_branch_id'];
			else
				$ci_bid=mi($form['ci_branch_id']);
					
			// refresh latest selling price if we are loading from tmp_ci_items
			$tmp_sell=get_item_selling($r1['sku_item_id'], $deliver_branch, $ci_bid);
			$r1 = array_merge($r1, $tmp_sell);
			$con->sql_query("update $table set selling_price_allocation=".sz($tmp_sell['selling_price_allocation']).", selling_price=".mf($tmp_sell['selling_price'])." where id=$r1[id] and branch_id=$branch_id");
		}
		else{
			//echo "Old = saved<br>";
			$r1['selling_price_allocation'] = unserialize($r1['selling_price_allocation']);		
		}

		$ci_items[]=$r1;
	}
	
    return $ci_items;
    */
}

function ci_approval($ci_id, $branch_id, $status, $auto_approve = false, $redirect = true){
 	global $con, $sessioninfo, $smarty, $approval_status;

	if ($_REQUEST['on_behalf_of'] && $_REQUEST['on_behalf_by']) {
		$con->sql_query("select group_concat(u separator ', ') as u from user where id in (".str_replace('-',',',$_REQUEST['on_behalf_of']).")");
		$on_behalf_of_u = $con->sql_fetchfield(0);
		$con->sql_query("select u from user where id = ".mi($_REQUEST['on_behalf_by'])." limit 1");
		$on_behalf_by_u = $con->sql_fetchfield(0);
		$approval_on_behalf = array(
			'on_behalf_of' => str_replace('-',',',$_REQUEST['on_behalf_of']),
			'on_behalf_by' => mi($_REQUEST['on_behalf_by']),
			'on_behalf_of_u' => $on_behalf_of_u,
			'on_behalf_by_u' => $on_behalf_by_u,
		);
	}
	else {
		$approval_on_behalf = false;
	}
	
 	$form=$_REQUEST;
 	$approved=0;
 	if(!$auto_approve)	check_must_can_edit($branch_id, $ci_id, true);
 	
 	$form = load_ci_header($ci_id, $branch_id);
 	
	$aid=$form['approval_history_id'];
	$approvals=$form['approvals'];
 	
	if($status==1){
		$comment="Approved";

		$params = array();
		$params['approve'] = 1;
		$params['user_id'] = $sessioninfo['id'];
		$params['id'] = $aid;
		$params['branch_id'] = $branch_id;
		$params['update_approval_flow'] = true;
		if($auto_approve) $params['auto_approve'] = true;
    	$is_last = check_is_last_approval_by_id($params, $con);
    	if($is_last)  $approved = 1;
	}
	else{
		$comment=trim($_REQUEST['comment']);
		$con->sql_query("update branch_approval_history set status=$status, approvals = ".ms($approvals)." where id = $aid and branch_id = $branch_id");
  } 
  
  	$upd = array();
	$upd['approval_history_id'] = $aid;
	$upd['branch_id'] = $sessioninfo['branch_id'];
	$upd['user_id'] = $sessioninfo['id'];
	$upd['status'] = $status;
	if ($approval_on_behalf) $comment .= " (by ".$approval_on_behalf['on_behalf_by_u']." on behalf of ".$approval_on_behalf['on_behalf_of_u'].")";
	$upd['log'] = $comment;
	
	if($_REQUEST['direct_approve_due_to_less_then_min_doc_amt'])	$upd['more_info']['direct_approve_due_to_less_then_min_doc_amt'] = 1;
	if($upd['more_info'])	$upd['more_info'] = serialize($upd['more_info']);
	
	
	$con->sql_query("insert into branch_approval_history_items ".mysql_insert_by_field($upd));
	
	//$con->sql_query("update branch_approval_history set status=$status, approvals = ".ms($approvals)." where id = $aid and branch_id = $branch_id");

    $q1=$con->sql_query("select * from ci where id=$ci_id and branch_id=$branch_id");
    $r1=$con->sql_fetchrow($q1);
	
	// branches ci or open_info ci
	if(($r1['ci_branch_id'] || $r1['open_info']['name']) && $approved){
		$ci_no=assign_ci_no($ci_id,$branch_id);
		$update_command=" ci_no='".$ci_no."', deliver_branch='', status=$status, approved=$approved ";
	}	
	else{
		$update_command=" status=$status, approved=$approved ";
	}

	update_ci_sheet_price_type($branch_id, $ci_id);
	
	$con->sql_query("update ci set $update_command where id=$ci_id and branch_id=$branch_id");
	//send_pm_to_user($ci_id, $branch_id, $aid, $status);
	$to = get_pm_recipient_list2($ci_id,$aid,$status,'approval',$branch_id,'ci');
	$status_str = ($is_last || $status != 1) ? $approval_status[$status] : '';
	send_pm2($to, "Consignment Invoice Approval (ID#$ci_id) $status_str", "/consignment_invoice.php?a=view&id=$ci_id&branch_id=$branch_id", array('module_name'=>'ci'));

	if ($approved)
		$status_msg="Fully Approved";
	elseif ($status==1)
		$status_msg="Approved";
	elseif ($status==2)
		$status_msg="Rejected";
	elseif ($status==5)
		$status_msg="Cancelled/Terminated";
	else
	    die("WTF?");
	
	log_br($sessioninfo['id'], 'CI', $ci_id, "CI $status_msg by $sessioninfo[u] (ID#$ci_id)");

	if($form['type']=='sales' && $approved)	export_pos($branch_id, $ci_id, false);  // directly export to pos
    
	if($redirect){
	
		if ($approval_on_behalf) {
			header("Location: /stucked_document_approvals.php?m=ci");
			exit;
		}
	
	    $t = $approved ? 'approve' : $form['a'];
	    header("Location: $_SERVER[PHP_SELF]?t=$t&id=$ci_id");
        exit;
	}
	
}

function assign_ci_no($ci_id, $branch_id){
	global $con;
	
	$con->sql_query("select report_prefix, ip from branch where id=$branch_id");
	$report_prefix = $con->sql_fetchrow();

    // check whether already have do_no
	$con->sql_query("select ci_no from ci where branch_id=$branch_id and id=$ci_id and ci_no like ".ms($report_prefix[0].'%')) or die(mysql_error());
	$temp = $con->sql_fetchrow();
	if($temp)   return $temp['ci_no'];
	
	$con->sql_query("select max(ci_no) as mx from ci where branch_id = $branch_id and ci_no like '$report_prefix[0]%'");
	$r = $con->sql_fetchrow();

	if (!$r)
		$n = 1;
	else
		$n = substr($r[0],-5)+1;

	$ci_no = $report_prefix[0] . sprintf("%05d", $n);
	while(!$con->sql_query("update ci set ci_no='$ci_no', approved=1 where id=$ci_id and branch_id = $branch_id",false,false)){
		$n++;
		$ci_no = $report_prefix[0] . sprintf("%05d", $n);
	}
	return $ci_no;
}

/*
function send_pm_to_user($ci_id, $branch_id, $aid, $status){
	global $con, $sessioninfo, $smarty, $approval_status;
	// get the PM list
	$con->sql_query("select notify_users 
from branch_approval_history where id=$aid and branch_id = $branch_id");
	$r = $con->sql_fetchrow();
	
	$recipients = $r[0];
	$recipients = str_replace("|$sessioninfo[id]|", "|", $recipients);
	$to = preg_split("/\|/", $recipients);
	
	// send pm
	send_pm($to, "Consignment Invoice Approval (ID#$ci_id) $approval_status[$status]", "/consignment_invoice.php?a=view&id=$ci_id&branch_id=$branch_id");

}
*/

function init_selection(){
	global $con, $sessioninfo, $smarty, $gst_list;

	
	$con->sql_query("select id, code, report_prefix, description from branch where active=1 order by sequence, code");
	$smarty->assign("branch", $con->sql_fetchrowset());
	
	$con->sql_query("select id, code, fraction from uom where active order by code");
	$smarty->assign("uom", $con->sql_fetchrowset());
	
	if(!$gst_list){
		$gst_list = construct_gst_list('supply');
	}

	// select gst setting
	$con->sql_query("select * from gst_settings where setting_name = 'export_gst_type'");
	$gst_export_settings = $con->sql_fetchassoc($q1);
	$con->sql_freeresult($q1);
	
	foreach($gst_list as $r){
		if($r['id'] == $gst_export_settings['setting_value']){
			$export_settings = $r;
			break;
		}
	}

	$smarty->assign("gst_export_settings", $export_settings);
}

function get_trade_discount($sku_item_id, $branch_id, $deliver_branch_id){
	global $con, $smarty, $sessioninfo;
	
	if(is_array($sku_item_id)){
	    $return_type = 'multiple';
        $filter = "sku_items.id in (".join(',',$sku_item_id).")";
	}else{
	    $return_type = 'single';
		$filter = "sku_items.id=".mi($sku_item_id);
	}
	
	// select sku items trade discount code
	$sql = "select sku_items.id,if(trade_discount_code is not null and trade_discount_code != '',trade_discount_code,default_trade_discount_code) as trade_discount_code from sku_items
left join sku_items_price on branch_id=".mi($deliver_branch_id)." and sku_items.id=sku_items_price.sku_item_id
left join sku on sku_items.sku_id=sku.id
where $filter";

	$q_td = $con->sql_query($sql);
	$code = array();
	while($r = $con->sql_fetchrow($q_td)){
		$sku_items[$r['id']]['trade_discount_code'] = $r['trade_discount_code'];
		
		if(!$r['trade_discount_code'])  continue;
		if(!in_array($r['trade_discount_code'],$code)){
			$code[] = ms($r['trade_discount_code']);
		}
	}
	$con->sql_freeresult($q_td);
	
	if(!$code)  return array('discount'=>0);
	
	// use the code to find discount percentage
	$sql = "select tdt.*,btd.branch_id,btd.value
	from trade_discount_type tdt
	left join branch_trade_discount btd on tdt.id=btd.trade_discount_id and btd.branch_id=".mi($deliver_branch_id)." and tdt.id=btd.trade_discount_id
where tdt.code in (".join(',',$code).")";

	$q_d = $con->sql_query($sql);
	while($r = $con->sql_fetchrow($q_d)){
	    $discount_value[$r['code']]['price_type'] = $r['code'];
	    $discount_value[$r['code']]['trade_discount_code'] = $r['code'];
	    if($_REQUEST['show_per'])	$discount_value[$r['code']]['value'] = $r['value'];
	}

	// only one sku
	if($return_type == 'single'){
	    $ret['price_type'] = $discount_value[$sku_items[$sku_item_id]['trade_discount_code']]['price_type'];
	    $ret['trade_discount_code'] = $sku_items[$sku_item_id]['trade_discount_code'];
        $ret['discount'] = $discount_value[$sku_items[$sku_item_id]['trade_discount_code']]['value'];
	}else{
		if($sku_items){
			foreach($sku_items as $id=>$s){
				$ret[$id] = $discount_value[$s['trade_discount_code']];
			}
		}
	}
	$con->sql_freeresult($q_d);

	return $ret;
}


function do_reset($ci_id,$branch_id){
	global $con,$sessioninfo,$config;
	$required_level = isset($config['doc_reset_level']) ? $config['doc_reset_level'] : 9999;

	if($sessioninfo['level']<$required_level){
        js_redirect(sprintf('Forbidden', 'Consignment Invoice', BRANCH_CODE), "/consignment_invoice.php");
	}

	$form=load_ci_header($ci_id, $branch_id);

	$aid=$form['approval_history_id'];
	$approvals=$form['approvals'];
	$status = 0;

	$upd = array();
	$upd['approval_history_id'] = $aid;
	$upd['branch_id'] = $branch_id;
	$upd['user_id'] = $sessioninfo['id'];
	$upd['status'] = $status;
	$upd['log'] = $_REQUEST['reason'];

	$con->sql_query("insert into branch_approval_history_items ".mysql_insert_by_field($upd)) or die(mysql_error());
	$con->sql_query("update branch_approval_history set status=$status where id = $aid and branch_id = $branch_id") or die(mysql_error());
	
	// remove pos export
	if($form['export_pos']){
        $con->sql_query("delete from pos where branch_id=".mi($form['ci_branch_id'])." and counter_id=-1 and id=$ci_id and date=".ms($form['ci_date']));
        $con->sql_query("delete from pos_items where branch_id=".mi($form['ci_branch_id'])." and counter_id=-1 and pos_id=$ci_id and date=".ms($form['ci_date']));
        // delete sales category for this branch, this date
		update_sales_cache($form['ci_branch_id'], $form['ci_date']);
		
		// update sku items cost
		$sid_list = array();
		$con->sql_query("select distinct sku_item_id 
		from ci_items
		where branch_id=$branch_id and ci_id=$ci_id");
		while($r = $con->sql_fetchassoc()){
			$sid_list[] = mi($r['sku_item_id']);
		}
		$con->sql_freeresult();
		
		if($sid_list){
			$con->sql_query("update sku_items_cost set changed=1 where branch_id in ($branch_id, ".mi($form['ci_branch_id']).") and sku_item_id in (".join(',', $sid_list).")");
		}
	}	
		
	$status = 0;
	$upd = array();
	$upd['status'] = $status;
	$upd['last_update'] = 'CURRENT_TIMESTAMP';
	$upd['approved'] = 0;
	$upd['export_pos'] = 0;
	$upd['export_ubs'] = 0;
	
	$con->sql_query("update ci set ".mysql_update_by_field($upd)." where id=$ci_id and branch_id=$branch_id") or die(mysql_error());

	log_br($sessioninfo['id'], 'Consignment Invoice', $ci_id, sprintf("Consignment Invoice Reset ($form[ci_no])",$ci_id));
	
	header("Location: /consignment_invoice.php?t=reset&save_id=$ci_id");
}

function split_by_price_type($branch_id, $ci_id){
	global $con;
	
	// load header
	$con->sql_query("select * from ci where branch_id=$branch_id and id=$ci_id");
	$form = $con->sql_fetchassoc();
	$con->sql_freeresult();
	
	if(!$form)  return false;
	
	// load items
	$items = array();
	$con->sql_query("select * from ci_items where branch_id=$branch_id and ci_id=$ci_id");
	while($r = $con->sql_fetchassoc()){
		$items[$r['price_type']][] = $r;
	}
	$con->sql_freeresult();
	//print_r($items);
	$total_price_type_count = count($items);
	if($total_price_type_count<=1)   return false; // no more than 1 price type
	
	// get branch_approval_history
	if($form['approval_history_id']){
		$con->sql_query("select * from branch_approval_history where branch_id=$branch_id and id=".mi($form['approval_history_id']));
		$bah = $con->sql_fetchassoc();
		$con->sql_freeresult();
		
		// get branch_approval_history_items (only last entry)
		if($bah){
            $con->sql_query("select * from branch_approval_history_items where branch_id=$branch_id and approval_history_id=".mi($form['approval_history_id'])." order by id desc limit 1");
            $bah_items = $con->sql_fetchassoc();
            $con->sql_freeresult();
		}
	}
	if(!$bah)   return false;
	
	// uom fraction
	$con->sql_query("select id,fraction from uom");
	while($r = $con->sql_fetchassoc()){
		$uom_fraction_list[$r['id']] = $r['fraction'];
	}
	$con->sql_freeresult();
	
	$price_type_count = 0;
	// got show item discount and no sheet discount, bring item discount to sheet discount
    if($form['show_per']&&!$form['discount_percent']){
		$convert_item_discount_to_sheet_discount = true;
	}
	foreach($items as $price_type=>$items_list){
	    $price_type_count++;
	    
	    // reset var
	    $sub_total_amt = 0;
	    $total_amount = 0;
	    $total_selling = 0;
		$total_ctn = 0;
		$total_pcs = 0;
		$discount_amount = 0;
		
		$new_form = $new_id_list = array();
        $new_form = $form;
        

	    if($convert_item_discount_to_sheet_discount){
			$con->sql_query("select btd.value from branch_trade_discount btd left join trade_discount_type tdt on tdt.id = btd.trade_discount_id where btd.branch_id=".mi($form['ci_branch_id'])." and tdt.code=".ms($price_type));
			$new_form['discount_percent'] = $con->sql_fetchfield(0);
			$con->sql_freeresult();
		}
		
		if($price_type_count==$total_price_type_count){ // use and replace current invoice
            $new_ci_id = $ci_id; // reuse id
            // clean items
            $con->sql_query("delete from ci_items where branch_id=$branch_id and ci_id=$ci_id");
		}else{  // split into new invoice
            $new_bah = $bah;
            $new_bah_items = $bah_items;
            
            // remove the id
            unset($new_bah['id']);
            unset($new_bah_items['id']);
			unset($new_form['id']); 
			
			// remove some column data and make it empty
			unset($new_form['sub_total_amt']);
			unset($new_form['sub_total_foreign_amt']);
			unset($new_form['total_amount']);
			unset($new_form['total_foreign_amount']);
			unset($new_form['total_selling']);
			unset($new_form['total_ctn']);
			unset($new_form['total_pcs']);
			unset($new_form['discount_amount']);
			unset($new_form['foreign_discount_amount']);
			unset($new_form['ci_no']);
			
			// create new approval history id
			$con->sql_query("insert into branch_approval_history ".mysql_insert_by_field($new_bah));
			$new_bah_id = $con->sql_nextid();
			// create new approval history items
			if($new_bah_items){
			    $new_bah_items['approval_history_id'] = $new_bah_id;
                $con->sql_query("insert into branch_approval_history_items ".mysql_insert_by_field($new_bah_items));
			}
			// create new invoice
			$new_form['approval_history_id'] = $new_bah_id;
			$con->sql_query("insert into ci ".mysql_insert_by_field($new_form));
			$new_id_list[] = $new_ci_id = $con->sql_nextid();
		}
		
		if($new_ci_id != $ci_id){	// is splited invoice
			if($form['active'] && $form['status'] && $form['approved']){
				$new_ci_no=assign_ci_no($new_ci_id,$branch_id);	// assign new invoice number if approved
			}
		}
		
		if(!$items_list)    continue;   // no items
		foreach($items_list as $ci_item){
		    $row_price = 0;
		    $row_foreign_price = 0;
		    $row_selling = 0;
		    $disc_arr = array();

			unset($ci_item['id']);
			if($convert_item_discount_to_sheet_discount)    unset($ci_item['discount']);
			
			$ci_item['ci_id'] = $new_ci_id;
			if(!$ci_item['uom_id']) $ci_item['uom_id'] = 1; // set 'EACH' if no uom id

			$uom_fraction = $uom_fraction_list[$ci_item['uom_id']];
			if(!$uom_fraction)  $uom_fraction = 1;  // set fraction as 1 if cant find uom fraction

			$row_price = (($uom_fraction*$ci_item['ctn'])+$ci_item['pcs'])*$ci_item['cost_price'];
			$row_foreign_price = (($uom_fraction*$ci_item['ctn'])+$ci_item['pcs'])*$ci_item['foreign_cost_price'];
			$row_selling = (($uom_fraction*$ci_item['ctn'])+$ci_item['pcs'])*$ci_item['selling_price'];

			if($ci_item['discount'])	$disc_arr = explode("+", $ci_item['discount']);
			if($disc_arr[0]){   // got first discount
				$row_price = $row_price - ($row_price*$disc_arr[0]/100);
				$row_foreign_price = $row_foreign_price - ($row_foreign_price*$disc_arr[0]/100);
			}
			if($disc_arr[1]){   // got second discount
				$row_price = $row_price - ($row_price*$disc_arr[1]/100);
				$row_foreign_price = $row_foreign_price - ($row_foreign_price*$disc_arr[1]/100);
			}

			// insert new invoice items
			$con->sql_query("insert into ci_items ".mysql_insert_by_field($ci_item));

			// sum total
			$sub_total_amt += $row_price;
			$sub_total_foreign_amt += $row_foreign_price;
			$total_selling += $row_selling;
			$total_ctn += $ci_item['ctn'];
			$total_pcs += $ci_item['pcs'];
		}

		$disc_arr = array();
		$total_amount = $sub_total_amt;
		$total_foreign_amount = $sub_total_foreign_amt;
		if($new_form['discount_percent']){  // got sheet discount
            $disc_arr = explode("+", $new_form['discount_percent']);
		}

		if($disc_arr[0]){   // got first discount
            $disc_amt = ($total_amount*$disc_arr[0]/100);
            $foreign_disc_amt = ($total_foreign_amount*$disc_arr[0]/100);
            $total_amount -= $disc_amt;
            $total_foreign_amount -= $foreign_disc_amt;
            $discount_amount += $disc_amt;
            $foreign_discount_amount += $foreign_disc_amt;
		}
		if($disc_arr[1]){   // got second discount
            $disc_amt = ($total_amount*$disc_arr[1]/100);
            $foreign_disc_amt = ($total_foreign_amount*$disc_arr[1]/100);
            $total_amount -= $disc_amt;
            $total_foreign_amount -= $foreign_disc_amt;
            $discount_amount += $disc_amt;
            $foreign_discount_amount += $foreign_disc_amt;
		}

		// update again the total
		$upd = array();
		$upd['total_ctn'] = $total_ctn;
		$upd['total_pcs'] = $total_pcs;
		$upd['sub_total_amt'] = $sub_total_amt;
		$upd['sub_total_foreign_amt'] = $sub_total_foreign_amt;
		$upd['total_amount'] = $total_amount;
		$upd['total_foreign_amount'] = $total_foreign_amount;
		$upd['total_selling'] = $total_selling;
		$upd['discount_amount'] = $discount_amount;
		$upd['foreign_discount_amount'] = $foreign_discount_amount;
		$upd['discount_percent'] = $new_form['discount_percent'];
		$con->sql_query("update ci set ".mysql_update_by_field($upd)." where branch_id=$branch_id and id=".mi($new_ci_id));
		
		update_ci_sheet_price_type($branch_id, $new_ci_id);
		recalculate_ci_gst_amount($new_ci_id, $branch_id);
		if($form['type']=='sales' && $form['active'] && $form['status']==1 && $form['approved'])	export_pos($branch_id, $new_ci_id, false);  // directly export to pos
	}
	
	if($new_id_list){
		$q1 = $con->sql_query("select * from consignment_report_export_history where branch_id=".mi($form['mr_branch_id'])." and year=".mi($form['mr_year'])." and month=".mi($form['mr_month'])." and active=1 limit 1");
		$creh_info = $con->sql_fetchassoc($q1);
		
		$curr_id_list = explode(",", $creh_info['invoice_list']);
		
		foreach($curr_id_list as $r=>$val){
			$val = trim($val);
			if(!in_array($val, $new_id_list)) $new_id_list[] = $val;
		}
		asort($new_id_list);
		
		$creh_upd = array();
		$creh_upd['invoice_list'] = join(",", $new_id_list);
		$creh_upd['timestamp'] = "CURRENT_TIMESTAMP";
		
		$con->sql_query("update consignment_report_export_history set ".mysql_update_by_field($creh_upd)." where branch_id=".mi($form['mr_branch_id'])." and year=".mi($form['mr_year'])." and month=".mi($form['mr_month'])." and active=1 and id = ".mi($creh_info['id']));
	}
	
	return true; // success
}

function export_pos($branch_id=0, $id=0, $need_response = true){
	global $con,$LANG;

	if (!$id || !$branch_id)    // get from params if not provided
	{
		$id = intval($_REQUEST['ci_id']);
		$branch_id = intval($_REQUEST['branch_id']);
	}

	// get consignment invoice details
	$sql = "select * from ci where id=$id and branch_id=$branch_id and active=1 and status=1 and approved=1";
	$con->sql_query($sql) or die(mysql_error());
	$form = $con->sql_fetchrow();
	if(!$form){
		print $LANG['CI_INVALID_INVOICE'];
		exit;
	}
	$timestamp = $form['ci_date']." 01:00:00";
	$date = $form['ci_date'];

	// if this invoice was exported , delete and export again
	if($form['export_pos']==1){
        $con->sql_query("delete from pos where branch_id=".mi($form['ci_branch_id'])." and counter_id=-1 and id=$id and date=".ms($date));
        $con->sql_query("delete from pos_items where branch_id=".mi($form['ci_branch_id'])." and counter_id=-1 and pos_id=$id and date=".ms($date));
	}

	// get items details
	$sql = "select ci_items.*,grn_cost,avg_cost,sku_items.sku_item_code,artno,mcode ,ifnull(trade_discount_code,default_trade_discount_code) as trade_discount_code,uom.fraction
from ci_items
left join sku_items_cost using(branch_id,sku_item_id)
left join sku_items on ci_items.sku_item_id=sku_items.id
left join sku_items_price using(branch_id,sku_item_id)
left join sku on sku_items.sku_id=sku.id
left join uom on uom.id=ci_items.uom_id
where ci_items.ci_id=$id and ci_items.branch_id=$branch_id order by id";

    $con->sql_query($sql) or die(mysql_error());
    if($con->sql_numrows()<=0){
		print $LANG['CI_EMPTY'];
		exit;
	}
	$items = $con->sql_fetchrowset();
	$con->sql_freeresult();

	$con->sql_query("select max(id) from pos_items where branch_id=".mi($form['ci_branch_id'])." and counter_id=-1 and date=".ms($date));
	$row_id = mi($con->sql_fetchfield(0));
	$con->sql_freeresult();


	$str_timestamp = strtotime($timestamp);
	$discount_percent = $form['discount_percent'];
	$discount_selling_price_percent = $form['discount_selling_price_percent'];
	$discount_item_row_percent = $form['discount_item_row_percent'];
	$item_id = 0;
	foreach($items as $r){
	    $upd = array();
	    $item_id ++;
        $row_id ++;
		
		$cost_price=$r['cost_price'];	
		$fraction = floatval($r['fraction']);
		$qty_ctn = $r['ctn'];
		$qty_pcs = $r['pcs'];
		
		if($fraction<=0) $fraction=1;
		
		$row_qty=intval(($qty_ctn*$fraction)+$qty_pcs);
		
		if($form['is_under_gst']) $row_amount=round($r['item_gst_amt'], 2);
		else{
			$row_amount=round($row_qty*($cost_price/$fraction),2);
					
			$row_amt=$row_amount;
			if($discount_selling_price_percent){
				$disc=explode("+",$discount_selling_price_percent);
				foreach($disc as $d ){				
					$disc_amt = $row_amount*($d/100);
					$row_amount -= $disc_amt;				
				}
				$row_amt=$row_amount;
			}
			
			if($discount_item_row_percent){
				$disc=explode("+",$discount_item_row_percent);
				foreach($disc as $d ){			
					$disc_amt = $row_amount*($d/100);
					$row_amount -= $disc_amt;		
				}
			}
			
			// items discount
			if($r['discount']){            
				$disc=explode("+", $r['discount']);
				foreach($disc as $d){
					$disc_amt = $row_amt*($d/100);
					$row_amount -= $disc_amt;
					$row_amt-=$disc_amt;
				}
			}

			// branch discount
			if($discount_percent){           
				$disc=explode("+", $discount_percent);
				foreach($disc as $d){
					$disc_amt = $row_amount*($d/100);
					$row_amount -= $disc_amt;
				}
			}
		}
		$row_amount=round($row_amount,2);

		if(!$pos){
		    $pos['id'] = $id;
			$pos['branch_id'] = $form['ci_branch_id'];
			$pos['counter_id'] = -1;
			$pos['start_time'] = $pos['end_time'] = $pos['pos_time'] = $timestamp;
			$pos['receipt_no'] = sprintf("%05d", $id);
			$pos['cancel_status'] = 0;
			$pos['date'] = $date;
		}
		$pos['amount'] += mf($row_amount);
		$pos['amount_tender'] += mf($row_amount);

		$upd['id'] = $row_id;
		$upd['pos_id'] = $id;
		$upd['branch_id'] = $form['ci_branch_id'];
		$upd['counter_id'] = -1;
		$upd['item_id'] = $item_id;
		$upd['sku_item_id'] = $r['sku_item_id'];
		$upd['barcode'] = $r['sku_item_code'];
		$upd['qty'] = $row_qty;
		$upd['price'] = mf($row_amount);
		$upd['date'] = $date;
		$upd['trade_discount_code'] = $r['trade_discount_code'];
		if($form['is_under_gst']){
			$upd['inclusive_tax'] = 0;
			$upd['tax_code'] = $r['gst_code'];
			$upd['tax_rate'] = $r['gst_rate'];
			$upd['tax_amount'] = round($r['item_gst2'], 2);
			$upd['discount2'] = round($r['item_disc_amt2'], 2);
			$upd['before_tax_price'] = round($upd['price'] - $upd['discount2'] - $upd['tax_amount'], 2);
		}

		$pos_items[] = $upd;
	}

	$con->sql_query("insert into pos ".mysql_insert_by_field($pos));
	$con->sql_freeresult();
	unset($pos);

	if($pos_items){
		foreach($pos_items as $r){
            $con->sql_query("insert into pos_items ".mysql_insert_by_field($r));
            $con->sql_freeresult();
		}
	}
	unset($pos_items);

    // insert pos finalized
	$con->sql_query("replace into pos_finalized (branch_id, date, finalized) values (".mi($form['ci_branch_id']).", ".ms($date).", 1)");

	// update sales category for this branch, this date
	update_sales_cache($form['ci_branch_id'], $date);

	$con->sql_query("update ci set export_pos=1,last_update=last_update where id=$id and branch_id=$branch_id and active=1 and status=1 and approved=1") or die(mysql_error());
	$con->sql_freeresult();

	if($need_response)	print "OK";
}

function bring_item_disc_to_sheet_disc($branch_id, $ci_id){
	global $con, $smarty;
	
	// load header
	$con->sql_query("select * from ci where branch_id=$branch_id and id=$ci_id");
	$form = $con->sql_fetchrow();
	$con->sql_freeresult();
	
	if($form['discount_percent'])   return false;   // cannot bring item discount to sheet discount, because sheet discount exists
	
	$items = load_ci_items($ci_id, $branch_id); // load items
	if(!$items) return false;   // no items
	
	// perform checking on items discount
	$discount_arr = array();
	foreach($items as $r){
        if($r['discount'] && !in_array($r['discount'], $discount_arr)){
            $discount_arr[] = $r['discount'];
		}
	}
	if(count($discount_arr)!=1) return false;   // no discount or discount have more than 1 type
	
	$discount_percent = $discount_arr[0];
	$disc_arr = explode("+", $discount_percent);
	
    $sub_total_amt = 0;
	$discount_amount = 0;
	$total_amount = 0;
	
	foreach($items as $r){
	    $row_amt = (($r['ctn'] * $r['uom_fraction']) + $r['pcs']) * $r['cost_price'];
	    $sub_total_amt += $row_amt;
	}
	
	$total_amount = $sub_total_amt;
	
	if($disc_arr[0]){
        $discount_amount += $total_amount * ($disc_arr[0]/100);
        $total_amount -= $discount_amount;
	}
	if($disc_arr[1]){
        $discount_amount += $total_amount * ($disc_arr[1]/100);
        $total_amount -= $discount_amount;
	}
	$con->sql_query("update ci_items set discount='' where branch_id=$branch_id and ci_id=$ci_id");
	
	$upd = array();
	$upd['sub_total_amt'] = $sub_total_amt;
	$upd['discount_amount'] = $discount_amount;
	$upd['discount_percent'] = $discount_percent;
	$upd['total_amount'] = $total_amount;
	$con->sql_query("update ci set ".mysql_update_by_field($upd)." where branch_id=$branch_id and id=$ci_id");
	return true;
}

function check_must_can_edit($branch_id, $ci_id, $is_approval_screen = false){
	global $con, $LANG;

    $con->sql_query("select active, status, approved from ci where branch_id=".mi($branch_id)." and id=".mi($ci_id));

	if($r = $con->sql_fetchrow()){  // invoice exists
		if(!$r['active']){  // inactive
            display_redir($_SERVER['PHP_SELF'], "Consignment Invoice", sprintf($LANG['CI_INACTIVE'], $ci_id));
		}elseif ($r['status']==4 || $r['status']==5){    // canceled or deleted
		    display_redir($_SERVER['PHP_SELF'], "Consignment Invoice", sprintf($LANG['CI_ALREADY_CANCELED_OR_DELETED'], $ci_id));
		}else{
		    if($is_approval_screen){
				if($r['approved']){
                    display_redir($_SERVER['PHP_SELF'], "Consignment Invoice", sprintf($LANG['CI_ALREADY_CONFIRM_OR_APPROVED'], $ci_id));
				}
			}elseif(($r['status']>0 && $r['status'] !=2) || $r['approved']){    // confimred or approved
			    display_redir($_SERVER['PHP_SELF'], "Consignment Invoice", sprintf($LANG['CI_ALREADY_CONFIRM_OR_APPROVED'], $ci_id));
			}
		}
	}else{
        display_redir($_SERVER['PHP_SELF'], "Consignment Invoice", sprintf($LANG['CI_NOT_FOUND'], $ci_id)); // invoice not found
	}
	$con->sql_freeresult();
}

function update_ci_sheet_price_type($bid, $ci_id){
	global $con;
	
	$bid = mi($bid);
	$ci_id = mi($ci_id);
	
	if(!$bid || !$ci_id)	return false;
	
	$q_ci = $con->sql_query("select cii.price_type from ci_items cii where branch_id=".mi($bid)." and ci_id=".mi($ci_id));

	$price_type_list = array();
	while($r = $con->sql_fetchassoc($q_ci)){
		//$r['price_type'] = unserialize($r['price_type']);

		if(!$r['price_type']) continue;
		
		if(!in_array($r['price_type'], $price_type_list)){
			$price_type_list[] = $r['price_type'];
			continue;
		}
		
		if(count($price_type_list)>1){	// found more than 1 price type
			break;
		}
	}
	$con->sql_freeresult($q_ci);
	//print_r($price_type_list);exit;
	// more than 1 price type, save empty
	$sheet_price_type = count($price_type_list)>1 ? '' : $price_type_list[0];
	
	$con->sql_query("update ci set sheet_price_type=".ms($sheet_price_type)." where branch_id=".mi($bid)." and id=".mi($ci_id));
}

function recalculate_ci_gst_amount($ci_id, $bid){
	global $con;
	
	$q1 = $con->sql_query("select * from ci where id = ".mi($ci_id)." and branch_id = ".mi($bid));
	
	if($con->sql_numrows($q1) == 0) return;
	$ci_info = $con->sql_fetchassoc($q1);
	$con->sql_freeresult($q1);
	
	if($ci_info['discount_selling_price_percent']){
		$discount_selling_price_percent_arr = explode("+", $ci_info['discount_selling_price_percent']);
	}
	if($ci_info['discount_item_row_percent']){
		$discount_item_row_percent_arr = explode("+", $ci_info['discount_item_row_percent']);
	}
	//if(!$ci_info['is_under_gst']) return;
	
	// load ci items
	$q1 = $con->sql_query("select cii.*, u.fraction
						   from ci_items cii
						   left join uom u on u.id = cii.uom_id
						   where cii.ci_id = ".mi($ci_id)." and cii.branch_id = ".mi($bid));
	
	$total_amt = $total_gst_amt = $total_foreign_amt = $total_foreign_gst_amt = 0;
	$total_ctn = $total_pcs = 0;
	
	$price_type_list = array();
	$last_price_type = '';
	while($r = $con->sql_fetchassoc($q1)){
		$item_amt = ($r['cost_price'] / $r['fraction']) * ($r['ctn'] * $r['fraction'] + $r['pcs']);
		$foreign_cost_price = $r['foreign_cost_price'];
		if($ci_info['is_under_gst']){
			if($r['display_cost_price_is_inclusive']){
				$foreign_cost_price = $foreign_cost_price / (100+$r['gst_rate']) * 100;
			}
		}
		$item_foreign_amt = ($foreign_cost_price / $r['fraction']) * ($r['ctn'] * $r['fraction'] + $r['pcs']);
				
		
		//print "item_foreign_amt = $item_foreign_amt<br>";
		$item_disc_amt = 0;
		$item_foreign_disc_amt = 0;
		
		if($discount_selling_price_percent_arr){
			if($discount_selling_price_percent_arr[0]){
				$tmp_disc_amt = $item_amt * ($discount_selling_price_percent_arr[0]/100);
				$item_amt -= $tmp_disc_amt;
				
				$item_disc_amt += $tmp_disc_amt;
				
				// foreign
				$tmp_disc_amt = $item_foreign_amt * ($discount_selling_price_percent_arr[0]/100);
				$item_foreign_amt -= $tmp_disc_amt;
				
				$item_foreign_disc_amt += $tmp_disc_amt;
			}
			if($discount_selling_price_percent_arr[1]){
				$tmp_disc_amt = $item_amt * ($discount_selling_price_percent_arr[1]/100);
				$item_amt -= $tmp_disc_amt;
				
				$item_disc_amt += $tmp_disc_amt;
				
				// foreign
				$tmp_disc_amt = $item_foreign_amt * ($discount_selling_price_percent_arr[1]/100);
				$item_foreign_amt -= $tmp_disc_amt;
				
				$item_foreign_disc_amt += $tmp_disc_amt;
			}
		}
		
		if($discount_item_row_percent_arr){
			if($discount_item_row_percent_arr[0]){
				$tmp_disc_amt = $item_amt * ($discount_item_row_percent_arr[0]/100);
				$item_amt -= $tmp_disc_amt;
				
				$item_disc_amt += $tmp_disc_amt;
				
				// foreign
				$tmp_disc_amt = $item_foreign_amt * ($discount_item_row_percent_arr[0]/100);
				$item_foreign_amt -= $tmp_disc_amt;
				
				$item_foreign_disc_amt += $tmp_disc_amt;
			}
			if($discount_item_row_percent_arr[1]){
				$tmp_disc_amt = $item_amt * ($discount_item_row_percent_arr[1]/100);
				$item_amt -= $tmp_disc_amt;
				
				$item_disc_amt += $tmp_disc_amt;
				
				// foreign
				$tmp_disc_amt = $item_foreign_amt * ($discount_item_row_percent_arr[1]/100);
				$item_foreign_amt -= $tmp_disc_amt;
				
				$item_foreign_disc_amt += $tmp_disc_amt;
			}
		}
		
		if($r['discount']){    // deduct item discount first
			$discount_arr = explode("+", $r['discount']);
			if($discount_arr[0]){
				$tmp_disc_amt = $item_amt * ($discount_arr[0]/100);
				$item_amt -= $tmp_disc_amt;
				
				$item_disc_amt += $tmp_disc_amt;
				
				// foreign
				$tmp_disc_amt = $item_foreign_amt * ($discount_arr[0]/100);
				$item_foreign_amt -= $tmp_disc_amt;
				
				$item_foreign_disc_amt += $tmp_disc_amt;
			}
			if($discount_arr[1]){
				$tmp_disc_amt = $item_amt * ($discount_arr[1]/100);
				$item_amt -= $tmp_disc_amt;
				
				$item_disc_amt += $tmp_disc_amt;
				
				// foreign
				$tmp_disc_amt = $item_foreign_amt * ($discount_arr[1]/100);
				$item_foreign_amt -= $tmp_disc_amt;
				
				$item_foreign_disc_amt += $tmp_disc_amt;
			}
		}

		$item_gst = $item_gst_amt = 0;
		if($ci_info['is_under_gst']){
			$item_gst = $item_amt * ($r['gst_rate']/100);
			
		}
		$item_gst_amt = $item_amt + $item_gst;
		
		$item_amt_rounded = round($item_amt, 2);
		$item_gst_amt_rounded = round($item_gst_amt, 2);
		$item_gst = round($item_gst_amt_rounded - $item_amt_rounded,2);
		
		$r['item_amt'] = round($item_amt,2);
		$r['item_gst'] = round($item_gst, 2);
		$r['item_gst_amt'] = round($item_gst_amt,2);
		$r['item_disc_amt'] = round($item_disc_amt,2);
		$r['item_foreign_amt'] = round($item_foreign_amt,2);
		
		$item_foreign_gst = $item_foreign_gst_amt = 0;
		if($ci_info['is_under_gst']){
			$item_foreign_gst = $item_foreign_amt * ($r['gst_rate']/100);
		}
		$item_foreign_gst_amt = $item_foreign_amt + $item_foreign_gst;
		$r['item_foreign_gst'] = round($item_foreign_gst, 2);
		$r['item_foreign_gst_amt'] = round($item_foreign_gst_amt, 2);
		$r['item_foreign_disc_amt'] = round($item_foreign_disc_amt,2);
		
		$sub_total_gross_amt += round($item_amt,2);
		$sub_total_gst_amt += round($item_gst,2);
		
		
		$total_amt += round($r['item_amt'],2);
		$total_gst_amt += round($r['item_gst_amt'],2);
		
		$sub_total_foreign_gross_amt += round($item_foreign_amt, 2);
		$sub_total_foreign_gst_amt += round($item_foreign_gst, 2);
		$sub_total_foreign_amt += round($item_foreign_gst_amt, 2);
		
		//print "item_foreign_amt: $item_foreign_amt, item_foreign_gst_amt: $item_foreign_gst_amt<br>";
		
		$total_ctn += $r['ctn'];
		$total_pcs += $r['pcs'];
		
		$items[$r['id']] = $r;
		
		$price_type_list[$r['price_type']] = 1;
		$last_price_type = $r['price_type'];
	}
	$con->sql_freeresult($q1);
	//print_r($items);
	
	// swap variable due to wrong assign
	$sub_total_amt = $total_gst_amt;
	$tmp_amt = $total_gst_amt;
	$total_gst_amt = $sub_total_gst_amt;
	$total_amt = $tmp_amt;
	
	$total_foreign_gross_amt = $sub_total_foreign_gross_amt;
	$total_foreign_gst_amt = $sub_total_foreign_gst_amt;
	$total_foreign_amount = $sub_total_foreign_amt;
	
	// calculate gross amount (deduct sheet discount)
	$total_gross_amt = $sub_total_gross_amt;	
	
	//print "sub_total_foreign_gross_amt = $sub_total_foreign_gross_amt, sub_total_foreign_amt = $sub_total_foreign_amt<br>";
	
	$total_discount_amt = $total_foreign_discount_amt = 0;
	
	if($ci_info['discount_percent']){
		$sheet_discount_arr = explode("+", $ci_info['discount_percent']);
		$tmp_total_amt = $total_amt;
		$tmp_total_foreign_amt = $total_foreign_amount;
		
		if($sheet_discount_arr[0]){
			$sheet_discount_amt = $tmp_total_amt * $sheet_discount_arr[0]/100;
			$tmp_total_amt -= $sheet_discount_amt;
			$total_discount_amt += $sheet_discount_amt;
			
			// foreign
			$sheet_discount_amt = $tmp_total_foreign_amt * $sheet_discount_arr[0]/100;
			$tmp_total_foreign_amt -= $sheet_discount_amt;
			$total_foreign_discount_amt += $sheet_discount_amt;
		}
		if($sheet_discount_arr[1]){
			$sheet_discount_amt = $tmp_total_amt * $sheet_discount_arr[1]/100;
			$tmp_total_amt -= $sheet_discount_amt;
			$total_discount_amt += $sheet_discount_amt;
			
			// foreign
			$sheet_discount_amt = $tmp_total_foreign_amt * $sheet_discount_arr[1]/100;
			$tmp_total_foreign_amt -= $sheet_discount_amt;
			$total_foreign_discount_amt += $sheet_discount_amt;
		}
		
		$total_discount_amt = round($total_discount_amt, 2);
		$total_foreign_discount_amt = round($total_foreign_discount_amt, 2);
		
		$total_amt -= $total_discount_amt;
		$total_foreign_amount -= $total_foreign_discount_amt;
	}
	
	if($total_discount_amt > 0){
		$disc_p = $total_discount_amt / $sub_total_amt;
		$gross_discount_amt = round($sub_total_gross_amt * $disc_p,2);
		$sheet_gst_discount = round($total_discount_amt - $gross_discount_amt, 2);
	}
	
	$total_gross_amt = $sub_total_gross_amt - $gross_discount_amt;
	$total_gst_amt = round($sub_total_gst_amt - $sheet_gst_discount, 2);
	
	// foreign
	//print "foreign_discount_amount: $total_foreign_discount_amt<br>";
	if($total_foreign_discount_amt > 0 && $disc_p){
		//$foreign_disc_p = $total_foreign_discount_amt / $sub_total_foreign_amt;
		$gross_foreign_discount_amount = round($sub_total_foreign_gross_amt * $disc_p,2);
		$sheet_foreign_gst_discount = round($total_foreign_discount_amt - $gross_foreign_discount_amount, 2);
	}
	
	$total_foreign_gross_amt = $sub_total_foreign_gross_amt - $gross_foreign_discount_amount;
	$total_foreign_gst_amt = round($sub_total_foreign_gst_amt - $sheet_foreign_gst_discount, 2);
		
	// calculate amt2 and update amt by item
	$remaining_gross_discount_amt = $gross_discount_amt;
	$remaining_sheet_gst_discount = $sheet_gst_discount;
	$remaining_total_discount_amt = $total_discount_amt;
	
	// foreign
	$remaining_gross_foreign_discount_amount = $gross_foreign_discount_amount;
	$remaining_sheet_foreign_gst_discount = $sheet_foreign_gst_discount;
	$remaining_total_foreign_discount_amt = $total_foreign_discount_amt;
	
	//print "remaining_gross_discount_amt = $remaining_gross_discount_amt, remaining_total_discount_amt = $remaining_total_discount_amt, remaining_sheet_gst_discount = $remaining_sheet_gst_discount<br>";
	$item_count = count($items);
	$curr_item_num = 0;
	if($items){
		foreach($items as $tmp=>$r){
			$curr_item_num++;
			
			$r['item_amt2'] = $r['item_amt'];
			$r['item_gst2'] = $r['item_gst'];
			$r['item_gst_amt2'] = $r['item_gst_amt'];
			$r['item_disc_amt2'] = 0;

			if($disc_p){
				$r['item_gst_amt2'] = $r['item_gst_amt'] * ((1 - $disc_p));
				$r['item_amt2'] = $r['item_gst_amt2'] / ((100 + $r['gst_rate']) / 100);
				
				$r['item_gst_amt2'] = round($r['item_gst_amt2'], 2);
				$r['item_amt2'] = round($r['item_amt2'], 2);
				
				$r['item_gst2'] = $r['item_gst_amt2'] - $r['item_amt2'];
				$r['item_disc_amt2'] = $r['item_gst_amt'] - $r['item_gst_amt2'];
				
				$r['item_gst_amt2'] = round($r['item_gst_amt2'] ,2);
				$r['item_amt2'] = round($r['item_amt2'] ,2);
				$r['item_gst2'] = round($r['item_gst2'] ,2);
				$r['item_disc_amt2'] = round($r['item_disc_amt2'] ,2);
				
				// check cannot not equal to total discount
				$remaining_gross_discount_amt = round($remaining_gross_discount_amt - ($r['item_amt'] - $r['item_amt2']), 2);
				$remaining_sheet_gst_discount = round($remaining_sheet_gst_discount - ($r['item_gst'] - $r['item_gst2']), 2);
				$remaining_total_discount_amt = round($remaining_total_discount_amt - ($r['item_disc_amt2']), 2);
				
				//print "item_amt2: $r[item_amt2], item_gst2: $r[item_gst2], item_gst_amt2: $r[item_gst_amt2]<br>";
				//print "remaining_gross_discount_amt = $remaining_gross_discount_amt, remaining_sheet_gst_discount = $remaining_sheet_gst_discount, remaining_total_discount_amt = $remaining_total_discount_amt<br>";
				
				// is last item
				if($curr_item_num == $item_count){
					if($remaining_gross_discount_amt != 0){
						$r['item_amt2'] -= $remaining_gross_discount_amt;
						$remaining_gross_discount_amt = 0;
					}
					if($remaining_sheet_gst_discount != 0){
						$r['item_gst2'] -= $remaining_sheet_gst_discount;
						$remaining_sheet_gst_discount = 0;
					}
					if($remaining_total_discount_amt != 0){
						$r['item_gst_amt2'] -= $remaining_total_discount_amt;
						$r['item_disc_amt2'] += $remaining_total_discount_amt;
						$remaining_total_discount_amt = 0;
					}
				}
			}
			
			$r['item_foreign_amt2'] = $r['item_foreign_amt'];
			$r['item_foreign_gst2'] = $r['item_foreign_gst'];
			$r['item_foreign_gst_amt2'] = $r['item_foreign_gst_amt'];
			$r['item_foreign_disc_amt2'] = 0;
			
			if($disc_p){
				$r['item_foreign_gst_amt2'] = $r['item_foreign_gst_amt'] * ((1 - $disc_p));
				$r['item_foreign_amt2'] = $r['item_foreign_gst_amt2'] / ((100 + $r['gst_rate']) / 100);
				
				$r['item_foreign_gst_amt2'] = round($r['item_foreign_gst_amt2'], 2);
				$r['item_foreign_amt2'] = round($r['item_foreign_amt2'], 2);
				
				$r['item_foreign_gst2'] = $r['item_foreign_gst_amt2'] - $r['item_foreign_amt2'];
				$r['item_foreign_disc_amt2'] = $r['item_foreign_gst_amt'] - $r['item_foreign_gst_amt2'];
				
				$r['item_foreign_gst_amt2'] = round($r['item_foreign_gst_amt2'], 2);
				$r['item_foreign_amt2'] = round($r['item_foreign_amt2'], 2);
				$r['item_foreign_gst2'] = round($r['item_foreign_gst2'], 2);
				$r['item_foreign_disc_amt2'] = round($r['item_foreign_disc_amt2'], 2);
				
				// check cannot not equal to total discount
				$remaining_gross_foreign_discount_amount = round($remaining_gross_foreign_discount_amount - ($r['item_foreign_amt'] - $r['item_foreign_amt2']), 2);
				$remaining_sheet_foreign_gst_discount = round($remaining_sheet_foreign_gst_discount - ($r['item_foreign_gst'] - $r['item_foreign_gst2']), 2);
				$remaining_total_foreign_discount_amt = round($remaining_total_foreign_discount_amt - ($r['item_foreign_disc_amt2']), 2);
				
				// is last item
				if($curr_item_num == $item_count){
					if($remaining_gross_foreign_discount_amount != 0){
						$r['item_foreign_amt2'] -= $remaining_gross_foreign_discount_amount;
						$remaining_gross_foreign_discount_amount = 0;
					}
					if($remaining_sheet_foreign_gst_discount != 0){
						$r['item_foreign_gst2'] -= $remaining_sheet_foreign_gst_discount;
						$remaining_sheet_foreign_gst_discount = 0;
					}
					if($remaining_total_foreign_discount_amt != 0){
						$r['item_foreign_gst_amt2'] -= $remaining_total_foreign_discount_amt;
						$r['item_foreign_disc_amt2'] += $remaining_total_foreign_discount_amt;
						$remaining_total_foreign_discount_amt = 0;
					}
				}
			}
		
			// ready to update ci_items
			$upd = array();
			$upd['item_amt'] = $r['item_amt'];
			$upd['item_gst'] = $r['item_gst'];
			$upd['item_gst_amt'] = $r['item_gst_amt'];
			$upd['item_disc_amt'] = $r['item_disc_amt'];
			$upd['item_amt2'] = $r['item_amt2'];
			$upd['item_gst2'] = $r['item_gst2'];
			$upd['item_gst_amt2'] = round($r['item_gst_amt2'], 2);
			$upd['item_disc_amt2'] = $r['item_disc_amt2'];
			
			$upd['item_foreign_amt'] = $r['item_foreign_amt'];
			$upd['item_foreign_gst'] = $r['item_foreign_gst'];
			$upd['item_foreign_gst_amt'] = $r['item_foreign_gst_amt'];
			$upd['item_foreign_disc_amt'] = $r['item_foreign_disc_amt'];
			$upd['item_foreign_amt2'] = $r['item_foreign_amt2'];
			$upd['item_foreign_gst2'] = $r['item_foreign_gst2'];
			$upd['item_foreign_gst_amt2'] = round($r['item_foreign_gst_amt2'], 4);
			$upd['item_foreign_disc_amt2'] = $r['item_foreign_disc_amt2'];
			
			$con->sql_query("update ci_items set ".mysql_update_by_field($upd)." where id = ".mi($r['id'])." and branch_id = ".mi($r['branch_id']));
		}
	}
	
	
	// update main table "ci"
	$upd = array();
	$upd['total_gross_amt'] = round($total_gross_amt, 2);
	$upd['total_gst_amt'] = round($total_gst_amt, 2);
	$upd['sheet_gst_discount'] = round($sheet_gst_discount, 2);
	$upd['sub_total_amt'] = round($sub_total_amt, 2);
	$upd['total_amount'] = round($total_amt, 2);
	$upd['discount_amount'] = round($total_discount_amt, 2);
	$upd['gross_discount_amount'] = round($gross_discount_amt, 2);
	$upd['sub_total_gross_amt'] = round($sub_total_gross_amt, 2);
	$upd['total_ctn'] = $total_ctn;
	$upd['total_pcs'] = $total_pcs;
	
	$upd['total_foreign_gross_amt'] = round($total_foreign_gross_amt, 2);
	$upd['total_foreign_gst_amt'] = round($total_foreign_gst_amt, 2);
	$upd['sheet_foreign_gst_discount'] = round($sheet_foreign_gst_discount, 2);
	$upd['sub_total_foreign_amt'] = round($sub_total_foreign_amt, 2);
	$upd['total_foreign_amount'] = round($total_foreign_amount, 2);
	$upd['foreign_discount_amount'] = round($total_foreign_discount_amt, 2);
	$upd['gross_foreign_discount_amount'] = round($gross_foreign_discount_amount, 2);
	$upd['sub_total_foreign_gross_amt'] = round($sub_total_foreign_gross_amt, 2);
	
	$upd['sheet_price_type'] = count($price_type_list) > 1 ? '' : $last_price_type;
	
	$con->sql_query("update ci set ".mysql_update_by_field($upd)." where id = ".mi($ci_id)." and branch_id = ".mi($bid));
}

function load_gst_summary($items=array()){
	global $con, $smarty;
	
	if(!$items) return;

	foreach($items as $dummy=>$r){
		if(!$r['gst_id']) continue;
		
		if($r['item_amt2']) $item_amt = $r['item_amt2'];
		else $item_amt = $r['item_amt'];
		if($r['item_gst2']) $item_gst_amt = $r['item_gst2'];
		else $item_gst_amt = $r['item_gst'];
		
		$gst_summary_list[$r['indicator_receipt']]['total_amount'] += $item_amt;
		$gst_summary_list[$r['indicator_receipt']]['total_gst_amount'] += $item_gst_amt;
		$gst_summary_list[$r['indicator_receipt']]['gst_rate'] = $r['gst_rate'];


        if($r['item_foreign_amt2']) $item_amt = $r['item_foreign_amt2'];
		else $item_amt = $r['item_foreign_amt'];
		if($r['item_foreign_gst2']) $item_gst_amt = $r['item_foreign_gst2'];
		else $item_gst_amt = $r['item_foreign_gst'];

        $gst_summary_list[$r['indicator_receipt']]['total_foreign_amount'] += $item_amt;
        $gst_summary_list[$r['indicator_receipt']]['toal_foreign_gst_amount'] += $item_gst_amt;
	}
	
	$smarty->assign("gst_summary_list", $gst_summary_list);
}

function recalculate_amount_with_date_range($date_from, $date_to){
	global $con;
	
	if(!$date_from)	die("Invalid Date From");
	if(!$date_to)	die("Invalid Date To");
	
	$q1 = $con->sql_query("select id,branch_id from ci where active=1 and ci_date between ".ms($date_from)." and ".ms($date_to));
	$affetcted_count = 0;
	while($ci = $con->sql_fetchassoc($q1)){
		recalculate_ci_gst_amount($ci['id'], $ci['branch_id']);
		$affetcted_count++;
	}
	$con->sql_freeresult($q1);
	
	print "$affetcted_count updated, done.";
}
?>
