<?php/**************** USAGE *******************> php admin.server_maintenance.archive_database.php -date=2010-01-01 -to_db=arms_pkt_2_backup-uroot-pabc123-mode=archive-to_db=armshq_backupforce_continuecreate database armshq_backup// change root and password to armshq and customer passgrant all privileges on armshq_backup.* to 'root'@'localhost' identified by '';grant all privileges on armshq_backup.* to 'arms'@'localhost' identified by '4383659';grant all privileges on armshq_backup.* to 'root'@'%' identified by '';grant all privileges on armshq_backup.* to 'arms'@'%' identified by '4383659';pktgrant all privileges on arms_pkt_backup.* to 'root'@'localhost' identified by '';grant all privileges on arms_pkt_backup.* to 'arms_pkt'@'localhost' identified by '914381';php admin.server_maintenance.archive_database.php -date=2010-01-01 -to_db=arms_pkt_backuphasanicreate database armshq_backupgrant all privileges on armshq_backup.* to 'root'@'localhost' identified by 'web0x';grant all privileges on armshq_backup.* to 'arms'@'localhost' identified by 'hsn916';grant all privileges on armshq_backup.* to 'root'@'%' identified by 'web0x';grant all privileges on armshq_backup.* to 'arms'@'%' identified by 'hsn916';php admin.server_maintenance.archive_database.php -date=2014-07-01 -to_db=armshq_backup -mode=analysis|archive*//*4/20/2011 12:08:43 PM Andy- Change script to only can run in terminal and must stop apache first.- Change archive table to other database.4/28/2011 11:25:23 AM Andy- Fix not to archive GRA which have return_timestamp zero.7/5/2011 1:31:32 PM Andy- Change split() to use explode()9/24/2014 3:48:17 PM Andy- Add can skip apache check- Remove some old expired code.- Comment out the archive for table voucher & voucher_damage_cheque.- Remove the $min_cutoff_date checking, due to this variable is never assigned.*/define("TERMINAL",1);include("include/common.php");include("admin.server_maintenance.include.php");//if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");//if(BRANCH_CODE != 'HQ') js_redirect($LANG['HQ_ONLY'], "/index.php");//if (!privilege('SERVER_MAINTENANCE')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'SERVER_MAINTENANCE', BRANCH_CODE), "/index.php");// check don run duplicate@exec('ps ax | grep -v grep | grep -v /bin/sh | grep '.basename(__FILE__), $exec);if (count($exec)>1){ 	print date("[H:i:s m.d.y]")." Another process is already running\n";	print_r($exec);	exit;}$arg = $_SERVER['argv'];$archive_mode = 'analysis';$mysql_db_connection = $db_default_connection;	// clone default mysql connection settings$from_db = $db_default_connection[3];define('FROM_DB', $from_db);$to_db = 'armshq_backup';$skip_apache_check = false;array_shift($arg); //drop the first optionwhile($arg){	$a = strtolower(array_shift($arg));	if(preg_match("/^-date=/", $a)){			// date		$cutoff_date = date("Y-m-d", strtotime(str_replace("-date=", "", $a)));	}elseif(preg_match("/^-mode=/", $a)){		// archive mode, if no pass will be default 'analysis'		$archive_mode = str_replace("-mode=", "", $a);	}elseif(preg_match("/^-u/", $a)){		// mysql user		$mysql_db_connection[1] = str_replace("-u", "", $a);	}elseif(preg_match("/^-p/", $a)){		// mysql password		$mysql_db_connection[2] = str_replace("-p", "", $a);	}elseif(preg_match("/^-to_db=/", $a)){		// which database the table should backup to, default is 'armshq_backup'		$to_db = str_replace("-to_db=", "", $a);	}elseif($a=='force_continue'){		$force_continue = true;	}elseif($a=='skip_apache_check'){		$skip_apache_check = true;	}else{		$err[] = "Unknown option $a\n";	}}// check apache whether it is runningif(!$skip_apache_check){	$exec = array();	exec('/etc/init.d/apache2 status', $exec);		if(is_array($exec) && strpos($exec[0], 'is running')){		print_r($exec);		print "*** This module cannot be run while apache is running.***\n";		exit;	}}if(date("Y", strtotime($cutoff_date))<2000)	$err [] ="Invalid Date.\n";else{	//if(strtotime($cutoff_date)>strtotime($min_cutoff_date))	$err[] = "You can only archive data before $min_cutoff_date.\n";}if($err){	print_r($err);exit;}if($archive_mode != 'analysis' && $archive_mode != 'archive' && $archive_mode !='restore_stock_balance')	die("Invalid Mode $archive_mode. (must be 'analysis', 'archive' or 'restore_stock_balance')\n");class ARC_DATABASE {	var $archive_tables = array('po','po_items','do','do_items','do_open_items','do_request_items','adjustment','adjustment_items','grr','grr_items','grn','grn_items','pos','pos_items','gra','gra_items','ci','ci_items','cn','cn_items','dn','dn_items','consignment_report','consignment_report_page_info','consignment_report_sku','log','login_tickets','picking_list','pm','pos_cash_domination','pos_cash_history','pos_counter_collection','pos_counter_collection_tracking','pos_drawer','pos_finalized','pos_goods_return','pos_payment','pos_receipt_cancel','promotion','promotion_items','sales_order','sales_order_items','shift_record','sku_items_mprice_history','sku_items_price_history','sku_items_qprice_history','sku_items_cost_history','stock_check','stock_take_pre','vendor_sku_history','monthly_report_list');  // removed: ('voucher','voucher_damage_cheque')	var $consignment_archive_tables = array('ci','ci_items','cn','cn_items','dn','dn_items','consignment_report','consignment_report_page_info','consignment_report_sku','monthly_report_list');		var $known_tables = array('/^(stock_closing_|stock_balance_|tmp_|tracker|archive_|approval_|sales_target|mkt\d|mkt_|membership|branch|bom_items|category|brand|brgroup|card_nric|pos_transaction|privilege|debtor|pivot_table|import_export_stock|counter_|consignment_|do_|log|picking_|pm|po_|rpt_group|pos_|promotion|report_|session|sys_|uom|user|trade_discount_|sku|sql_|vendor|voucher_)/', '/_cache|archive_/', '/^(config_master|privilege_master|ri|ri_items|bank_interest)$/');		var $other_history_data = array('promotion'=>'Promotion','log'=>'Log','picking_list'=>'Picking List','pm'=>'PM','shift_record'=>'Shift Records','sku_items_price_history'=>'SKU Items Price Histotry','sku_items_qprice_history'=>'SKU Items QPrice History','sku_items_mprice_history'=>'SKU Items MPrice History','sku_items_cost_history'=>'SKU Items Cost History','vendor_sku_history'=>'Vendor SKU History','stock_take'=>'Stock Take','voucher'=>'Voucher','sales_order'=>'Sales Order','consignment_report'=>'Consignment Monthly Report');		var $source_label = 'ARC_MA_SCR';		function start(){		global $con, $archive_mode;				// load branches list		$con->sql_query("select * from branch where id>0");		while($r = $con->sql_fetchrow()){			$this->branches[$r['id']] = $r;		}		$con->sql_freeresult();				if($archive_mode=='restore_stock_balance'){			$this->restore_stock_balance();		}else{			$this->scan_tables();						$this->run_database();		}	}		function scan_tables(){		global $con;		$tbls = $con->sql_query("show tables");		 		$tb = "";		while($t = $con->sql_fetchrow($tbls))		{			// check whether system know the table		    if (in_array($t[0], $this->archive_tables)) continue;	// table need to need archive, it is known table		    		    // pattern matching for known table		    $match = 0;		    foreach($this->known_tables as $pattern)			{				if (preg_match($pattern, $t[0])) { $match=1; break; }			}			if (!$match) $tb .="- $t[0]\n";	// unknown table		}		$con->sql_freeresult($tbls);		if ($tb)		{		    print "System Analyze Warning: System do not recognize the following tables. Please contact System Admin or you want to continue anyway? Those data will not be touch if you choose to archive.\n$tb";		}	}		private function run_database(){		global $con, $cutoff_date, $archive_mode, $to_db, $mysql_db_connection, $force_continue, $db_default_connection;				$starttime = microtime(true);				$this->one_day_b4_cutoff = date("Y-m-d", strtotime("-1 day", strtotime($cutoff_date)));        $this->date_key = date("Ymd", strtotime($cutoff_date));        $this->cutoff_date = $cutoff_date;        if($archive_mode == 'archive')	$this->is_archive = true;        		// find y,m for last month for those table only got year and month		$this->cutoff_y = mi(date("Y", strtotime($cutoff_date)));        $this->cutoff_m = mi(date("m", strtotime($cutoff_date)));        $this->cutoff_m--;        if($this->cutoff_m<1){            $this->cutoff_m = 12;            $this->cutoff_y --;		}				// check whether this date already have archive        $con->sql_query("select * from database_archive_history where date=".ms($cutoff_date));        $got_history = $con->sql_fetchrow();                if($got_history)    $err[] = "$cutoff_date Data already archived. Archive Failed!";				// archive table prefix		$archive_prefix = $this->archive_prefix = "archive_".$this->date_key;		$table_arr = $this->archive_tables;				// check table already exists or not		foreach($table_arr as $tbl){			$archive_tbl = $to_db.".".$this->archive_prefix."_".$tbl; 			if($err_msg = $this->check_table_exists($archive_tbl)){				$err[] = $err_msg;			}		}				// try connect to backup database		//print_r($mysql_db_connection);		unset($con);		$con = connect_db($mysql_db_connection[0], $mysql_db_connection[1], $mysql_db_connection[2], $to_db);		$this->con2 = $con;				//print_r($con);		if($err){			print "Error!\n";            print_r($err);			if(!$force_continue)	exit;		}		// PO		//print FROM_DB;exit;        $this->archive_PO($con);                // DO        $this->archive_DO($con);                // ADJUSTMENT        $this->archive_ADJ($con);                // GRR/GRN        $this->archive_GRN($con);                // GRA        $this->archive_GRA($con);                // POS        $this->archive_POS($con);                // LOG        $this->archive_LOG($con);                // LOGIN_TICKETS        $this->archive_LOGIN_TICKETS($con);                // PICKING_LIST        $this->archive_PICKING_LIST($con);                // PM        $this->archive_PM($con);                // PROMOTION        $this->archive_PROMOTION($con);                // SKU ITEMS PRICE/COST        //$this->archive_SKU_COST_SELLING($con);                // STOCK_TAKE        $this->archive_STOCK_TAKE($con);                // SALES_ORDER        $this->archive_SALES_ORDER($con);        		// CI / CN / DN        $this->archive_CI_CN_DN($con);                // consignment monthly report        $this->archive_CON_MONTHLY_REPORT($con);        		// membership        //$this->archive_MEMBERSHIP($con);                // CACHE        $this->archive_CACHE($con);                // OTHERS        $this->archive_OTHERS($con);                // connect back to armshq        unset($con);		$con = connect_db($db_default_connection[0], $db_default_connection[1], $db_default_connection[2], $db_default_connection[3]);		$this->mark_sku_history();				$this->mark_member_history();				$this->mark_vendor_sku_history();				// try connect to backup database		//print_r($mysql_db_connection);		unset($con);		$con = connect_db($mysql_db_connection[0], $mysql_db_connection[1], $mysql_db_connection[2], $to_db);		$this->con2 = $con;				// SKU ITEMS PRICE/COST        $this->archive_SKU_COST_SELLING($con);                // membership        $this->archive_MEMBERSHIP($con);                // connect back to armshq        unset($con);		$con = connect_db($db_default_connection[0], $db_default_connection[1], $db_default_connection[2], $db_default_connection[3]);				// delete data		$this->delete_data();				// delete invalid sb table		$this->delete_INVALID_STOCK_BAL_TABLE();		        $endtime = microtime(true);        print "\n\nTotal ".$this->total['total']['total']." data found. ".($endtime-$starttime)." seconds used.";        print "\nAll Done! :)\n";	}		private function check_table_exists($chk_tbl){		$con = $this->con2;		if(!$con){			global $con;		}					$got_tbl = $con->sql_query("explain $chk_tbl",false,false);		$con->sql_freeresult($got_tbl);				return ($got_tbl ? "$chk_tbl already exists." : false);	}		private function archive_table($select_sql, $tbl_name){		global $to_db;				$con = $this->con2;		if($con->dbname != $to_db){			die('invalid connection!');		}		if($this->is_archive){			print ": Archiving ".strtoupper($tbl_name)."...";			$archive_tbl = $this->archive_prefix."_".$tbl_name;			if(!$this->check_table_exists($archive_tbl)){	// table not exists				$con->sql_query("create table $archive_tbl like ".FROM_DB.".".$tbl_name);			}			$con->sql_query("replace into $archive_tbl ($select_sql)");			print " - Done.";		}	}		private function archive_PO(){		print "Checking PO...";		$con = $this->con2;				// PO        $sql = "select po.* from ".FROM_DB.".po where po_date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$this->total['po']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				$con->sql_freeresult($q1);		print "\rPO have $row_count rows.";				if($this->is_archive){			$this->archive_table($sql, 'po');		}				// po_items		print "\nChecking PO_ITEMS...";				$sql = "select pi.* 		from ".FROM_DB.".po_items pi		left join ".FROM_DB.".po on po.branch_id=pi.branch_id and po.id=pi.po_id		where po.po_date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPO_ITEMS have $row_count rows.";				$this->total['po_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'po_items');		}				if($this->is_archive){			$this->delete_query['po'] = "delete po,pi			from po			left join po_items pi on po.id=pi.po_id and po.branch_id=pi.branch_id			where po.po_date<".ms($this->cutoff_date);		}	}		private function archive_DO(){				$con = $this->con2;				// DO		print "\nChecking DO...";		        $sql = "select do.* from ".FROM_DB.".do where do_date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rDO have $row_count rows.";				$this->total['do']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'do');		}				// do_items		print "\nChecking DO_ITEMS...";		$sql = "select di.* 		from ".FROM_DB.".do_items di		left join ".FROM_DB.".do on do.branch_id=di.branch_id and do.id=di.do_id		where do.do_date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		print "\rDO_ITEMS have $row_count rows.";				$con->sql_freeresult($q1);				$this->total['do_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'do_items');		}				// do_open_items		print "\nChecking DO_OPEN_ITEMS...";				$sql = "select di.* 			from ".FROM_DB.".do_open_items di			left join ".FROM_DB.".do on do.id=di.do_id and do.branch_id=di.branch_id			where do.do_date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		print "\rDO_OPEN_ITEMS have $row_count rows.";		$con->sql_freeresult($q1);				$this->total['do_open_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'do_open_items');		}				if($this->is_archive){			$this->delete_query['do'] = "delete do,di,doi			from do			left join do_items di on do.branch_id=di.branch_id and do.id=di.do_id			left join do_open_items doi on do.branch_id=doi.branch_id and do.id=doi.do_id			where do.do_date<".ms($this->cutoff_date);		}				// do_request_items		print "\nChecking DO_REQUEST_ITEMS...";				$sql = "select dri.*		from ".FROM_DB.".do_request_items dri		where dri.last_update<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		print "\rDO_REQUEST_ITEMS have $row_count rows.";		$con->sql_freeresult($q1);				$this->total['do_request_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'do_request_items');		}				if($this->is_archive){			$this->delete_query['do_request_items'] = "delete 			from do_request_items			where last_update<".ms($this->cutoff_date);		}	}		private function archive_ADJ($con){				// adjustment		print "\nChecking ADJUSTMENT...";		        $sql = "select adj.* from ".FROM_DB.".adjustment adj where adj.adjustment_date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rADJUSTMENT have $row_count rows.";				$this->total['adj']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'adjustment');		}				// adjustment items		print "\nChecking ADJUSTMENT_ITEMS...";		$sql = "select adji.* 		from ".FROM_DB.".adjustment_items adji		left join ".FROM_DB.".adjustment adj on adj.branch_id=adji.branch_id and adj.id=adji.adjustment_id		where adj.adjustment_date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		print "\rADJUSTMENT_ITEMS have $row_count rows.";				$con->sql_freeresult($q1);				$this->total['adj_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'adjustment_items');		}				if($this->is_archive){			$this->delete_query['adj'] = "delete adj,adji			from adjustment adj			left join adjustment_items adji on adj.branch_id=adji.branch_id and adj.id=adji.adjustment_id			where adj.adjustment_date<".ms($this->cutoff_date);		}	}		private function archive_GRN($con){		// GRR		print "\nChecking GRR...";		        $sql = "select grr.* from ".FROM_DB.".grr where grr.rcv_date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rGRR have $row_count rows.";				$this->total['grr']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'grr');		}				// GRR_ITEMS		print "\nChecking GRR_ITEMS...";		$sql = "select gi.* 		from ".FROM_DB.".grr_items gi		left join ".FROM_DB.".grr on grr.id=gi.grr_id and grr.branch_id=gi.branch_id		where grr.rcv_date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rGRR_ITEMS have $row_count rows.";				$this->total['grr_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'grr_items');		}		// GRN		print "\nChecking GRN...";		$sql = "select grn.* 		from ".FROM_DB.".grn		left join ".FROM_DB.".grr on grr.id=grn.grr_id and grr.branch_id=grn.branch_id		where grr.rcv_date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rGRN have $row_count rows.";				$this->total['grn']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'grn');		}		// GRN_ITEMS		print "\nChecking GRN_ITEMS...";		$sql = "select gri.* 			from ".FROM_DB.".grn_items gri			left join ".FROM_DB.".grn on grn.id=gri.grn_id and grn.branch_id=gri.branch_id			left join ".FROM_DB.".grr on grr.id=grn.grr_id and grr.branch_id=grn.branch_id			where grr.rcv_date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rGRN_ITEMS have $row_count rows.";				$this->total['grn_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'grn_items');		}				if($this->is_archive){			$this->delete_query['grn'] = "delete grr,gi,grn,gri			from grr 			left join grr_items gi on grr.id=gi.grr_id and grr.branch_id=gi.branch_id			left join grn on grr.id=grn.grr_id and grr.branch_id=grn.branch_id			left join grn_items gri on grn.id=gri.grn_id and grn.branch_id=gri.branch_id			where grr.rcv_date<".ms($this->cutoff_date);		}	}		private function archive_GRA($con){		// GRA		print "\nChecking GRA...";		        $sql = "select gra.* from ".FROM_DB.".gra where gra.return_timestamp<".ms($this->cutoff_date)." and gra.return_timestamp>0";        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rGRA have $row_count rows.";				$this->total['gra']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'gra');		}				// GRA_ITEMS		print "\nChecking GRA_ITEMS...";		$sql = "select gi.* 			from ".FROM_DB.".gra_items gi			left join ".FROM_DB.".gra on gra.id=gi.gra_id and gra.branch_id=gi.branch_id			where gra.return_timestamp<".ms($this->cutoff_date)." and gra.return_timestamp>0";		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rGRA_ITEMS have $row_count rows.";				$this->total['gra_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'gra_items');		}				if($this->is_archive){			$this->delete_query['gra'] = "delete gra,gi			from gra			left join gra_items gi on gra.id=gi.gra_id and gra.branch_id=gi.branch_id			where gra.return_timestamp<".ms($this->cutoff_date)." and gra.return_timestamp>0";		}	}		private function archive_POS($con){		// POS		print "\nChecking POS...";		        $sql = "select pos.* from ".FROM_DB.".pos where pos.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS have $row_count rows.";				$this->total['pos']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos');			$this->delete_query['pos'] = "delete 			from pos			where pos.date<".ms($this->cutoff_date);		}				// POS_ITEMS		print "\nChecking POS_ITEMS...";		$sql = "select pi.* from ".FROM_DB.".pos_items pi where pi.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_ITEMS have $row_count rows.";				$this->total['pos_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_items');			$this->delete_query['pos_items'] = "delete 			from pos_items			where date<".ms($this->cutoff_date);		}				// POS_CASH_DOMINATION		print "\nChecking POS_CASH_DOMINATION...";		$sql = "select pcd.* from ".FROM_DB.".pos_cash_domination pcd where pcd.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_CASH_DOMINATION have $row_count rows.";				$this->total['pos_cash_domination']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_cash_domination');			$this->delete_query['pos_cash_domination'] = "delete 			from pos_cash_domination			where date<".ms($this->cutoff_date);		}				// POS_CASH_HISTORY		print "\nChecking POS_CASH_HISTORY";		$sql = "select pch.* from ".FROM_DB.".pos_cash_history pch where pch.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_CASH_HISTORY have $row_count rows.";				$this->total['pos_cash_history']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_cash_history');			$this->delete_query['pos_cash_history'] = "delete 			from pos_cash_history			where date<".ms($this->cutoff_date);		}				// POS_COUNTER_COLLECTION		print "\nChecking POS_COUNTER_COLLECTION...";		$sql = "select pcc.* from ".FROM_DB.".pos_counter_collection pcc where pcc.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_COUNTER_COLLECTION have $row_count rows.";				$this->total['pos_counter_collection']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_counter_collection');			$this->delete_query['pos_counter_collection'] = "delete 			from pos_counter_collection			where date<".ms($this->cutoff_date);		}				// POS_COUNTER_COLLECTION_TRACKING		print "\nChecking POS_COUNTER_COLLECTION_TRACKING...";		$sql = "select pcct.* from ".FROM_DB.".pos_counter_collection_tracking pcct where pcct.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_COUNTER_COLLECTION_TRACKING have $row_count rows.";				$this->total['pos_counter_collection_tracking']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_counter_collection_tracking');			$this->delete_query['pos_counter_collection_tracking'] = "delete 			from pos_counter_collection_tracking			where date<".ms($this->cutoff_date);		}				// POS_DRAWER		print "\nChecking POS_DRAWER...";		$sql = "select pd.* from ".FROM_DB.".pos_drawer pd where pd.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_DRAWER have $row_count rows.";				$this->total['pos_drawer']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_drawer');			$this->delete_query['pos_drawer'] = "delete 			from pos_drawer			where date<".ms($this->cutoff_date);		}				// POS_FINALIZED		print "\nChecking POS_FINALIZED...";		$sql = "select pf.* from ".FROM_DB.".pos_finalized pf where pf.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_FINALIZED have $row_count rows.";				$this->total['pos_finalized']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_finalized');			$this->delete_query['pos_finalized'] = "delete 			from pos_finalized			where date<".ms($this->cutoff_date);		}		// POS_GOODS_RETURN		print "\nChecking POS_GOODS_RETURN...";		$sql = "select pgr.* from ".FROM_DB.".pos_goods_return pgr where pgr.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_GOODS_RETURN have $row_count rows.";				$this->total['pos_goods_return']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_goods_return');			$this->delete_query['pos_goods_return'] = "delete 			from pos_goods_return			where date<".ms($this->cutoff_date);		}		// POS_PAYMENT		print "\nChecking POS_PAYMENT...";		$sql = "select pp.* from ".FROM_DB.".pos_payment pp where pp.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_PAYMENT have $row_count rows.";				$this->total['pos_payment']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_payment');			$this->delete_query['pos_payment'] = "delete 			from pos_payment			where date<".ms($this->cutoff_date);		}		// POS_RECEIPT_CANCEL		print "\nChecking POS_RECEIPT_CANCEL...";		$sql = "select prc.* from ".FROM_DB.".pos_receipt_cancel prc where prc.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPOS_RECEIPT_CANCEL have $row_count rows.";				$this->total['pos_receipt_cancel']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pos_receipt_cancel');			$this->delete_query['pos_receipt_cancel'] = "delete 			from pos_receipt_cancel			where date<".ms($this->cutoff_date);		}	}		private function archive_LOG($con){		// POS_RECEIPT_CANCEL		print "\nChecking LOG...";		$sql = "select log.* from ".FROM_DB.".log where log.timestamp<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rLOG have $row_count rows.";				$this->total['log']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'log');			$this->delete_query['log'] = "delete 			from log			where timestamp<".ms($this->cutoff_date);		}	}		private function archive_LOGIN_TICKETS($con){		// LOGIN_TICKETS		print "\nChecking LOGIN_TICKETS...";		$sql = "select lt.* from ".FROM_DB.".login_tickets lt where lt.last_update<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rLOGIN_TICKETS have $row_count rows.";				$this->total['login_tickets']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'login_tickets');			$this->delete_query['login_tickets'] = "delete 			from login_tickets			where last_update<".ms($this->cutoff_date);		}	}		private function archive_PICKING_LIST($con){		// PICKING_LIST		print "\nChecking PICKING_LIST...";		$sql = "select pl.* from ".FROM_DB.".picking_list pl where pl.last_update<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPICKING_LIST have $row_count rows.";				$this->total['picking_list']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'picking_list');			$this->delete_query['picking_list'] = "delete 			from picking_list			where last_update<".ms($this->cutoff_date);		}	}		private function archive_PM($con){		// PM		print "\nChecking PM...";		$sql = "select pm.* from ".FROM_DB.".pm where pm.timestamp<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPM have $row_count rows.";				$this->total['pm']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'pm');			$this->delete_query['pm'] = "delete 			from pm			where timestamp<".ms($this->cutoff_date);		}	}		private function archive_PROMOTION($con){		// PROMOTION		print "\nChecking PROMOTION...";		$sql = "select p.* from ".FROM_DB.".promotion p where p.date_to<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPROMOTION have $row_count rows.";				$this->total['promotion']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'promotion');		}				// PROMOTION_ITEMS		print "\nChecking PROMOTION_ITEMS...";		$sql = "select pi.* 			from ".FROM_DB.".promotion_items pi			left join ".FROM_DB.".promotion p on p.id=pi.promo_id and p.branch_id=pi.branch_id			where p.date_to<".ms($cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPROMOTION_ITEMS have $row_count rows.";				$this->total['promotion_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'promotion_items');		}				// PROMOTION_MIX_N_MATCH_ITEMS		print "\nChecking PROMOTION_MIX_N_MATCH_ITEMS...";		$sql = "select pi.* 			from ".FROM_DB.".promotion_mix_n_match_items pi			left join ".FROM_DB.".promotion p on p.id=pi.promo_id and p.branch_id=pi.branch_id			where p.date_to<".ms($cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rPROMOTION_MIX_N_MATCH_ITEMS have $row_count rows.";				$this->total['promotion_mix_n_match_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'promotion_mix_n_match_items');		}				if($this->is_archive){			$this->delete_query['promotion'] = "delete p,pi,pmi			from promotion p			left join promotion_items pi on p.id=pi.promo_id and p.branch_id=pi.branch_id			left join promotion_mix_n_match_items pmi on p.id=pmi.promo_id and p.branch_id=pmi.branch_id			where p.date_to<".ms($this->cutoff_date);		}	}		private function archive_SKU_COST_SELLING($con){		// SKU_ITEMS_PRICE_HISTORY		print "\nChecking SKU_ITEMS_PRICE_HISTORY...";		$sql = "select siph.* from ".FROM_DB.".sku_items_price_history siph where siph.added<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rSKU_ITEMS_PRICE_HISTORY have $row_count rows.";				$this->total['sku_items_price_history']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'sku_items_price_history');			$this->delete_query['sku_items_price_history'] = "delete 			from sku_items_price_history			where source<>".ms($this->source_label)." and added<".ms($this->cutoff_date);		}		        // SKU_ITEMS_QPRICE_HISTORY        print "\nChecking SKU_ITEMS_QPRICE_HISTORY...";        $sql = "select siqph.* from ".FROM_DB.".sku_items_qprice_history siqph where siqph.added<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rSKU_ITEMS_QPRICE_HISTORY have $row_count rows.";				$this->total['sku_items_qprice_history']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'sku_items_qprice_history');			$this->delete_query['sku_items_qprice_history'] = "delete 			from sku_items_qprice_history			where added<".ms($this->cutoff_date);		}        // SKU_ITEMS_MPRICE_HISTORY        //if($config['sku_multiple_selling_price']){        	print "\nChecking SKU_ITEMS_MPRICE_HISTORY...";        	$sql = "select simph.* from ".FROM_DB.".sku_items_mprice_history simph where simph.added<".ms($this->cutoff_date);	        $q1 = $con->sql_query($sql);			$row_count = $con->sql_numrows($q1);			$con->sql_freeresult($q1);			print "\rSKU_ITEMS_MPRICE_HISTORY have $row_count rows.";						$this->total['sku_items_mprice_history']['total'] += $row_count;			$this->total['total']['total'] += $row_count;						if($this->is_archive){				$this->archive_table($sql, 'sku_items_mprice_history');				$this->delete_query['sku_items_mprice_history'] = "delete 			from sku_items_mprice_history			where added<".ms($this->cutoff_date);			}		//}				// SKU_ITEMS_COST_HISTORY		print "\nChecking SKU_ITEMS_COST_HISTORY...";		$sql = "select sich.* from ".FROM_DB.".sku_items_cost_history sich where sich.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rSKU_ITEMS_COST_HISTORY have $row_count rows.";				$this->total['sku_items_cost_history']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'sku_items_cost_history');			$this->delete_query['sku_items_cost_history'] = "delete 			from sku_items_cost_history			where source<>".ms($this->source_label)." and date<".ms($this->cutoff_date);		}	}		private function archive_STOCK_TAKE($con){		// STOCK_CHECK		print "\nChecking STOCK_CHECK...";		$sql = "select sc.* from ".FROM_DB.".stock_check sc where sc.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rSTOCK_CHECK have $row_count rows.";				$this->total['stock_check']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'stock_check');			$this->delete_query['stock_check'] = "delete 			from stock_check			where scanned_by<>'WSATP' and location<>".ms($this->source_label)." and date<".ms($this->cutoff_date);		}        // STOCK_TAKE_PRE        print "\nChecking STOCK_TAKE_PRE...";		$sql = "select stp.* from ".FROM_DB.".stock_take_pre stp where stp.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rSTOCK_TAKE_PRE have $row_count rows.";				$this->total['stock_take_pre']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'stock_take_pre');			$this->delete_query['stock_take_pre'] = "delete 			from stock_take_pre			where date<".ms($this->cutoff_date);		}	}		private function archive_SALES_ORDER($con){		// SALES_ORDER		print "\nChecking SALES_ORDER...";		$sql = "select so.* from ".FROM_DB.".sales_order so where so.order_date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rSALES_ORDER have $row_count rows.";				$this->total['sales_order']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'sales_order');		}		// SALES_ORDER_ITEMS		print "\nChecking SALES_ORDER_ITEMS...";		$sql = "select soi.* 		from ".FROM_DB.".sales_order_items soi		left join ".FROM_DB.".sales_order so on so.id=soi.sales_order_id and so.branch_id=soi.branch_id		where so.order_date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rSALES_ORDER_ITEMS have $row_count rows.";				$this->total['sales_order_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'sales_order_items');		}				if($this->is_archive){			$this->delete_query['sales_order'] = "delete so,soi			from sales_order so			left join sales_order_items soi on so.id=soi.sales_order_id and so.branch_id=soi.branch_id			where so.order_date<".ms($this->cutoff_date);		}	}		private function archive_CI_CN_DN($con){		// CI		print "\nChecking CI...";		$sql = "select ci.* from ".FROM_DB.".ci where ci.ci_date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rCI have $row_count rows.";				$this->total['ci']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'ci');		}				// CI_ITEMS		print "\nChecking CI_ITEMS...";		$sql = "select cii.* 		from ".FROM_DB.".ci_items cii		left join ".FROM_DB.".ci on ci.id=cii.ci_id and ci.branch_id=cii.branch_id		where ci.ci_date<".ms($this->cutoff_date);		        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rCI_ITEMS have $row_count rows.";				$this->total['ci_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'ci_items');		}				if($this->is_archive){			$this->delete_query['ci'] = "delete ci,cii			from ci			left join ci_items cii on ci.id=cii.ci_id and ci.branch_id=cii.branch_id			where ci.ci_date<".ms($this->cutoff_date);		}		// CN		print "\nChecking CN...";		$sql = "select cn.* from ".FROM_DB.".cn where cn.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rCN have $row_count rows.";				$this->total['cn']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'cn');		}		// CN_ITEMS		print "\nChecking CN_ITEMS...";		$sql = "select cni.* 		from ".FROM_DB.".cn_items cni		left join ".FROM_DB.".cn on cn.id=cni.cn_id and cn.branch_id=cni.branch_id		where cn.date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rCN_ITEMS have $row_count rows.";				$this->total['cn_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'cn_items');		}				if($this->is_archive){			$this->delete_query['cn'] = "delete cn,cni			from cn			left join cn_items cni on cn.id=cni.cn_id and cn.branch_id=cni.branch_id			where cn.date<".ms($this->cutoff_date);		}		// DN		print "\nChecking DN...";		$sql = "select dn.* from ".FROM_DB.".dn where dn.date<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rDN have $row_count rows.";				$this->total['dn']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'dn');		}				// DN_ITEMS		print "\nChecking DN_ITEMS...";		$sql = "select dni.* 		from ".FROM_DB.".dn_items dni		left join ".FROM_DB.".dn on dn.id=dni.dn_id and dn.branch_id=dni.branch_id		where dn.date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rDN_ITEMS have $row_count rows.";				$this->total['dn_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'dn_items');		}				if($this->is_archive){			$this->delete_query['dn'] = "delete dn,dni			from dn			left join dn_items dni on dn.id=dni.dn_id and dn.branch_id=dni.branch_id			where dn.date<".ms($this->cutoff_date);		}	}		private function archive_CON_MONTHLY_REPORT($con){		// CONSIGNMENT_REPORT		print "\nChecking CONSIGNMENT_REPORT...";		$sql = "select cr.* from ".FROM_DB.".consignment_report cr where ((cr.year<$this->cutoff_y) or (cr.year=$this->cutoff_y and cr.month<=$this->cutoff_m))";        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rCONSIGNMENT_REPORT have $row_count rows.";				$this->total['consignment_report']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'consignment_report');			$this->delete_query['consignment_report'] = "delete 			from consignment_report			where ((year<$this->cutoff_y) or (year=$this->cutoff_y and month<=$this->cutoff_m))";		}				// CONSIGNMENT_REPORT_PAGE_INFO		print "\nChecking CONSIGNMENT_REPORT_PAGE_INFO...";		$sql = "select crpi.* from ".FROM_DB.".consignment_report_page_info crpi where ((crpi.year<$this->cutoff_y) or (crpi.year=$this->cutoff_y and crpi.month<=$this->cutoff_m))";        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rCONSIGNMENT_REPORT_PAGE_INFO have $row_count rows.";				$this->total['consignment_report_page_info']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'consignment_report_page_info');			$this->delete_query['consignment_report_page_info'] = "delete 			from consignment_report_page_info			where ((year<$this->cutoff_y) or (year=$this->cutoff_y and month<=$this->cutoff_m))";		}		// CONSIGNMENT_REPORT_SKU		print "\nChecking CONSIGNMENT_REPORT_SKU...";		$sql = "select crs.* from ".FROM_DB.".consignment_report_sku crs where ((crs.year<$this->cutoff_y) or (crs.year=$this->cutoff_y and crs.month<=$this->cutoff_m))";        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rCONSIGNMENT_REPORT_SKU have $row_count rows.";				$this->total['consignment_report_sku']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'consignment_report_sku');			$this->delete_query['consignment_report_sku'] = "delete 			from consignment_report_sku			where ((year<$this->cutoff_y) or (year=$this->cutoff_y and month<=$this->cutoff_m))";		}				// MONTHLY_REPORT_LIST		print "\nChecking MONTHLY_REPORT_LIST...";		$sql = "select m.* from ".FROM_DB.".monthly_report_list m where ((m.year<$this->cutoff_y) or (m.year=$this->cutoff_y and m.month<=$this->cutoff_m))";        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rMONTHLY_REPORT_LIST have $row_count rows.";				$this->total['monthly_report_list']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'monthly_report_list');			$this->delete_query['monthly_report_list'] = "delete 			from monthly_report_list			where ((year<$this->cutoff_y) or (year=$this->cutoff_y and month<=$this->cutoff_m))";		}	}		private function archive_MEMBERSHIP($con){		// MEMBERSHIP_DRAWER_HISTORY		print "\nChecking MEMBERSHIP_DRAWER_HISTORY";		$sql = "select m.* from ".FROM_DB.".membership_drawer_history m where m.timestamp<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rMEMBERSHIP_DRAWER_HISTORY have $row_count rows.";				$this->total['membership_drawer_history']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'membership_drawer_history');			$this->delete_query['membership_drawer_history'] = "delete 			from membership_drawer_history			where timestamp<".ms($this->cutoff_date);		}				// MEMBERSHIP_RECEIPT		print "\nChecking MEMBERSHIP_RECEIPT";		$sql = "select m.* from ".FROM_DB.".membership_receipt m where m.timestamp<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rMEMBERSHIP_RECEIPT have $row_count rows.";				$this->total['membership_receipt']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'membership_receipt');		}				// MEMBERSHIP_RECEIPT_ITEMS		print "\nChecking MEMBERSHIP_RECEIPT_ITEMS";		$sql = "select mi.* 		from ".FROM_DB.".membership_receipt_items mi		left join ".FROM_DB.".membership_receipt m on m.branch_id=mi.branch_id and m.counter_id=mi.counter_id and m.id=mi.receipt_id 		where m.timestamp<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rMEMBERSHIP_RECEIPT_ITEMS have $row_count rows.";				$this->total['membership_receipt_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'membership_receipt_items');		}				if($this->is_archive){			$this->delete_query['membership_receipt_items'] = "delete m,mi			from membership_receipt m			left join membership_receipt_items mi on m.branch_id=mi.branch_id and m.counter_id=mi.counter_id and m.id=mi.receipt_id 			where m.timestamp<".ms($this->cutoff_date);		}				// MEMBERSHIP_PROMOTION_ITEMS		print "\nChecking MEMBERSHIP_PROMOTION_ITEMS";		$sql = "select m.* from ".FROM_DB.".membership_promotion_items m where m.date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rMEMBERSHIP_PROMOTION_ITEMS have $row_count rows.";				$this->total['membership_promotion_items']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'membership_promotion_items');			$this->delete_query['membership_promotion_items'] = "delete 			from membership_promotion_items			where date<".ms($this->cutoff_date);		}				// MEMBERSHIP_POINTS		print "\nChecking MEMBERSHIP_POINTS";		$sql = "select m.* from ".FROM_DB.".membership_points m where m.date<".ms($this->cutoff_date);		$q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rMEMBERSHIP_POINTS have $row_count rows.";				$this->total['membership_points']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'membership_points');			$this->delete_query['membership_points'] = "delete 			from membership_points			where date<".ms($this->cutoff_date);		}	}		private function archive_CACHE($con){		print "\nChecking CACHE...";		$tbl_list = array();		$q1 = $con->sql_query("show tables from ".FROM_DB);		while($r = $con->sql_fetchrow($q1)){			$tbl_list[] = $r[0];		}		$con->sql_freeresult($q1);				// SKU_ITEMS_SALES_CACHE		print "\nChecking SKU_ITEMS_SALES_CACHE...";		foreach($tbl_list as $tbl){			if(strpos($tbl, 'sku_items_sales_cache_')!==false){				$sql = "select sc.*				from ".FROM_DB.".$tbl sc				where date<".ms($this->cutoff_date);				$q1 = $con->sql_query($sql);				$row_count = $con->sql_numrows($q1);				$con->sql_freeresult($q1);				print "\n$tbl have $row_count rows.";								$this->total['sku_items_sales_cache']['total'] += $row_count;				$this->total['total']['total'] += $row_count;								if($this->is_archive){					$this->archive_table($sql, $tbl);					$this->delete_query[$tbl] = "delete 					from $tbl					where date<".ms($this->cutoff_date);				}			}		}				// CATEGORY_SALES_CACHE		print "\nChecking CATEGORY_SALES_CACHE...";		foreach($tbl_list as $tbl){			if(strpos($tbl, 'category_sales_cache_')!==false){				$sql = "select sc.*				from ".FROM_DB.".$tbl sc				where date<".ms($this->cutoff_date);				$q1 = $con->sql_query($sql);				$row_count = $con->sql_numrows($q1);				$con->sql_freeresult($q1);				print "\n$tbl have $row_count rows.";								$this->total['category_sales_cache']['total'] += $row_count;				$this->total['total']['total'] += $row_count;								if($this->is_archive){					$this->archive_table($sql, $tbl);					$this->delete_query[$tbl] = "delete 					from $tbl					where date<".ms($this->cutoff_date);				}			}		}				// DEPT_TRANS_CACHE		print "\nChecking DEPT_TRANS_CACHE...";		foreach($tbl_list as $tbl){			if(strpos($tbl, 'dept_trans_cache_')!==false){				$sql = "select sc.*				from ".FROM_DB.".$tbl sc				where date<".ms($this->cutoff_date);				$q1 = $con->sql_query($sql);				$row_count = $con->sql_numrows($q1);				$con->sql_freeresult($q1);				print "\n$tbl have $row_count rows.";								$this->total['dept_trans_cache']['total'] += $row_count;				$this->total['total']['total'] += $row_count;								if($this->is_archive){					$this->archive_table($sql, $tbl);					$this->delete_query[$tbl] = "delete 					from $tbl					where date<".ms($this->cutoff_date);				}			}		}				// MEMBER_SALES_CACHE		print "\nChecking MEMBER_SALES_CACHE...";		foreach($tbl_list as $tbl){			if(strpos($tbl, 'member_sales_cache_')!==false){				$sql = "select sc.*				from ".FROM_DB.".$tbl sc				where date<".ms($this->cutoff_date);				$q1 = $con->sql_query($sql);				$row_count = $con->sql_numrows($q1);				$con->sql_freeresult($q1);				print "\n$tbl have $row_count rows.";								$this->total['member_sales_cache']['total'] += $row_count;				$this->total['total']['total'] += $row_count;								if($this->is_archive){					$this->archive_table($sql, $tbl);					$this->delete_query[$tbl] = "delete 					from $tbl					where date<".ms($this->cutoff_date);				}			}		}				// PWP_SALES_CACHE		print "\nChecking PWP_SALES_CACHE...";		foreach($tbl_list as $tbl){			if(strpos($tbl, 'pwp_sales_cache_')!==false){				$sql = "select sc.*				from ".FROM_DB.".$tbl sc				where date<".ms($this->cutoff_date);				$q1 = $con->sql_query($sql);				$row_count = $con->sql_numrows($q1);				$con->sql_freeresult($q1);				print "\n$tbl have $row_count rows.";								$this->total['pwp_sales_cache']['total'] += $row_count;				$this->total['total']['total'] += $row_count;								if($this->is_archive){					$this->archive_table($sql, $tbl);					$this->delete_query[$tbl] = "delete 					from $tbl					where date<".ms($this->cutoff_date);				}			}		}	}		private function archive_OTHERS($con){		// SHIFT_RECORD		print "\nChecking SHIFT_RECORD...";		$sql = "select sf.* from ".FROM_DB.".shift_record sf where ((sf.year<$this->cutoff_y) or (sf.year=$this->cutoff_y and sf.month<=$this->cutoff_m))";        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rSHIFT_RECORD have $row_count rows.";				$this->total['shift_record']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'shift_record');			$this->delete_query['shift_record'] = "delete 			from shift_record			where ((year<$this->cutoff_y) or (year=$this->cutoff_y and month<=$this->cutoff_m))";		}				// VENDOR_SKU_HISTORY		print "\nChecking VENDOR_SKU_HISTORY...";		$sql = "select vsh.* from ".FROM_DB.".vendor_sku_history vsh where vsh.added<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rVENDOR_SKU_HISTORY have $row_count rows.";				$this->total['vendor_sku_history']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'vendor_sku_history');			$this->delete_query['vendor_sku_history'] = "delete 			from vendor_sku_history			where added<".ms($this->cutoff_date);		}		        // VOUCHER        /*print "\nChecking VOUCHER...";		$sql = "select v.* from ".FROM_DB.".voucher v where v.last_update<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rVOUCHER have $row_count rows.";				$this->total['voucher']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'voucher');			$this->delete_query['voucher'] = "delete 			from voucher			where last_update<".ms($this->cutoff_date);		}        // VOUCHER_DAMAGE_CHEQUE        print "\nChecking VOUCHER_DAMAGE_CHEQUE...";		$sql = "select v.* from ".FROM_DB.".voucher_damage_cheque v where v.added<".ms($this->cutoff_date);        $q1 = $con->sql_query($sql);		$row_count = $con->sql_numrows($q1);		$con->sql_freeresult($q1);		print "\rVOUCHER_DAMAGE_CHEQUE have $row_count rows.";				$this->total['voucher_damage_cheque']['total'] += $row_count;		$this->total['total']['total'] += $row_count;				if($this->is_archive){			$this->archive_table($sql, 'voucher_damage_cheque');			$this->delete_query['voucher_damage_cheque'] = "delete 			from voucher_damage_cheque			where added<".ms($this->cutoff_date);		}*/	}		private function mark_sku_history(){		global $con;				// SKU		print "\nMARK SKU_ITEMS HISTORY DATA...";				$q1 = $con->sql_query("select si.*, sku.default_trade_discount_code,if(sku.is_fresh_market='inherit', cc.is_fresh_market, sku.is_fresh_market) as is_fresh_market		from sku_items si		left join sku on sku.id=si.sku_id 		left join category_cache cc on cc.category_id=sku.category_id		order by si.id");		$row_count = $con->sql_numrows($q1);		print "\rSKU_ITEMS have $row_count rows.";		print "\nChecking selling price, cost and stock balance...";				$curr_row = 0;		print "\n";		while($si = $con->sql_fetchassoc($q1)){			$curr_row++;			print "\r$curr_row / $row_count";						$sid = mi($si['id']);						// loop all branches			foreach($this->branches as $bid=>$b){				$sb_tbl = 'stock_balance_b'.$bid.'_'.date("Y", strtotime($this->one_day_b4_cutoff));								// selling price				$sql = "select siph.* 				from sku_items_price_history siph 				where siph.branch_id=$bid and siph.sku_item_id=$sid and siph.added<".ms($this->cutoff_date)." order by siph.added desc limit 1";				$q2 = $con->sql_query($sql);				$siph = $con->sql_fetchassoc($q2);				$con->sql_freeresult($q2);												if($this->is_archive && $siph){					$upd = array();					$upd = $siph;					$upd['user_id'] = 1;					$upd['source'] = $this->source_label;					$upd['added'] = $this->one_day_b4_cutoff;					$con->sql_query("replace into sku_items_price_history ".mysql_insert_by_field($upd));				}								// cost price				$sql = "select sich.* 				from sku_items_cost_history sich 				where sich.branch_id=$bid and sich.sku_item_id=$sid and sich.date<".ms($this->cutoff_date)." order by sich.date desc limit 1";				$q3 = $con->sql_query($sql);				$sich = $con->sql_fetchassoc($q3);				$con->sql_freeresult($q3);								if($this->is_archive && $sich){					$upd = array();					$upd = $sich;					$upd['user_id'] = 1;					$upd['source'] = $this->source_label;					$upd['date'] = $this->one_day_b4_cutoff;					$con->sql_query("replace into sku_items_cost_history ".mysql_insert_by_field($upd));				}								// stock balance & stock check				$sb = array();				if($this->check_table_exists($sb_tbl)){					$sql = "select * from $sb_tbl where sku_item_id=$sid and ".ms($this->one_day_b4_cutoff)." between from_date and to_date limit 1";					$q4 = $con->sql_query($sql);					$sb = $con->sql_fetchassoc($q4);					$con->sql_freeresult($q4);				}												if($this->is_archive){					$upd = array();					$upd['date'] = $this->one_day_b4_cutoff;					$upd['branch_id'] = $bid;					$upd['sku_item_code'] = $si['sku_item_code'];					$upd['scanned_by'] = 'WSATP';					$upd['location'] = $this->source_label;					$upd['shelf_no'] = $upd['item_no'] = 1;					$upd['selling'] = $siph['price'] ? $siph['price'] : $si['selling_price'];					$upd['qty'] = $sb['qty'];					$upd['cost'] = $sich['grn_cost'] ? $sich['grn_cost'] : $si['cost_price'];					$upd['is_fresh_market'] = $si['is_fresh_market'] == 'yes' ? 1 : 0;					$con->sql_query("replace into stock_check ".mysql_insert_by_field($upd));				}			}		}		$con->sql_freeresult($q1);	}		private function mark_member_history(){		global $con;				print "\nMARK MEMBERSHIP POINT HISTORY...";				$q1 = $con->sql_query("select branch_id,nric,card_no,sum(points) as pfrom membership_pointswhere date<".ms($this->cutoff_date)."group by branch_id,nric,card_noorder by branch_id,nric,card_no");		$row_count = $con->sql_numrows($q1);		print "\rMEMBERSHIP_POINTS have $row_count rows.";		if($this->is_archive){			print ": Marking point history...";			while($r = $con->sql_fetchassoc($q1)){				$upd = array();				$upd['nric'] = $r['nric'];				$upd['card_no'] = $r['card_no'];				$upd['branch_id'] = $r['branch_id'];				$upd['date'] = $this->cutoff_date;				$upd['points'] = $r['p'];				$upd['remark'] = $this->source_label;				$upd['type'] = 'ADJUST';				$upd['user_id'] = 1;				$con->sql_query("replace into membership_points ".mysql_insert_by_field($upd));			}			print " - Done.";		}		$con->sql_freeresult($q1);		}		private function mark_vendor_sku_history(){		global $con;				print "\nMarking VENDOR_SKU_HISTORY...";		$q1 = $con->sql_query("select id from sku_items order by id");		$row_count = $con->sql_numrows($q1);		print "\nSKU_ITEMS have $row_count rows.";				$curr_row = 0;		print "\n";				while($si = $con->sql_fetchassoc($q1)){			$curr_row++;			print "\r$curr_row / $row_count";						$sid = mi($si['id']);						foreach($this->branches as $bid=>$b){				$q2 = $con->sql_query("select * from vendor_sku_history where branch_id=$bid and sku_item_id=$sid and added<".ms($this->cutoff_date)." order by added desc limit 1");				$vsh = $con->sql_fetchassoc($q2);				$con->sql_freeresult($q2);								if($vsh){					$vsh['added'] = $this->cutoff_date;					$con->sql_query("replace into vendor_sku_history ".mysql_insert_by_field($upd));				}			}					}		$con->sql_freeresult($q1);		print " - Done.";	}		private function delete_data(){		global $con;				// delete data		if(!$this->is_archive)	return;					print "\nStart Delete data...";		if(!$this->delete_query)	print "\nNo Data to delete.";				foreach($this->delete_query as $t=>$sql){			print "\nDeleting $t ...";			$con->sql_query($sql);			print " - Done";		}	}		private function delete_INVALID_STOCK_BAL_TABLE(){		global $con;				$q1 = $con->sql_query("show tables");		while($r = $con->sql_fetchrow($q1)){			if(strpos($r[0], 'stock_balance_b')!==false){			    list($dummy, $dummy2, $dummy3, $year) = explode("_", $r[0]);								if($year<2007){					print "\n".$r[0]." need drop.";					$con->sql_query("drop table $r[0]");				}			}		}	}		private function is_table_exists($tbl){		global $con;				$q_exists = $con->sql_query("explain $tbl",false,false);		$con->sql_freeresult($q_exists);				return $q_exists ? true : false;	}		private function restore_stock_balance(){		global $con, $cutoff_date, $archive_mode, $to_db, $mysql_db_connection, $force_continue, $db_default_connection;				$starttime = microtime(true);				$this->one_day_b4_cutoff = date("Y-m-d", strtotime("-1 day", strtotime($cutoff_date)));        $this->date_key = date("Ymd", strtotime($cutoff_date));        $this->cutoff_date = $cutoff_date;        		// find y,m for last month for those table only got year and month		$this->cutoff_y = mi(date("Y", strtotime($cutoff_date)));        $this->cutoff_m = mi(date("m", strtotime($cutoff_date)));        $this->cutoff_m--;        if($this->cutoff_m<1){            $this->cutoff_m = 12;            $this->cutoff_y --;		}			$archive_prefix = $this->archive_prefix = "archive_".$this->date_key;				// stock check table		$tbl = $to_db.".".$archive_prefix."_stock_check";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}				// GRN		$tbl = $to_db.".".$archive_prefix."_grr";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}		$tbl = $to_db.".".$archive_prefix."_grr_items";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}		$tbl = $to_db.".".$archive_prefix."_grn";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}		$tbl = $to_db.".".$archive_prefix."_grn_items";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}				// POS		foreach($this->branches as $bid=>$b){			$tbl = $to_db.".".$archive_prefix."_sku_items_sales_cache_b".$bid;			if(!$this->is_table_exists($tbl)){				die("$tbl not found.");			}		}				// GRA		$tbl = $to_db.".".$archive_prefix."_gra";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}		$tbl = $to_db.".".$archive_prefix."_gra_items";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}				// DO		$tbl = $to_db.".".$archive_prefix."_do";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}		$tbl = $to_db.".".$archive_prefix."_do_items";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}				// ADJ		$tbl = $to_db.".".$archive_prefix."_adjustment";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}		$tbl = $to_db.".".$archive_prefix."_adjustment_items";		if(!$this->is_table_exists($tbl)){			die("$tbl not found.");		}						foreach($this->branches as $bid=>$b){			$this->restore_branch_sb($bid);		}	}		private function restore_branch_sb($branch_id){		global $con, $cutoff_date, $archive_mode, $to_db, $mysql_db_connection, $force_continue, $db_default_connection, $config;				// archive table prefix		$archive_prefix =	$to_db.".".$this->archive_prefix;		print "Restoring Branch ID#$branch_id\n";				// check stock check table		$q_s = $con->sql_query("select si.*, sku.default_trade_discount_code,if(sku.is_fresh_market='inherit', cc.is_fresh_market, sku.is_fresh_market) as is_fresh_market		from sku_items si		left join sku on sku.id=si.sku_id 		left join category_cache cc on cc.category_id=sku.category_id		order by si.id");		$total_count = $con->sql_numrows($q_s);		$item_count = 0;		while($si = $con->sql_fetchassoc($q_s)){			$data = array();			$sid = mi($si['id']);			$sku_item_code = trim($si['sku_item_code']);			$item_count++;						print "\r$item_count / $total_count.......";						if(!$sid)	continue;						$cost = mf($si['cost_price']);			$master_cost = mf($si['cost_price']);				// check if already hv stock check			if($sku_item_code){				$q_got_chk = $con->sql_query("select * from ".$archive_prefix."_stock_check where branch_id=$branch_id and sku_item_code=".ms($sku_item_code)." and date=".ms($cutoff_date)." and scanned_by='WSATP' and location=".ms($this->source_label));				$tmp = $con->sql_fetchassoc($q_got_chk);				$con->sql_freeresult($q_got_chk);				if($tmp)	continue;	// already have stock check, no need regen			}						// grn			$sql = "select (if (grn_items.acc_ctn is null and grn_items.acc_pcs is null, grn_items.ctn *rcv_uom.fraction + grn_items.pcs, grn_items.acc_ctn *rcv_uom.fraction + grn_items.acc_pcs)) as qty,			(			  if (grn_items.acc_cost is null, grn_items.cost, grn_items.acc_cost)			  *			  if (grn_items.acc_ctn is null and grn_items.acc_pcs is null,			  	grn_items.ctn + grn_items.pcs / rcv_uom.fraction,			  	grn_items.acc_ctn + grn_items.acc_pcs / rcv_uom.fraction			  )			) as cost,				grr.rcv_date as dt,grr_items.type,do.do_type,do.branch_id as do_from_branch_id				from ".$archive_prefix."_grn_items grn_items				left join uom rcv_uom on grn_items.uom_id=rcv_uom.id				left join ".$archive_prefix."_grn grn on grn_id=grn.id and grn_items.branch_id=grn.branch_id				left join ".$archive_prefix."_grr grr on grn.grr_id = grr.id and grn.branch_id = grr.branch_id				left join ".$archive_prefix."_grr_items grr_items on grr_items.id=grn.grr_item_id and grr_items.branch_id=grn.branch_id				left join ".$archive_prefix."_do  do on do.do_no=grr_items.doc_no and grr_items.type='DO'				left join sku_items on grn_items.sku_item_id = sku_items.id				where grn_items.sku_item_id=$sid and grn_items.branch_id = $branch_id and grr.active=1 and grn.approved=1 and grn.status=1 and grn.active=1 and grr.rcv_date<".ms($cutoff_date);			$q_grn = $con->sql_query($sql);			while($r=$con->sql_fetchrow($q_grn))			{			    $data[$r['dt']]['grn'] += $r['qty'];			    $count_this_grn = false;				    if($r['type']!='DO'){		            $count_this_grn = true;				}else{  // document type = DO				    if(!$r['do_type']||!$r['do_from_branch_id'])  $count_this_grn = true; // DO from outside				    else{   // inter transfer DO		                if($config['grn_do_hq2branch_update_cost']&&$branch_id>1&&$r['do_from_branch_id']==1)   $count_this_grn = true;		                if($config['grn_do_branch2branch_update_cost']&&$branch_id>1&&$r['do_from_branch_id']>1)   $count_this_grn = true;		                if($config['grn_do_branch2hq_update_cost']&&$branch_id==1&&$r['do_from_branch_id']>1)   $count_this_grn = true;					}					}				    if($count_this_grn){			      	$data[$r['dt']]['grn_cost'] += $r['cost'];					$data[$r['dt']]['grn_qty_to_divide'] += $r['qty'];			      	$data[$r['dt']]['grn_cost_need_update'] = true;			    }			}			$con->sql_freeresult($q_grn);						// select last stock check			if($sku_item_code){				$q_chk = $con->sql_query("select sum(qty) as qty, sum(qty*cost) as cost, date 				from ".$archive_prefix."_stock_check 				where branch_id=$branch_id and sku_item_code=".ms($sku_item_code)." and date<".ms($cutoff_date)." and scanned_by<>'WSATP' and location<>".ms($this->source_label)." group by date order by date");				while($r=$con->sql_fetchrow($q_chk)){					$data[$r['date']]['stock_check'] = $r['qty'];					$data[$r['date']]['stock_check_cost'] = $r['cost'];				}				$con->sql_freeresult($q_chk);			}						// POS			$q_pos = $con->sql_query("select qty, date as dt 			from ".$archive_prefix."_sku_items_sales_cache_b$branch_id			where sku_item_id = $sid and date<".ms($cutoff_date));			while($r=$con->sql_fetchrow($q_pos)){				$data[$r['dt']]['pos'] = $r['qty'];			}			$con->sql_freeresult($q_pos);						// GRA			$q_gra = $con->sql_query("select sum(qty) as qty, date(return_timestamp) as dt 			from ".$archive_prefix."_gra_items gra_items			left join ".$archive_prefix."_gra gra on gra_id = gra.id and gra_items.branch_id = gra.branch_id 			left join sku_items on sku_item_id = sku_items.id 			where gra_items.sku_item_id=$sid and gra_items.branch_id = $branch_id and gra.status=0 and gra.returned=1 and gra.return_timestamp<".ms($cutoff_date)." group by dt");			while($r=$con->sql_fetchrow($q_gra)){				$data[$r['dt']]['gra'] = $r['qty'];			}			$con->sql_freeresult($q_gra);						//FROM DO			$q_do = $con->sql_query("select sum(do_items.ctn *uom.fraction + do_items.pcs) as qty, do.do_date as dt		from ".$archive_prefix."_do_items do_items		left join ".$archive_prefix."_do do on do.id=do_items.do_id and do.branch_id=do_items.branch_id		left join sku_items on sku_item_id = sku_items.id		left join uom on do_items.uom_id=uom.id		where do_items.sku_item_id=$sid and do_items.branch_id = $branch_id and do.approved=1 and do.checkout=1 and do.status<2 and do_date<".ms($cutoff_date)." group by dt");			while($r=$con->sql_fetchrow($q_do)){				$data[$r['dt']]['do'] = $r['qty'];			}			$con->sql_freeresult($q_do);						//FROM ADJUSTMENT			$q_adj = $con->sql_query("select sum(qty) as qty, adjustment_date as dt		from ".$archive_prefix."_adjustment_items adjustment_items		left join ".$archive_prefix."_adjustment adjustment on adjustment.id=adjustment_items.adjustment_id and adjustment.branch_id=adjustment_items.branch_id		left join sku_items on sku_item_id = sku_items.id		where adjustment_items.sku_item_id=$sid and adjustment_items.branch_id = $branch_id and adjustment.approved=1 and adjustment.status<2 and adjustment_date<".ms($cutoff_date)." group by dt");			while($r=$con->sql_fetchrow($q_adj))			{				$data[$r['dt']]['adj'] = $r['qty'];			}			$con->sql_freeresult($q_adj);						if($config['consignment_modules']){		        //FROM Credit Note				$q_cn = $con->sql_query("select sum(cn_items.ctn *uom.fraction + cn_items.pcs) as qty, cn.date as dt		from ".$archive_prefix."_cn_items cn_items		left join ".$archive_prefix."_cn cn on cn.id=cn_items.cn_id and cn.branch_id=cn_items.branch_id		left join sku_items on sku_item_id = sku_items.id		left join uom on cn_items.uom_id=uom.id		where cn_items.sku_item_id=$sid and cn.to_branch_id = $branch_id and cn.active=1 and cn.approved=1 and cn.status=1 and cn.date<".ms($cutoff_date)." group by dt");				while($r=$con->sql_fetchrow($q_cn))				{					$data[$r['dt']]['cn'] = $r['qty'];				}				$con->sql_freeresult($q_cn);					//FROM Debit Note				$q_dn = $con->sql_query("select sum(dn_items.ctn *uom.fraction + dn_items.pcs) as qty, dn.date as dt		from ".$archive_prefix."_dn_items dn_items		left join ".$archive_prefix."_dn dn on dn.id=dn_items.dn_id and dn.branch_id=dn_items.branch_id		left join sku_items on sku_item_id = sku_items.id		left join uom on dn_items.uom_id=uom.id		where dn_items.sku_item_id=$sid and dn.to_branch_id = $branch_id and dn.active=1 and dn.approved=1 and dn.status=1 and dn.date<".ms($cutoff_date)." group by dt");				while($r=$con->sql_fetchrow($q_dn))				{					$data[$r['dt']]['dn'] = $r['qty'];				}				$con->sql_freeresult($q_dn);			}					if(!$data)	continue;						ksort($data);			reset($data);					$qty = 0;						// loop data			foreach ($data as $d => $t){				// stock check				if (isset($t['stock_check'])){					if ($t['stock_check_cost']==0) $t['stock_check_cost']=$cost*$t['stock_check'];										if ($t['stock_check']>0){								$cost =  round($t['stock_check_cost'] / $t['stock_check'], 5);					}					$qty = $t['stock_check'];	// reset qty to stock check				}								// grn				if ($t['grn']){					if($config['consignment_modules']&&$branch_id>1){						// branch no need update cost if is consignment					}elseif($t['grn_cost_need_update']){					        	if($t['grn_qty_to_divide']){		                    if($t['grn_cost'])	$cost = round($t['grn_cost'] / $t['grn_qty_to_divide'],5);						}					}					$qty += $t['grn'];				}								if ($t['gra']) {					$qty -= $t['gra'];				}				if ($t['pos']) {					$qty -= $t['pos'];				}				if ($t['do']) {					$qty -= $t['do'];				}				if ($t['adj']) {					$qty += $t['adj'];				}				if ($t['cn']) {					$qty += $t['cn'];				}				if ($t['dn']) {					$qty -= $t['dn'];				}			}						// get selling price			$q_selling = $con->sql_query("select price 			from ".$archive_prefix."_sku_items_price_history siph			where siph.branch_id=$branch_id and siph.sku_item_id=$sid and siph.added<".ms($cutoff_date)." order by siph.added desc limit 1");			$siph = $con->sql_fetchassoc($q_selling);			$con->sql_freeresult($q_selling);						// finally get the qty and cost at cutoff date				$upd = array();			$upd['date'] = $this->one_day_b4_cutoff;			$upd['branch_id'] = $branch_id;			$upd['sku_item_code'] = $si['sku_item_code'];			$upd['scanned_by'] = 'WSATP';			$upd['location'] = $this->source_label;			$upd['shelf_no'] = $upd['item_no'] = 1;			$upd['selling'] = $siph['price'] ? $siph['price'] : $si['selling_price'];			$upd['qty'] = $qty;			$upd['cost'] = $cost;			$upd['is_fresh_market'] = $si['is_fresh_market'] == 'yes' ? 1 : 0;			$con->sql_query("replace into stock_check ".mysql_insert_by_field($upd));						$con->sql_query("update sku_items_cost set changed=1 where branch_id=$branch_id and sku_item_id=$sid");		}		$con->sql_freeresult($q_s);	}};$ARC_DATABASE = new ARC_DATABASE();$ARC_DATABASE->start();?>