<?php/*11/6/2007 5:49:58 PM gary- add grn_cost and average_cost column intO pos_transaction db.- update cost into pos_transaction.- added function to update the pos_transaction cost where the cost is null.12/12/2007 3:30:42 PM yinsee- if grn_cost is 0 (no grn before the date), use sku-item's cost_price12/21/2007 11:56:04 AM gary- fix the bug for table ambiguous (table sku_items and pos)1/11/2008 2:41:36 PM yinsee- cost * -1 when qty < 0 (return)3/3/2008 12:26:32 PM yinseereduce calculation on import and create sku_items_sales_cache3/31/2008 6:54:06 PM yinseefix bug - grn_cost * qty = item cache's cost 4/23/2008 12:48:14 PM yinsee- set cost_history changed=1 for items to be deleted5/26/2008 2:51:55 PM yinsee- set cost to zero if qty is zero12/31/2008 8:55:21 AM yinsee- repair bug :)1/6/2009 4:03:06 PM yinsee- update Multics import format, use mcode if have2/2/2009 6:35:35 PM yinsee- dont allow import if not finalized1/11/2010 12:05:15 PM Andy- Fix when import arms pos and data have error will cause sql die- Add update sku items changed even if import failed1/19/2010 10:49:04 AM Andy- Fix script dint use master cost if cost not found in cost history table3/24/2010 5:13:58 PM Andy- Add config to change consignment sku to use price after discount as cost4/12/2010 12:16:09 PM Andy- Fix a bugs when have invalid sku items, due to the item have no sku item id and cause sql die error4/27/2010 2:20:41 PM Andy- Fix a bugs when have invalid sku item id cause sql die error6/9/2010 10:00:23 AM Andy- Script retired.7/5/2011 1:30:17 PM Andy- Change split() to use explode()1/11/2012 4:14:32 PM Justin- Fixed the table missing fields "fresh_market_cost" and "last_grn_vendor_id".3/24/2014 5:56 PM Justin- Modified the wording from "Finalize" to "Finalise".*/// alter table pos_transaction add sku_item_id int default null, add index(sku_item_id), add sku_item int default null, add index(sku_id) << do this!/* dump SKU for ATP front-end */die("Script Retired");include("include/common.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if ($sessioninfo['level']<9999 && !privilege('POS_IMPORT')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'POS_IMPORT', BRANCH_CODE), "/index.php");set_time_limit(0);ini_set("memory_limit", "64M");ini_set("display_errors",1);if (isset($_REQUEST['a'])){	switch ($_REQUEST['a'])	{		case 'import_pos':		    import_pos();		    exit;		case 'export_point':		    export_points();		    exit;		case 'import_arms':		    import_arms_pos();		    print $msg;		    print "<br /><a href=\"$_SERVER[PHP_SELF]\">Continue</a>";		    exit;		    		default:			print "<h1>Unhandled Action</h1>";			print_r($_REQUEST);			exit;	}}show_form();exit;function export_points(){	global $con;	$dt = $_REQUEST['date'];	if (strtotime($dt)<=0) {		global $msg;		$msg = "Invalid date.";		return;	}	$bid = mi($_REQUEST['branch_id']);	if ($bid<=0) {		global $msg;		$msg = "Invalid Branch.";		return;	}	$rs=$con->sql_query("select sum(floor(pos.amount)), member_no, date_format(pos.date,'%d/%m/%Y') as dt from pos where pos.cancel_status=0 and pos.member_no <> '' and branch_id = $bid and pos.date = ".ms($dt)." group by member_no, dt");		if ($con->sql_numrows()<0)	{		global $msg;		$msg = 'No membership purchase on $dt';		return;	}//	ob_end_clean();	header("Content-type: text/plain");	header("Content-Disposition: attachment;filename=".str_replace("-","",$dt)."-B$bid");	print "@\n";	while($r=$con->sql_fetchrow($rs))	{	    printf("%s %05d %s @\n", $r[1], $r[0], $r[2]);	}	exit;}function import_arms_pos(){	global $con, $config;	$dt = $_REQUEST['date'];	if (strtotime($dt)<=0) {		global $msg;		$msg = "Invalid date.";		return;	}	$bid = mi($_REQUEST['branch_id']);	if ($bid<=0) {		global $msg;		$msg = "Invalid Branch.";		return;	}		$con->sql_query("select * from pos_counter_collection_tracking where finalized=1 and branch_id=$bid and date=".ms($dt));	if ($con->sql_numrows()<=0) {		global $msg;		$msg = "Sales on $dt is not yet finalised.";		return;	}	// v1 sql	/*$rs=$con->sql_query("select pos.pos_time, if(pos.race<>'',pos.race,left(membership.race,1)) as race, pos.member_no, sku_item_code, p.*, cs.network_name as counter_name,  if(p.trade_discount_code='',if(sp.trade_discount_code='',default_trade_discount_code,sp.trade_discount_code),p.trade_discount_code) as price_type, p.mprice_type,ifnull(sich2.grn_cost,sku_items.cost_price) as grn_cost,ifnull(sich2.avg_cost,sku_items.cost_price) as avg_cost	from		pos_items p left join pos on p.pos_id = pos.id and p.branch_id = pos.branch_id and p.counter_id = pos.counter_id and p.date = pos.date		left join sku_items_cost sc on p.branch_id = sc.branch_id and p.sku_item_id = sc.sku_item_id		left join sku_items_price sp on p.branch_id = sp.branch_id and p.sku_item_id = sp.sku_item_id		left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id		left join sku_items on p.sku_item_id = sku_items.id		left join sku on sku_id = sku.id		left join membership on member_no = card_no		left join sku_items_cost_history sich2 on sich2.sku_item_id=p.sku_item_id and sich2.branch_id=p.branch_id and sich2.date=(select max(date) from sku_items_cost_history sich where sich.branch_id=p.branch_id and sich.sku_item_id=p.sku_item_id and sich.date<=p.date)		where pos.cancel_status=0 and p.branch_id = $bid and p.date = ".ms($dt));*/				// v2 sql		/*$sql = "select pos.pos_time, if(pos.race<>'',pos.race,left(membership.race,1)) as race, pos.member_no, sku_item_code, p.*, cs.network_name as counter_name,  ifnull(p.trade_discount_code,if(siph2.price is null, default_trade_discount_code,siph2.trade_discount_code)) as price_type, p.mprice_type, ifnull(sich2.grn_cost,sku_items.cost_price) as grn_cost,ifnull(sich2.avg_cost,sku_items.cost_price) as avg_cost , sku.category_id,c.department_id,sku.brand_id,sku.vendor_id,sku.trade_discount_type,sku.sku_type	from		pos_items p left join pos on p.pos_id = pos.id and p.branch_id = pos.branch_id and p.counter_id = pos.counter_id and p.date = pos.date		left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id		left join sku_items on p.sku_item_id = sku_items.id		left join sku on sku_id = sku.id		left join membership on member_no = card_no		left join sku_items_cost_history sich2 on sich2.sku_item_id=p.sku_item_id and sich2.branch_id=p.branch_id and sich2.date=(select max(date) from sku_items_cost_history sich where sich.branch_id=p.branch_id and sich.sku_item_id=p.sku_item_id and sich.date<=p.date)		left join sku_items_price_history siph2 on siph2.sku_item_id=p.sku_item_id and siph2.branch_id=p.branch_id and siph2.added=(select max(added) from sku_items_price_history siph where siph.branch_id=p.branch_id and siph.sku_item_id=p.sku_item_id and siph.added<=p.date)left join category c on c.id=sku.category_id		where pos.cancel_status=0 and p.branch_id = $bid and p.date = ".ms($dt);*/				// v3 sql		$sql = "select pos.pos_time, if(pos.race<>'',pos.race,left(membership.race,1)) as race, pos.member_no, sku_item_code, p.*, cs.network_name as counter_name, p.mprice_type, sku_items.cost_price as master_cost , sku.category_id,c.department_id,sku.brand_id,sku.vendor_id,sku.trade_discount_type,sku.sku_type,sku.default_trade_discount_codefrom posleft join pos_items p on p.pos_id = pos.id and p.branch_id = pos.branch_id and p.counter_id = pos.counter_id and p.date = pos.dateleft join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_idleft join sku_items on p.sku_item_id = sku_items.idleft join sku on sku_id = sku.idleft join membership on pos.member_no = card_no and pos.member_no is not nullleft join category c on c.id=sku.category_idwhere pos.cancel_status=0 and pos.branch_id = $bid and pos.date = ".ms($dt);		//die($sql);		$rs=$con->sql_query($sql);	if ($con->sql_numrows()<=0)	{		global $msg;		$msg = "No Sales data for this branch on $dt.";		return;	}	print "{$con->sql_numrows()} rows to process<br />";		list($y,$m,$d) = explode("-", $dt);	$clear_data = array();	$changed_sku = array();	while($r=$con->sql_fetchrow($rs))	{	    $line_no++;	    $sku_item_id = mi($r['sku_item_id']);	    		// print "<li>"; print_r($r);		$cols = array();		// skip lines with no sku_item_code		$cols['branch_id'] = $bid;		$cols['timestamp'] = $r['pos_time'];		$cols['year'] = $y;		$cols['month'] = $m;		$cols['day'] = $d;		$cols['hour'] = substr($cols['timestamp'],11,2);		$cols['counter_id'] = $r['counter_name'];		$changed_sku[$sku_item_id] = 1;		$cid = $cols['counter_id'];		  		if (!$clear_data[$cid]){		    $delete_today = "delete from pos_transaction where year=$y and month=$m and day=$d and branch_id = $bid and counter_id = ".ms($cid);		    $con->sql_query("select id from pos_transaction left join sku_items using (sku_item_code)  where year=$y and month=$m and day=$d and branch_id = $bid and counter_id = ".ms($cid));		    while($clr=$con->sql_fetchrow())		    {		    	if ($clr[0]!='') $changed_sku[$clr[0]] = 1;			}			//$con->sql_query("update sku_items_cost set changed=1 where branch_id = $bid and sku_item_id in (".join(",", array_keys()).")");		    $con->sql_query($delete_today);		    print "Deleted rows: " . $con->sql_affectedrows();		    //$con->sql_query("delete from category_sales_cache where date = '$ts' and branch_id = $bid");		    $clear_data[$cid] = true;		}		$cols['transaction_id'] = $r['pos_id'];		$cols['line_no'] = $r['item_id'];		$cols['sku_item_code'] = $r['sku_item_code'];		$cols['artno_mcode'] = $r['barcode'];		$cols['qty'] = $r['qty'];		$cols['amount'] = $r['price'] - $r['discount'];				// price type		if($r['trade_discount_code'])   $cols['price_type'] = $r['trade_discount_code'];		else{            $q_sip = $con->sql_query("select trade_discount_code from sku_items_price_history where branch_id=$bid and sku_item_id=$sku_item_id and added<=".ms($dt)." order by added desc limit 1");            if(!$con->sql_numrows($q_sip)){	            $cols['price_type'] = $r['default_trade_discount_code'];			}else{	            $cols['price_type'] = $con->sql_fetchfield('trade_discount_code', -1, $q_sip);			}			$con->sql_freeresult($q_sip);		}		//$cols['price_type'] = $r['price_type'];				$trade_discount_type = mi($r['trade_discount_type']);		// find cost		if($config['sku_consign_selling_deduct_discount_as_cost']&&$cols['price_type']&&$trade_discount_type&&$r['sku_type']=='CONSIGN'){ // consign method			$department_id = mi($r['department_id']);			$brand_id = mi($r['brand_id']);			$vendor_id = mi($r['vendor_id']);						if($cols['amount']&&$cols['qty']){   // got selling amount                if($trade_discount_type==1){    // use brand					$q_rate = $con->sql_query("select rate from brand_commission where branch_id=$bid and brand_id=$brand_id and department_id=$department_id and skutype_code=".ms($cols['price_type']));				}elseif($trade_discount_type==2){   // use vendor	                $q_rate = $con->sql_query("select rate from vendor_commission where branch_id=$bid and vendor_id=$vendor_id and department_id=$department_id and skutype_code=".ms($cols['price_type']));				}				$discount_rate = mf($con->sql_fetchfield(0, -1, $q_rate));				$con->sql_freeresult($q_rate);				$consign_cost = round(($cols['amount'] * ((100-$discount_rate)*0.01))/$cols['qty'],3);				$cols['grn_cost'] = $consign_cost;				$cols['avg_cost'] = $consign_cost;			}else{                $cols['grn_cost'] = 0;				$cols['avg_cost'] = 0;			}		}else{  // normal method			$q_sic = $con->sql_query("select grn_cost,avg_cost from sku_items_cost_history where branch_id=$bid and sku_item_id=$sku_item_id and date<=".ms($dt)." order by date desc limit 1");			if(!$con->sql_numrows($q_sic)){	            $cols['grn_cost'] = $r['master_cost'];				$cols['avg_cost'] = $r['master_cost'];			}else{	            $cols['grn_cost'] = $con->sql_fetchfield('grn_cost', -1, $q_sic);				$cols['avg_cost'] = $con->sql_fetchfield('avg_cost', -1, $q_sic);			}			$con->sql_freeresult($q_sic);		}		//$cols['grn_cost'] = $r['grn_cost'];		//$cols['avg_cost'] = $r['avg_cost'];		if ($r['price']==0)			$cols['discount']=0;		else			$cols['discount'] = round(100*($r['discount'] / $r['price']));		$cols['disc_amt'] = $r['discount'];		$cols['sales_type'] = $r['sales_type'];		$cols['card_no'] = $r['member_no'];		$cols['race'] = $r['race'];		$cols['pwp'] = (substr($r['mprice_type'],0,3)=='PWP') ? 'PWP' : $r['mprice_type'];						if ($cols['qty']<0) {			// for return, make price negative if it is positive			if ($cols['amount']>0) $cols['amount'] *= -1;				// if return, the cost should be -ve (this will give us zero cost)			$cols['grn_cost']*=-1;			$cols['avg_cost']*=-1;		}						if (!$con->sql_query("insert into pos_transaction ".mysql_insert_by_field($cols),false,false))		{			$err = 1;			print "<li style='color:red;'> Line $line_no : " .join("|",$cols)."</li>". mysql_error();		}	}	   update_cache($bid, $dt, $changed_sku);	 	if ($err)	{		if ($delete_today) $con->sql_query($delete_today);		print "<p>Please fix the errors and try again. <a href=\"$_SERVER[PHP_SELF]\">Click here to continue</a></p>";		exit;	}		// done	print "<p>Import successfully (Date: $dt). ";	//<a href=\"$_SERVER[PHP_SELF]\">Click here to continue</a></p>";}function import_pos(){	global $con, $nomatch, $bid;	if (!$_FILES['f'] || $_FILES['f']['error']){		global $msg;		$msg = "Invalid file upload.";		return;	}	// check and perform sql-insertion	$f = $_FILES['f'];	$fp = fopen($f['tmp_name'], "r");	// .rpt is multics file	$is_multics = preg_match("/\.rpt$/i", $f['name']);	// TRANSACTION not supported by myisam tables	//$con->sql_query("START TRANSACTION");	$err = 0;	$nomatch = 0;	$bid = intval($_REQUEST['branch_id']);	$line_no = 0;	$changed_sku = array();    $clear_data=false;	while($data = fgetcsv($fp, 5000, ";"))	{		$line_no++;		// skip lines with no sku_item_code		if ($data[4]=='') continue;		$cols['branch_id'] = $bid;		$cols['timestamp'] = $data[0];	    $ts = substr($cols['timestamp'],0,10);		list($y,$m,$d) = explode("-", $ts);		$cols['year'] = $y;		$cols['month'] = $m;		$cols['day'] = $d;		$cols['hour'] = substr($cols['timestamp'],11,2);	/*    pos_transaction = "pos_".$bid."_".substr($ts,0,4);	    $con->sql_query("DROP TABLE if exists pos_transaction");		$con->sql_query("CREATE TABLE if not exists pos_transaction ( `timestamp` timestamp NOT NULL default '0000-00-00 00:00:00', `sku_item_code` char(12) default NULL, `artno_mcode` char(20) default NULL, `qty` smallint(6) default NULL, `amount` double default NULL, `price_type` char(3) default '', `branch_id` int(11) NOT NULL default '0', `counter_id` smallint(6) NOT NULL default '0', `transaction_id` smallint(6) NOT NULL default '0', `line_no` smallint(6) NOT NULL default '0', `year` int(4) default NULL, `month` int(2) default NULL, `day` int(2) default NULL, `sales_type` char(2) default NULL, `card_no` char(9) default NULL, `hour` int(2) default NULL, `race` char(10) default NULL, `discount` int(2) default '0', `disc_amt` double default NULL, `pwp` enum('PWP','Normal') default 'Normal', PRIMARY KEY (`branch_id`,`timestamp`,`counter_id`,`transaction_id`,`line_no`), KEY `timestamp` (`timestamp`), KEY `sku_item_code` (`sku_item_code`), KEY `price_type` (`price_type`), KEY `year` (`year`), KEY `month` (`month`), KEY `day` (`day`), KEY `sales_type` (`sales_type`), KEY `card_no` (`card_no`), KEY `race` (`race`), KEY `hour` (`hour`), KEY `pwp` (`pwp`) )");*/	//todo: track and delete by counter		if (!$clear_data){		    $delete_today = "delete from pos_transaction where year=$y and month=$m and day=$d and branch_id = $bid";		    $con->sql_query("select id from pos_transaction left join sku_items using (sku_item_code)  where year=$y and month=$m and day=$d and branch_id = $bid");		    while($r=$con->sql_fetchrow())		    {		    	if ($r[0]!='') $changed_sku[$r[0]] = 1;			}			//$con->sql_query("update sku_items_cost set changed=1 where branch_id = $bid and sku_item_id in (".join(",", array_keys()).")");		    $con->sql_query($delete_today);		    print "Deleted rows: " . $con->sql_affectedrows();		    //$con->sql_query("delete from category_sales_cache where date = '$ts' and branch_id = $bid");		    $clear_data = true;		}		$cols['counter_id'] = $data[1];		$cols['transaction_id'] = $data[2];		$cols['line_no'] = $data[3];		$cols['artno_mcode'] = trim($data[5]);		$cols['qty'] = str_replace(",","",$data[6]);		$cols['grn_cost'] = 0;		$cols['avg_cost'] = 0;		find_arms_code($ts, $data[4], $is_multics, $cols, $sku_item_id);		if ($sku_item_id)		{			// push into stack for record that we want to update inventory			$changed_sku[$sku_item_id] = 1;		}		if ($cols['qty']<0) {			// if return, the cost should be -ve (this will give us zero cost)			$cols['grn_cost']*=-1;			$cols['avg_cost']*=-1;		}		if ($data[7]+$data[8]==0)			$cols['discount'] = 0;		else			$cols['discount'] = round(100*($data[7]/($data[7]+$data[8])));		$cols['disc_amt'] = $data[7];		$cols['amount'] = str_replace(",","",$data[8]);		$amount += $cols['amount'];		$cols['price_type'] = $data[9];		$cols['sales_type'] = $data[10];		$cols['card_no'] = $data[11];		$cols['race'] = $data[12];		$cols['pwp'] = $data[13] ? $data[13] : 'Normal';		if (!$con->sql_query("insert into pos_transaction ".mysql_insert_by_field($cols),false,true))		{			$err = 1;			print "<li> Line $line_no : " .join("|",$data)."<br />". mysql_error();		}	}	if ($err)	{		if ($delete_today) $con->sql_query($delete_today);		print "<p>Please fix the errors and try again. <a href=\"$_SERVER[PHP_SELF]\">Click here to continue</a></p>";		exit;	}	update_cache($bid, $ts, $changed_sku);		// done	print "<p>Import successfully ($nomatch no arms_code, pos_transaction, Date: $ts). <a href=\"$_SERVER[PHP_SELF]\">Click here to continue</a></p>";}function update_cache($bid, $date, $changed_sku){	global $con;		// update year, month, day, hour cache	// $con->sql_query("update pos_transaction set year=YEAR(timestamp), month=MONTH(timestamp), day=DAY(timestamp), hour=HOUR(timestamp) where year is null");	// update cateogry sales	list($y,$m,$d) = explode("-", $date);	$con->sql_query("create table if not exists category_sales_cache_b$bid (category_id int, date date not null, sku_type char(10), year integer, month integer, amount double, cost double, qty double, fresh_market_cost double, primary key (date, category_id, sku_type), index(category_id), index(sku_type), index(year, month))");	$con->sql_query("delete from category_sales_cache_b$bid where date='$date'");	$con->sql_query("replace into category_sales_cache_b$bid (date, category_id, sku_type, year, month, amount, cost, qty) select '$date', sku.category_id, sku.sku_type, $y, $m, sum(pos.amount), sum(pos.grn_cost*abs(pos.qty)), sum(pos.qty)	from pos_transaction pos	left join sku_items using (sku_item_code)	left join sku on sku_items.sku_id = sku.id where branch_id = $bid and year=$y and month=$m and day=$d group by category_id, sku_type");	// update daily sku cache	$con->sql_query("create table if not exists sku_items_sales_cache_b$bid (sku_item_id int, date date, year integer, month integer, amount double, disc_amt double, cost double, qty double, fresh_market_cost double, last_grn_vendor_id int, primary key (date,sku_item_id), index(sku_item_id), index(year, month))") or die(mysql_error());	$con->sql_query("delete from sku_items_sales_cache_b$bid where date='$date'");	//	$con->sql_query("replace into sku_items_sales_cache_b$bid (sku_item_id, date, year, month, amount, disc_amt, cost, qty) select sku_items.id, '$date', $y, $m, sum(pos.amount),sum(pos.disc_amt), sum(pos.grn_cost*abs(pos.qty)), sum(pos.qty)	from pos_transaction pos	left join sku_items using (sku_item_code)	where branch_id = $bid and year=$y and month=$m and day=$d group by sku_items.id");	/* $con->sql_query("replace into sku_items_sales_cache_b$bid (sku_item_id, date, amount, cost, qty) select sku_items.id, date(pos.timestamp) as dt, sum(pos.amount), sum(pos.grn_cost), sum(pos.qty)	from pos_transaction pos	left join sku_items using (sku_item_code)	left join sku on sku_items.sku_id = sku.id where branch_id = $bid group by sku_items.id, dt");	*/		// check sku item id array to prevent sql error	if(!$changed_sku)   return;	else{		foreach($changed_sku as $k=>$v){			if(trim($k)=='') unset($changed_sku[$k]);		}	}	// update inventory changed	$con->sql_query("update sku_items_cost set changed=1 where branch_id = $bid and sku_item_id in (".join(",", array_keys($changed_sku)).")");}// from link-code, find arms code// also find the grn and avg costfunction find_arms_code($ts, $code, $is_multics, &$cols, &$sku_item_id){	global $con, $nomatch, $bid;		$sku_item_id = 0;	$code = trim($code);		if ($is_multics)	{		if ($cols['artno_mcode']!='')			$con->sql_query("select id, sku_id, sku_item_code, cost_price, grn_cost, avg_cost from sku_items left join sku_items_cost_history on sku_items.id = sku_item_id and branch_id = $bid and sku_items_cost_history.date <= ".ms($ts)." where mcode = ".ms($cols['artno_mcode'])." order by sku_items.sku_item_code, sku_items_cost_history.date desc limit 1");		if ($con->sql_numrows()<=0)			$con->sql_query("select id, sku_id, sku_item_code, cost_price, grn_cost, avg_cost from sku_items left join sku_items_cost_history on sku_items.id = sku_item_id and branch_id = $bid and sku_items_cost_history.date <= ".ms($ts)." where link_code like ".ms($code."%")." order by sku_items.sku_item_code, sku_items_cost_history.date desc limit 1");		$c = $con->sql_fetchrow();		if (!$c){			print "<li> $code is not in sku database.";			$cols['sku_item_code'] = 'M'.substr("$code",1);			$nomatch++;			return;				}	}	else	{		$con->sql_query("select id, sku_id, sku_item_code, cost_price, grn_cost, avg_cost from sku_items left join sku_items_cost_history on sku_items.id = sku_item_id and branch_id = $bid and sku_items_cost_history.date <= ".ms($ts)." where sku_item_code = ".ms($code)." order by sku_items.sku_item_code,sku_items_cost_history.date desc limit 1");		$c = $con->sql_fetchrow();		if (!$c)		{			print "<li> $code is not in sku database.";			$cols['sku_item_code'] = "$code";			$nomatch++;			return;				}	}		//$cols['sku_id'] = $c["sku_id"];	//$cols['sku_item_id'] = $c["sku_item_id"];	$cols['sku_item_code'] = $c["sku_item_code"];	$cols['grn_cost'] = $c['grn_cost'];	if ($cols['grn_cost']==0) $cols['grn_cost']=$c['cost_price']; 	$cols['avg_cost'] = $c['avg_cost'];	$sku_item_id = $c['id'];}function show_form(){	global $smarty, $con, $sessioninfo, $msg;		$smarty->assign("PAGE_TITLE", "Admin POS Transaction Import");	$smarty->display("header.tpl");	if(BRANCH_CODE=='HQ')		$have_pos = $con->sql_query("select distinct date from pos_counter_collection_tracking order by 1 desc",false,false);	else        $have_pos = $con->sql_query("select distinct date from pos_counter_collection_tracking where branch_id = $sessioninfo[branch_id] order by 1 desc",false,false);	$dates = $con->sql_fetchrowset();	print "<p style='color:red'>$msg</p>";?><form enctype="multipart/form-data" method=post><input type=hidden name=a value="import_pos"><h1>POS Transaction Import</h1><?	if (BRANCH_CODE != 'HQ')	{	    print "<input type=hidden name=branch_id value=$sessioninfo[branch_id]>";	}	else	{		print "Branch <select name=branch_id>";		$con->sql_query("select code, id from branch where code <> 'HQ'");		while($r=$con->sql_fetchrow())		{		    print "<option value=$r[id] ";			if ($r['code']==BRANCH_CODE) print "selected";			print ">$r[code]</option>";		}		print "</select>";	}?><br />Select File to Import <input type=file name=f size=30><input type=submit value="Upload"></form><?	if ($have_pos) 	{?><br /><br /><br /><br /><form method=post><input type=hidden name=a value="export_point"><h1>Export Points</h1><?if (BRANCH_CODE != 'HQ'){    print "<input type=hidden name=branch_id value=$sessioninfo[branch_id]>";}else{	print "Branch <select name=branch_id>";	$con->sql_query("select code, id from branch where id in (select distinct branch_id from pos)");	while($r=$con->sql_fetchrow())	{	    print "<option value=$r[id] ";		if ($r['code']==BRANCH_CODE) print "selected";		print ">$r[code]</option>";	}	print "</select>";}?><br />Select Date to Export<select name=date><?foreach($dates as $d){	print "<option>$d[0]</option>";}?></select><input type=submit value="Export"></form><br /><br /><br /><br /><form method=post><input type=hidden name=a value="import_arms"><h1>Import ARMS POS Data</h1><p style="color:blue">Note: Doing "POS Transaction Import" will delete all sales data for the date. You must re-import "ARMS POS Data" each time after importing sales from Multics/ATP (for the same date).</p><?if (BRANCH_CODE != 'HQ'){    print "<input type=hidden name=branch_id value=$sessioninfo[branch_id]>";}else{	print "Branch <select name=branch_id>";	$con->sql_query("select code, id from branch where id in (select distinct branch_id from pos)");	while($r=$con->sql_fetchrow())	{	    print "<option value=$r[id] ";		if ($r['code']==BRANCH_CODE) print "selected";		print ">$r[code]</option>";	}	print "</select>";}?><br />Select Date to Import<select name=date><?foreach($dates as $d){	print "<option>$d[0]</option>";}?></select><input type=submit value="Import"></form><?	}		$smarty->display("footer.tpl");	exit;}?>