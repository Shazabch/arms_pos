<?php/*4/7/2011 10:29:35 AM Alex- new report coupon transaction module4/15/2011 10:18:59 AM Alex- add department, brand and vendor filter4/28/2011 3:53:41 PM Alex- add show group monthly6/24/2011 6:02:42 PM Andy- Make all branch default sort by sequence, code.2/1/2012 2:35:20 PM Alex- change filter of searching code to match all if over 12 digit*/include("include/common.php");include("include/class.report.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");class REPORT_COUPON_TRANSACTION extends Module{     function __construct($title){        global $con, $smarty, $sessioninfo;		//default assign        if (!$_REQUEST['to_date']) $_REQUEST['to_date'] = date('Y-m-d');		if (!$_REQUEST['from_date']) $_REQUEST['from_date'] = date('Y-m-d', strtotime("-1 month"));        $this->date_from = $_REQUEST['from_date'];        $this->date_to = $_REQUEST['to_date'];		//Branches		$res_id=$con->sql_query("select * from branch where active=1 order by sequence,code");		while($r = $con->sql_fetchrow($res_id)){			$branches[$r['id']] = $r;			$this->branches[$r['id']]=$r['code'];		}        $con->sql_freeresult($res_id);        		$smarty->assign("branches", $branches);        $bid  = get_request_branch(true);        $this->bid=$bid;		//sessioninfo privilge        $filter[]= "cp.dept_id in (0, $sessioninfo[department_ids])";        if ($sessioninfo['brands'])            $filter[]= "cp.brand_id in (".join(",",array_keys($sessioninfo['brands'])).")";        if ($sessioninfo['vendors'])            $filter[]= "cp.vendor_id in (".join(",",array_keys($sessioninfo['vendors'])).")";		$this->ses_filter=join(' and ', $filter);		$sql="select cp.*, if(cp.dept_id = 0, 'All', c.description) as dept_desc			from coupon cp			left join category c on c.id=cp.dept_id			where $this->ses_filter			group by cp.dept_id			order by dept_desc";				$res_id2=$con->sql_query($sql);		while($cp = $con->sql_fetchassoc($res_id2)){			$dept_descrip[$cp['dept_id']]=$cp['dept_desc'];		}		$smarty->assign('dept_descrip',$dept_descrip);       	$smarty->assign('form',$_REQUEST);    	parent::__construct($title);    }	function _default(){		$this->display();		exit;	}	function show_report(){		$this->generate_report();		$this->display();	}	function output_excel(){	    global $smarty, $sessioninfo;				$this->generate_report();        include_once("include/excelwriter.php");    	$smarty->assign('no_header_footer', true);    	$filename = "coupon_transaction_".time().".xls";    	log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Coupon Transaction Report To Excel($filename)");    	Header('Content-Type: application/msexcel');		Header('Content-Disposition: attachment;filename='.$filename);		print ExcelWriter::GetHeader();		$this->display();		print ExcelWriter::GetFooter();	    exit;	}		function generate_report(){	    global $con, $smarty, $sessioninfo, $LANG;		$form=$_REQUEST;		$this->by_monthly=$form['by_monthly'];		$this->by_daily=$form['by_daily'];        $con_multi=new mysql_multi();        //$con_multi = $con;        //===============Report Title===========        if ($form['branch_id'] != 'all'){            $branch_code = get_branch_code($this->bid);            $filter[] = "pp.branch_id= $this->bid";		}else		    $branch_code = "All";        $report_title_arr[] = "Branch: $branch_code";		if ($form['dept_id'] != ""){		    if ($form['dept_id'] != "0"){	            $filter[]= "cp.dept_id = $form[dept_id]";	            $res_did=$con->sql_query("select description from category where id=$form[dept_id]");	            $d=$con->sql_fetchassoc($res_did);	            $con->sql_freeresult($res_did);	            $report_title_arr[] = "Department: $d[description]";			}else{	            $report_title_arr[] = "Department: All";			}  		}else{			$err[]=sprintf($LANG['COUP_MISS_DATA'], "department");		}		if ($form['r_type'] == "brand"){			if ($form['brand_id'] != ""){				if ($form['brand_id'] != "all"){		            $filter[]= "cp.brand_id = $form[brand_id]";		            $res_bid=$con->sql_query("select description from brand where id=$form[brand_id]");		            $b=$con->sql_fetchassoc($res_bid);		            $con->sql_freeresult($res_bid);		            $report_title_arr[] = "Brand: $b[description]";				}else{		            $report_title_arr[] = "Brand: All";				}			}else{				$err[]=sprintf($LANG['COUP_MISS_DATA'], "brand");			}		}elseif ($form['r_type'] == "vendor"){			if ($form['vendor_id'] != ""){				if ($form['vendor_id'] != "all"){		            $filter[]= "cp.vendor_id = $form[vendor_id]";		            		            $res_vid=$con->sql_query("select description from vendor where id=$form[vendor_id]");		            $v=$con->sql_fetchassoc($res_vid);		            $con->sql_freeresult($res_vid);		            $report_title_arr[] = "Vendor: $v[description]";				}else{                    $report_title_arr[] = "Vendor: All";				}			}else{				$err[]=sprintf($LANG['COUP_MISS_DATA'], "vendor");			}		}else       		$report_title_arr[] = "Type: All";		//search code		if ($form['search_code']){		    $code_length = strlen($form['search_code']);		    if ($code_length == 7 )		    	$filter[]="cp.code=".ms($form['search_code']);            elseif ($code_length < 7 )                $filter[]="(cp.code = '".str_pad($form['search_code'],7,"0",STR_PAD_LEFT)."' or pp.remark = ".ms($form['search_code']).")";			else			    $filter[]="pp.remark=".ms($form['search_code']);	        $report_title_arr[] = "Code: $form[search_code]";		}		if ($err){            $smarty->assign('err',$err);            return;		}		if ($this->by_daily){			$report_title_arr[] = "Date: $this->date_from";			$this->date_to=$this->date_from;		}else        	$report_title_arr[] = "Date: $this->date_from to $this->date_to";				$report_title=join("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", $report_title_arr);		$smarty->assign('report_title',$report_title);        //====================================		//================start filter===================		$filter[]="pp.type='Coupon'";		//date		$from_date=ms($this->date_from);		$to_date=ms($this->date_to);//		$to_timestamp=ms(date("Y-m-d",strtotime('+1 days'.$form['to_date'])));		$filter[]= "pp.date between $from_date and $to_date";        $filter[]= "pos.cancel_status=0";		$filter[]=$this->ses_filter;		if ($filter)    $where = "where ".join(" and ", $filter);		//==============end filter====================		$sql="select pp.*,pos.pos_time,count(pp.remark) as used,sum(pp.amount) as amount, branch.code as branch_code, cp.code as coupon_code			from pos_payment pp			left join coupon cp on SUBSTRING(pp.remark,1,7) = cp.code			left join pos on pp.branch_id=pos.branch_id and pp.counter_id=pos.counter_id and pp.pos_id=pos.id and pp.date=pos.date			left join branch on pp.branch_id=branch.id			$where			group by pp.branch_id,pp.date,pp.remark			order by pp.remark,pp.date";		//print $sql;		$con_multi->sql_query($sql);		if ($con_multi->sql_numrows()>0){			while($r = $con_multi->sql_fetchassoc()){				if ($this->by_daily){				    $date_key = date("H", strtotime($r['pos_time']));					if(!$min_hour || $min_hour > $date_key){		          		$min_hour = $date_key;		      		}				}else				    $date_key = date("Ymd", strtotime($r['date']));				if (!$r['remark'])				    $cp_code="Unknown";				else					$cp_code=$r['remark'];				if ($r['coupon_code'] == '' || strlen($r['remark']) !=12){					$type="Unknown Code";					$unknown_code[$cp_code]=1;				}else{					//check for percentage or amount					$amount_code=substr($r['remark'],-5,5);										if (substr($amount_code,0,1) == "O"){						$type="Discount by percentage";						$code_amount[$cp_code]['percentage']=mf(substr($amount_code,-4,4)/100)."%";					}else{						$type="Discount by amount";					    $code_amount[$cp_code]['amount']=mf(substr($amount_code,-5,5)/100);					}				}								$tb[$type][$cp_code]['data'][$date_key]['amt'] += $r['amount'];				$tb[$type][$cp_code]['data'][$date_key]['used'] += $r['used'];				$date_ori[$date_key]=$r['date'];			}					//generate header			if (!$this->by_daily)				$this->generate_header_date_label();			else				$this->generate_header_time_label($min_hour);		}				$con_multi->close_connection();		// construct total table		if($tb){			foreach($tb as $t=>$cp_codeo){				foreach($cp_codeo as $cp_code=>$data){					if($data['data']){						foreach($data['data'] as $date_key=>$r){						    $tb[$t][$cp_code]['data']['total']['amt']+=$r['amt'];						    $tb[$t][$cp_code]['data']['total']['cost']+=$r['cost'];						    $tb[$t][$cp_code]['data']['total']['used']+=$r['used'];		                        $tb_total['data'][$date_key]['amt'] += $r['amt'];					    	$tb_total['data'][$date_key]['cost'] += $r['cost'];					    	$tb_total['data'][$date_key]['used'] += $r['used'];					    	$tb_total['data']['total']['amt'] += $r['amt'];					    	$tb_total['data']['total']['cost'] += $r['cost'];					    	$tb_total['data']['total']['used'] += $r['used'];						    	$tb_total['total']['total']['amt'] += $r['amt'];					    	$tb_total['total']['total']['cost'] += $r['cost'];					    	$tb_total['total']['total']['used'] += $r['used'];						    	$tb_total['total'][$date_key]['amt'] += $r['amt'];					    	$tb_total['total'][$date_key]['cost'] += $r['cost'];					    	$tb_total['total'][$date_key]['used'] += $r['used'];						}					}				}			}		}		if($this->by_monthly){  // report group by month			$this->group_data_to_monthly($tb, $tb_total);		}		@asort($tb);			        $table=true;        $day_col=count($this->uq_cols);		$smarty->assign('uq_cols', $this->uq_cols);                $smarty->assign('day_col',$day_col);        $smarty->assign('table', $table);		$smarty->assign('tb', $tb);		$smarty->assign('tb_total', $tb_total);		$smarty->assign('code_amount',$code_amount);		$smarty->assign('date_ori',$date_ori);		$smarty->assign('unknown_code',$unknown_code);			}	private function group_data_to_monthly(&$tb, &$tb_total){	    //print_r($tb_total);        if($tb){    // group category data			foreach($tb as $t=>$cp_codeo){							foreach($cp_codeo as $id=>$cat){					if($cat['data']){					    $new_data = array();	                    foreach($cat['data'] as $date_key=>$r){ // loop for daily data to convert to monthly data	                        // no need skip, since 0-4, and and 5-6 = total	                        //if($date_key=='total')  continue;   // skip total row							$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key							$new_data[$ym]['amt'] += $r['amt'];							$new_data[$ym]['cost'] += $r['cost'];							$new_data[$ym]['used'] += $r['used'];								///$new_data['total']['amt'] += $r['amt'];							//$new_data['total']['cost'] += $r['cost'];							//$new_data['total']['qty'] += $r['qty'];						}						$tb[$t][$id]['data'] = $new_data;  // replace the daily data to monthly data						unset($new_data);					}				}			}		}        $tb_total['total'] = array();		if($tb_total['data']){  // group total row data		    $new_data = array();			foreach($tb_total['data'] as $date_key=>$r){			    // no need skip, since 0-4, and and 5-6 = total			    //if($date_key=='total')  continue;   // skip total row                $ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key                $new_data[$ym]['amt'] += $r['amt'];				$new_data[$ym]['cost'] += $r['cost'];				$new_data[$ym]['used'] += $r['used'];				$tb_total['total'][$ym]['amt'] += $r['amt'];				$tb_total['total'][$ym]['cost'] += $r['cost'];				$tb_total['total'][$ym]['used'] += $r['used'];			}			$tb_total['data'] = $new_data;			unset($new_data);		}	}	private function generate_header_date_label(){        $d1 = strtotime($this->date_from);		$d2 = strtotime($this->date_to);		$uq_cols = array();		while($d1<=$d2){		    $temp = array('y'=>date('Y', $d1), 'm'=>mi(date('m', $d1)));		    if($this->by_monthly){	            $key = date('Ym', $d1);			}else{			    $key = date('Ymd', $d1);	            $temp['d'] = date('d', $d1);			}		    $uq_cols[$key] = $temp;			$d1 += 86400;		}		$this->uq_cols = $uq_cols;	}		private function generate_header_time_label($min_hour){				for($i=$min_hour;$i<=24;$i++){		    if($i<13)		        $hour[$i]['d']=$i.":00 AM";	        else	        {	            $h = $i-12;	            if($i=='24')	            {	                $hour[$i]['d']=$h.":00 AM";	            }else	            {	                $hour[$i]['d']=$h.":00 PM";	            }	        }	    }		    	    $this->uq_cols = $hour;	}		function ajax_load_brand_vendor(){		global $con,$sessioninfo;		$dept_id=$_REQUEST['dept_id'];		$filter[]="cp.dept_id=$dept_id";        if ($sessioninfo['vendors'])            $filter[]= "cp.vendor_id in (".join(",",array_keys($sessioninfo['vendors'])).")";        if ($sessioninfo['brands'])            $filter[]= "cp.brand_id in (".join(",",array_keys($sessioninfo['brands'])).")";		if ($filter)    $where = "where ".join(" and ", $filter);		$sql="select cp.*, brand.description as brand_desc, vendor.description as vendor_desc			from coupon cp			left join brand on cp.brand_id=brand.id			left join vendor on cp.vendor_id=vendor.id			$where			group by cp.brand_id,cp.vendor_id";		$con->sql_query($sql);		if ($con->sql_numrows()){			while ($r=$con->sql_fetchassoc()){				if ($r['brand_id'])		$brand[$r['brand_id']]=$r['brand_desc'];				if ($r['vendor_id'])	$vendor[$r['vendor_id']]=$r['vendor_desc'];			}			if ($brand)	asort($brand);			if ($vendor) asort($vendor);			//brand options			if ($brand){				if (count($brand)>1)  $out['brand']="<option value='all'>All</option>";				foreach ($brand as $brand_id=> $brand_description){	   				$selected_r="";				    if ($_REQUEST['brand_id'] == $brand_id) $selected_r=" selected ";	                $out['brand'].="<option value='$brand_id' $selected_r>".ucwords($brand_description)."</option>";				}			}else{			    $out['brand']="<option value=''>No Data</option>";			}			//vendor options			if ($vendor){				if (count($vendor)>1)  $out['vendor']="<option value='all'>All</option>";				foreach ($vendor as $vendor_id=> $vendor_description){	   				$selected_r="";				    if ($_REQUEST['vendor_id'] == $vendor_id) $selected_r=" selected ";	                $out['vendor'].="<option value='$vendor_id' $selected_r>$vendor_description</option>";				}			}else{	   			$out['vendor']="<option value=''>No Data</option>";			}		}else{            $out['brand']="<option value=''>No Data</option>";            $out['vendor']="<option value=''>No Data</option>";		}		print json_encode($out);	}	}$report = new REPORT_COUPON_TRANSACTION('Coupon Transaction Report');?>