<?/*3/16/2009 9:45:00 AM Andy- table modified	- alter table consignment_report add price double, adj int default 0,lost int default 0	- alter table tmp_consignment_report add price double, adj int default 0,lost int default 0	- alter table consignment_report_export_history add adj_list text, add lost_list text3/31/2009 2:22:00 PM Andy- add recall feature	- table modified	    - alter table consignment_report_export_history add active tinyint(1) not null default 1	    4/24/2009 3:55:00 PM Andy- split artno into code and size5/7/2009 5:10:00 PM Andy- retrieve grn qty when loading page5/13/2009 10:13:00 AM Andy- add privilege checking - CON_MONTHLY_REPORT , CON_VIEW_REPORT5/19/2009 1:21:00 PM Andy- Add getting new items if no open qty but have grn5/20/2009 1:08:00 PM Andy- get extra column data, do qty out and adj7/10/2009 4:50:38 PM Andy- add closing stock12/1/2009 11:38:22 AM Andy- Fix update discount code bugs in function update_item_cost and save_to_invoice1/6/2010 4:27:49 PM Andy- Add config 'ci_use_split_artno' to check whether split artno2/8/2010 3:16:38 PM Andy- Add consignment over invoice column in monthly report4/1/2010 5:37:49 PM Andy- Monthly report change to only show active branch5/31/2010 2:54:17 PM Andy- Stock balance and inventory calculation include CN(-)/DN(+), can see under SKU Masterfile->Inventory.- Monthly Report lost qty will change to generate CN, over qty will change to generate DN.- Fix monthly report generate invoice/adjustment cannot show stock balance bugs.6/2/2010 2:52:48 PM Andy- Add print draft monthly report.6/4/2010 11:36:58 AM Andy- Fix monthly report when confirm getting wrong qty bugs.6/8/2010 10:11:36 AM Andy- CN/DN Swap6/8/2010 10:42:30 AM Andy- Fix a bugs cause monthly report generated invoice show zero sub total amount.7/21/2010 11:26:19 AM Andy- Add Consignment Monthly Report Main Page List.7/26/2010 2:51:11 PM Andy- Add branch, year and month dropdown for monthly report.7/28/2010 1:38:35 PM Andy- Add delete function to consignment monthly report (prompt to enter reason before delete).10/12/2010 9:36:42 AM Andy- Fix a bugs if user open multiple monthly report tab will cause some un-save temporary data lost.11/4/2010 6:01:45 PM Andy- Fix monthly report generated CN/DN sometime got small rounding different with viewing screen.11/17/2010 5:08:48 PM Justin- Modified items to sequence by page and row number when doing confirmation.1/26/2011 2:56:35 PM Andy- Add search sku and directly goto the page.3/18/2011 5:52:47 PM Alex- fix grn cost amount bugs7/6/2011 11:08:08 AM Andy- Change split() to use explode()9/27/2011 4:31:09 PM Andy- Add free sql memory.11/22/2011 11:03:58 AM Andy- Fix wrong grand total stock closing.- Add Qty In, Qty Out, Posted Adj and Adj Amount.- Add "Stock Closing" to include adjustment, lost and over.- Show price type total at top panel list.1/11/2012 4:56:32 PM Justin- Added new feature to capture exchange rate.- Added new ability to auto recognize whether the monthly report is by region and exchange rate or local.  -> if found it is by region and exchange rate, system will generate all invoice, CN and DN by containing exchange rate and having foreign and local cost price.  -> as for adjustment, system will multiple selling price with exchange rate.  -> all current total, invoice, sub total amounts and etc will multiply with exchange rate if found it is by region.  2/27/2012 4:16:21 PM Andy- Add set last update, cancel_by and reason for invoice,cn,dn and adju when recall monthly report.3/26/2012 2:57:43 PM Justin- Added to pickup price type to update into ci and ci_items.4/2/2012 12:22:25 PM Andy- Add last update column in table "tmp_consignment_report" so it will auto delete those data which key in at 1 month ago.- Add column "Open Qty" and "Open Amt" at summary panel.- Change if it is calling to "save" function, no need load branch data. use to slightly increase performance.4/24/2012 3:59:31 PM Alex- add get extra adjustment items- get new extra items when the monthly report is not confirmed30/8/2012 4:37:42PM Drkoay- Add 4 customize column. if $config.monthly_report_additional_qty_sold=1- add new function save_column()- Update function load_table(),save_to_invoice()11/23/2012 2:17:00 PM Fithri- after monthly report has been printed, user cannot do further edit (reject, approval or submit) on that month - for consignment only1/25/2013 5:33 PM Justin- Bug fixed on wrongly explode different ID list.5/29/2014 1:30 PM Andy- Change Consignment Monthly Report to only check for privilege CON_MONTHLY_REPORT.1/17/2015 11:23 AM Justin- Enhanced to have GST calculation.4/17/2015 11:21 AM Justin- Enhanced to always pickup selling price exclude GST.- Enhanced to deduct GST while found price change for SKU items that is exclusive tax.4/20/2015 1:57 PM Justin- Enhanced to pickup price include GST for loading extra items.4/21/2015 3:34 PM Justin- Bug fixed on taking wrong GST ID.5/7/2015 2:45 PM Justin- Bug fixed on selling price for new items that came from GRN will become exclusive GST.5/8/2015 11:18 AM Andy- Enhanced to generate all price type items into single invoice if found config "consignment_monthly_report_no_split_inv".- Change to generate Lost qty to consignment invoice.- Fix wrong cost price when got foreign currency and gst.5/8/2015 2:20 PM Justin- Enhanced to always pickup GST selling price if found GRN have it.5/13/2015 3:43 PM Andy- Change the generated invoice selling price to be the sku selling price inclusive tax- Change not to calculate gst if the items gst is not set.5/14/2015 1:51 PM Andy- Enhanced to have display cost price feature.- Enhanced to check branch foreign or designated areas.5/15/2015 5:11 PM Andy- Fix Lost Invoice no display cost price feature.6/9/2015 1:54 PM Andy- Enhanced to have display cost price feature for CN/DN.4/19/2017 1:54 PM Khausalya - Enhanced changes from RM to use config setting. 1/9/2020 4:18 PM William- Enhanced to insert id manually for adjustment tables that uses auto increment.*/include("include/common.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('CON_MONTHLY_REPORT')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'CON_MONTHLY_REPORT', BRANCH_CODE), "/index.php");include('consignment.include.php');include('consignment_invoice.include.php');ini_set('memory_limit','256M');ini_set('display_error',1);$items_cost = array();$pagesize = 10;$years = array(date('Y')+1, date('Y'), date('Y')-1);$smarty->assign('years',$years);if($_REQUEST['a']!='save'){	load_branch();	load_branch_group();}if(BRANCH_CODE != 'HQ') $_REQUEST['branch'] = $sessioninfo['branch_id'];$smarty->assign("PAGE_TITLE", "Monthly Report");if (isset($_REQUEST['a'])){	switch ($_REQUEST['a'])	{		case 'load_table':		    clear_tmp_table();		    load_table();		    $smarty->display("consignment.monthly_report.tpl");		    exit;		case 'ajax_load_table':		    load_table(false);		    exit;        case 'save_column':          save_column();          exit;        break;		case 'save':		    save();		    exit;		case 'real_save':		    real_save();		    exit;		case 'save_to_invoice':		    real_save(false);		    save_to_invoice();		    exit;		case 'check_submit_status':		    check_submit_status();		    exit;		case 'invoice_recall':		    invoice_recall();		    exit;		case 'print_draft':		    print_draft();		    exit;		case 'ajax_list_sel':		    ajax_list_sel();		    exit;		case 'delete_table':		    delete_table();		    exit;		case 'ajax_search_sku_page':		    ajax_search_sku_page();		    exit;		default:			print "<h3>Unhandled Request</h3>";			print_r($_REQUEST);			exit;	}}clear_old_tmp_data();$smarty->display("consignment.monthly_report.main.tpl");function load_table($sqlonly=true){	global $con, $smarty, $pagesize, $months, $sessioninfo, $config;	    $branch_id = intval($_REQUEST['branch']);	$month = intval($_REQUEST['month']);	$year = intval($_REQUEST['year']);	$page_num = isset($_REQUEST['page_num']) ? intval($_REQUEST['page_num']) : 1;		$from_Date = $year.'-'.$month.'-1';	$to_Date = $year.'-'.$month.'-'.get_last_day_of_month($month,$year);		$day_in_month = get_last_day_of_month($month,$year);	// get current branch info	$con->sql_query("select * from branch where code=".ms(BRANCH_CODE)) or die(mysql_error());	$branch = $con->sql_fetchassoc();	$con->sql_freeresult();	$smarty->assign('branch',$branch);		// get selected branch info    $con->sql_query("select * from branch where id=$branch_id") or die(mysql_error());	$branch2 = $con->sql_fetchassoc();	$smarty->assign('to_branch', $branch2);	$subtitle_m = $branch2['description'];	$smarty->assign('subtitle_m',$subtitle_m);        // check whether got use currency	if($branch2['region'] && $config['masterfile_branch_region'] && $config['consignment_multiple_currency']){		$currency_info = $config['masterfile_branch_region'][$branch2['region']];		if($currency_info['currency'] && $currency_info['currency'] != $config["arms_currency"]["symbol"]){			$con->sql_query("select exchange_rate from consignment_forex where currency_code=".ms($currency_info['currency']));			$currency_info['exchange_rate'] = $con->sql_fetchfield(0);			$con->sql_freeresult();						if($currency_info['exchange_rate']<=0)	unset($currency_info);		}	}		//check if current month had confirmed	    $con->sql_query("select * from monthly_report_list where branch_id=$branch_id and year=$year and month=$month");    $form = $con->sql_fetchassoc();    $con->sql_freeresult();    	if ($sqlonly){		//if not confirmed yet, get new items		if ($form['status']==0){		    load_new_table_item('grn');		    load_new_table_item('adj');		}    	}      if(isset($config['monthly_report_additional_qty_sold']) && $config['monthly_report_additional_qty_sold'] && $form['additional_column']!=""){      $additional_column=unserialize($form['additional_column']);      $smarty->assign('additional_column',$additional_column);          }      // get page and sku info	$sql = "select cr.*,description from consignment_report_sku cr left join sku_items on cr.sku_item_id=sku_items.id where cr.year=$year and cr.month=$month and cr.branch_id=$branch_id and cr.page_num=$page_num order by page_num,row_num";	//print $sql;	$con->sql_query($sql) or die(mysql_error());		if($con->sql_numrows()>0){	    $sku_item_id_list = array();		while($r = $con->sql_fetchassoc()){			//$table[$r['page_num']][$r['row_num']] = $r;			if($config['ci_use_split_artno']){                list($r['artno_code'],$r['artno_size']) = preg_split("/\s+/",$r['art_no'],2);			}									$table[$r['sku_item_id']] = $r;			$page_array[$r['page_num']] = 1;			$sku_item_id_list[] = $r['sku_item_id'];		}	}    $con->sql_freeresult();    if(!$sku_item_id_list)  return;        // get consignmnet report data    $report_data = load_report($branch_id,$month,$year,$sku_item_id_list);        // get page latest grn	get_grn($branch_id,$month,$year,$sku_item_id_list,$table);	// get page info	$page_data = load_page_info();	    // get tmp data if it is call by ajax    if(!$sqlonly){		$sql = "select * from tmp_consignment_report where user_id=".mi($sessioninfo['id'])." and branch_id=$branch_id and year=$year and month=$month and sku_item_id in (".join(',',$sku_item_id_list).")";		$con->sql_query($sql) or die(mysql_error());		while($r = $con->sql_fetchassoc()){		    //$report_data[$r['sku_item_id']][$r['day']]['qty'] = $r['qty'];		    $report_data[$r['sku_item_id']] = $r;		    $report_data[$r['sku_item_id']]['total'] = $r['qty'];		}	}else{  // if it is not call by ajax, load page num and report info		if($form['exchange_rate'] == 1) unset($form['exchange_rate']); // if found system using exchange rate=1, means it is in RM		if(!$form){            js_redirect('Invalid Monthly Report', $_SERVER['PHP_SELF']);		}				// retrieve page info - such as which page is which price type        $con->sql_query("select distinct(page_num) from consignment_report_sku where year=$year and month=$month and branch_id=$branch_id") or die(mysql_error());		$page_total = $con->sql_numrows();		$con->sql_freeresult();		// get all user entered data		$q_ri = $con->sql_query("select cr.*,crs.price as default_price from consignment_report crleft join consignment_report_sku crs using(branch_id,year,month,sku_item_id) where year=$year and month=$month and branch_id=$branch_id");		while($r = $con->sql_fetchrow($q_ri)){                   $report_data_all[$r['sku_item_id']] = $r;		}						// checking for report export history		$con->sql_query("select * from consignment_report_export_history where year=$year and month=$month and branch_id=$branch_id and active=1 order by timestamp desc limit 1");		if($con->sql_numrows()>0){			$export_info = $con->sql_fetchassoc();			if($export_info['invoice_list']){                $export_info['invoice_list'] = explode(",",$export_info['invoice_list']);			}			if($export_info['adj_list']){                $export_info['adj_list'] = explode(",",$export_info['adj_list']);			}			if($export_info['lost_list']){                $export_info['lost_list'] = explode(",",$export_info['lost_list']);			}			if($export_info['over_list']){                $export_info['over_list'] = explode(",",$export_info['over_list']);			}			if($export_info['inv_lost_list']){                $export_info['inv_lost_list'] = explode(",",$export_info['inv_lost_list']);			}			//print_r($export_info);						$smarty->assign('export_info',$export_info);		}		$con->sql_freeresult();				// get grand total stock closing		// get whole table of sku		$con->sql_query("select * from consignment_report_sku where branch_id=$branch_id and year=$year and month=$month order by page_num, row_num");		$all_sku_items_id_list = array();		while($r = $con->sql_fetchassoc()){	        $table_all[$r['sku_item_id']] = $r;	        $all_sku_items_id_list[$r['sku_item_id']] = $r['sku_item_id'];		}	    $con->sql_freeresult();		// get whole table entered report data		/*$con->sql_query("select * from consignment_report where branch_id=$branch_id and year=$year and month=$month") or die(mysql_error());		while($r = $con->sql_fetchrow()){			$report_data_all[$r['sku_item_id']] = $r;		}		$con->sql_freeresult();*/				// get whole table grn		get_grn($branch_id,$month,$year,$all_sku_items_id_list,$table_all);		$panel_row_list = array();				if($table_all){			//print_r($page_data);	        foreach($table_all as $sid=>$r){	            //$qty = $report_data_all[$sid]['total'];	            // qty	            $qty = $report_data_all[$sid]['qty'];                $adj = $report_data_all[$sid]['adj'];	            $lost = $report_data_all[$sid]['lost'];	            $over = $report_data_all[$sid]['over'];				$price = $report_data_all[$sid]['price']?$report_data_all[$sid]['price']:$r['price'];				// amt				$amt = $qty*$price;                                                if(isset($config['monthly_report_additional_qty_sold']) && $config['monthly_report_additional_qty_sold']){                                    $qty1 = $report_data_all[$sid]['qty1'];                  $qty2 = $report_data_all[$sid]['qty2'];                  $qty3 = $report_data_all[$sid]['qty3'];                  $qty4 = $report_data_all[$sid]['qty4'];                                    $amt += $qty1*$price;                  $amt += $qty2*$price;                  $amt += $qty3*$price;                  $amt += $qty4*$price;                                    $qty_total=$qty+$qty1+$qty2+$qty3+$qty4;                }                else{                  $qty_total=$qty;                                                }                				$adj_amt = $adj*$price;				$lost_amt = $lost*$price;				$over_amt = $over*$price;								// price type				$price_type = $page_data[$r['page_num']]['discount_code'];								if(!$panel_row_list[$price_type]){					$panel_row_list[$price_type] = array(						'type'=>'price_type',						'label'=>$price_type					);				}								$opening_amt = $r['total_open_qty']*$price;				$r['open_bal'] = $r['total_open_qty']+$r['grn']-$r['qty_out']+$r['adj2'];                                $stock_closing = ($r['open_bal']-$qty_total+$adj-$lost+$over)*$price;								foreach(array($price_type, 'grand_total') as $k){					$report_info[$k]['opening_qty'] += $r['total_open_qty'];					$report_info[$k]['opening_amt'] += $opening_amt;										$report_info[$k]['qty'] += $qty;                    if(isset($config['monthly_report_additional_qty_sold']) && $config['monthly_report_additional_qty_sold']){                      $report_info[$k]['qty1'] += $qty1;                      $report_info[$k]['qty2'] += $qty2;                      $report_info[$k]['qty3'] += $qty3;                      $report_info[$k]['qty4'] += $qty4;                    }		            $report_info[$k]['amt'] += $amt;		            $report_info[$k]['adj'] += $adj;		            $report_info[$k]['adj_amt'] += $adj_amt;		            $report_info[$k]['lost'] += $lost;		            $report_info[$k]['lost_amt'] += $lost_amt;		            $report_info[$k]['over'] += $over;		            $report_info[$k]['over_amt'] += $over_amt;		            					$report_info[$k]['grn'] += $r['grn'];					$report_info[$k]['qty_out'] += $r['qty_out'];					$report_info[$k]['adj2'] += $r['adj2'];							            $report_info[$k]['stock_closing'] += $stock_closing;				}			}		}		$panel_row_list['page_total'] = array('type'=>'page', 'label'=>'Page Total');		$panel_row_list['grand_total'] = array('type'=>'grand', 'label'=>'Grand Total');		//print_r($panel_row_list);		$smarty->assign('panel_row_list', $panel_row_list);		$smarty->assign('form', $form);		$smarty->assign('read_only', ($form['status']==1 || $_REQUEST['read_only']));	}		// calculate report page total (only this page)	if($table){		//print_r($report_data);		foreach($table as $sid=>&$t_r){			$price = $report_data[$sid]['price']?$report_data[$sid]['price']:$t_r['price'];			$amt = $report_data[$sid]['total']*$price;            if(isset($config['monthly_report_additional_qty_sold']) && $config['monthly_report_additional_qty_sold']){              $amt+=$report_data[$sid]['qty1']*$price;              $amt+=$report_data[$sid]['qty2']*$price;              $amt+=$report_data[$sid]['qty3']*$price;              $amt+=$report_data[$sid]['qty4']*$price;                            $qty_total=$report_data[$sid]['total']+$report_data[$sid]['qty1']+$report_data[$sid]['qty2']+$report_data[$sid]['qty3']+$report_data[$sid]['qty4'];            }else{              $qty_total=$report_data[$sid]['total'];            }            			$adj_amt = $report_data[$sid]['adj']*$price;			$lost_amt = $report_data[$sid]['lost']*$price;			$over_amt = $report_data[$sid]['over']*$price;			$opening_amt = $t_r['total_open_qty']*$price;			            $t_r['open_bal'] = $t_r['total_open_qty']+$t_r['grn']-$t_r['qty_out']+$t_r['adj2'];                        $stock_closing = ($t_r['open_bal']-$qty_total+$report_data[$sid]['adj']-$report_data[$sid]['lost']+$report_data[$sid]['over'])*$price;    			$report_info['page_total']['grn'] += $t_r['grn'];			$report_info['page_total']['qty_out'] += $t_r['qty_out'];			$report_info['page_total']['adj2'] += $t_r['adj2'];							$report_info['page_total']['qty'] += $report_data[$sid]['total'];            if(isset($config['monthly_report_additional_qty_sold']) && $config['monthly_report_additional_qty_sold']){              $report_info['page_total']['qty1'] += $report_data[$sid]['qty1'];              $report_info['page_total']['qty2'] += $report_data[$sid]['qty2'];              $report_info['page_total']['qty3'] += $report_data[$sid]['qty3'];              $report_info['page_total']['qty4'] += $report_data[$sid]['qty4'];            }            $report_info['page_total']['amt'] += $amt;            $report_info['page_total']['adj'] += $report_data[$sid]['adj'];            $report_info['page_total']['adj_amt'] += $adj_amt;            $report_info['page_total']['lost'] += $report_data[$sid]['lost'];            $report_info['page_total']['lost_amt'] += $lost_amt;            $report_info['page_total']['over'] += $report_data[$sid]['over'];            $report_info['page_total']['over_amt'] += $over_amt;            $report_info['page_total']['stock_closing'] += $stock_closing;                        $report_info['page_total']['opening_qty'] += $t_r['total_open_qty'];			$report_info['page_total']['opening_amt'] += $opening_amt;		}	}	//echo '<pre>';print_r($report_data);echo '</pre>';		// get page discount code for display	$con->sql_query("select * from consignment_report_page_info where year=$year and month=$month and branch_id=$branch_id and page=$page_num") or die(mysql_error());	$current_page_discount_code = $con->sql_fetchfield('discount_code');	//print "<pre>";	//print_r($table);	//print "</pre>";	//generate subtitle_r	//$sr = "Month Of: ".$months[$month]." $year <br>";	//$sr .= "Promoter's Name: ".$branch['contact_person'];	if($currency_info)	$smarty->assign('currency_info', $currency_info);	$smarty->assign('page_total',$page_total);	$smarty->assign('data',$data);	$smarty->assign('table',$table);	//$smarty->assign('subtitle_r',$sr);	$smarty->assign('day_in_month',$day_in_month);	$smarty->assign('current_page_discount_code',$current_page_discount_code);	$smarty->assign('pagesize',$pagesize);	$smarty->assign('report_info',$report_info);	$smarty->assign('report_data',$report_data);		if(!$sqlonly){        $smarty->display('consignment.monthly_report.page.tpl');	}}function get_last_day_of_month($m,$y){	$days = array('',31,$y%4==0? 29:28,31,30,31,30,31,31,30,31,30,31);	return $days[$m];}function load_report($branch_id,$month,$year,$sku_item_id_list){	global $con,$smarty,$sessioninfo,$config;	if(!$sku_item_id_list)  return;		$sql = "select * from consignment_report where year=".mi($year)." and month=".mi($month)." and branch_id=$branch_id and sku_item_id in (".join(',',$sku_item_id_list).")";	$q_r = $con->sql_query($sql) or die(mysql_error());	while($r = $con->sql_fetchrow($q_r)){		//$report_data[$r['sku_item_id']][$r['day']] = $r;		$r['user_id'] = $sessioninfo['id'];		$report_data[$r['sku_item_id']] = $r;		$report_data[$r['sku_item_id']]['total'] += $r['qty'];                  $q_in = $con->sql_query("insert IGNORE into tmp_consignment_report ".mysql_insert_by_field($r,array('user_id','branch_id','sku_item_id','year','month','qty','qty1','qty2','qty3','qty4','price','adj','lost','over')));    }		$smarty->assign('report_data',$report_data);	return $report_data;}function save(){	global $con,$sessioninfo;		$branch_id = intval($_REQUEST['branch_id']);	$sku_item_id = intval($_REQUEST['sku_item_id']);	$year = intval($_REQUEST['year']);	$month = intval($_REQUEST['month']);	$value = $_REQUEST['value'];	$type = $_REQUEST['type'];		if($type=='price')  $value = floatval($value);	else    $value = intval($value);	//$date = $year."-".$month."-".$day;		$upd = array();	$upd['user_id'] = $sessioninfo['id'];	$upd['branch_id'] = $branch_id;	$upd['sku_item_id'] = $sku_item_id;	$upd['year'] = $year;	$upd['month'] = $month;	$upd['last_update'] = 'CURRENT_TIMESTAMP';	$upd[$type] = $value;		$sql = "insert into tmp_consignment_report ".mysql_insert_by_field($upd)."ON DUPLICATE KEY UPDATE $type=$value , last_update=now()";	$con->sql_query($sql);	//$con->sql_query("replace into tmp_consignment_report ".mysql_insert_by_field($upd)) or die(mysql_error());	if($value==0) print "";	else{        if($type=='price')  print number_format($value,2);		else    print number_format($value);	}	}function save_column(){  global $con,$sessioninfo;    $branch_id = intval($_REQUEST['branch_id']);  $year = intval($_REQUEST['year']);  $month = intval($_REQUEST['month']);  $value = $_REQUEST['value'];  $key = $_REQUEST['key'];      $con->sql_query("select * from monthly_report_list where branch_id=$branch_id and year=$year and month=$month");  $form = $con->sql_fetchassoc();  $con->sql_freeresult();      $additional_column=array();  if($form['additional_column']!=""){    $additional_column=unserialize($form['additional_column']);  }  $additional_column[$key]=$value;    $con->sql_query("update monthly_report_list set additional_column  = ".sz($additional_column)." where branch_id = ".mi($branch_id)." and year = ".mi($year)." and month = ".mi($month));    print $value;}function real_save($response=true){    global $con,$sessioninfo;    $sql = "select branch_id,sku_item_id,year,month,qty,qty1,qty2,qty3,qty4,price,adj,lost,over from tmp_consignment_report where user_id=".mi($sessioninfo['id']);    $q_tmp = $con->sql_query($sql) or die(mysql_error());    while($r = $con->sql_fetchrow($q_tmp)){        $sql = "replace into consignment_report ".mysql_insert_by_field($r,array('branch_id','sku_item_id','year','month','qty','qty1','qty2','qty3','qty4','price','adj','lost','over'));        $con->sql_query($sql) or die(mysql_error());	}	    //clear_tmp_table();    if($response){		$branch_id = $_REQUEST['branch_id'];		$year = $_REQUEST['year'];		$month = $_REQUEST['month'];		$exchange_rate = $_REQUEST['exchange_rate'];               $con->sql_query("update monthly_report_list set last_update = CURRENT_TIMESTAMP where branch_id = ".mi($branch_id)." and year = ".mi($year)." and month = ".mi($month));        		if($exchange_rate && $exchange_rate != 1){			$con->sql_query("update monthly_report_list set exchange_rate = ".mf($exchange_rate)." where branch_id = ".mi($branch_id)." and year = ".mi($year)." and month = ".mi($month));		}		print "OK";	}}function clear_tmp_table(){	global $con,$sessioninfo;	$branch_id = intval($_REQUEST['branch']);	$month = intval($_REQUEST['month']);	$year = intval($_REQUEST['year']);		$con->sql_query("delete from tmp_consignment_report where user_id=".mi($sessioninfo['id'])." and branch_id=$branch_id and year=$year and month=$month");}function save_to_invoice(){	global $con, $LANG, $smarty, $sessioninfo,$config,$gst_list;	$branch_id = intval($_REQUEST['branch_id']);	$year = intval($_REQUEST['year']);	$month = intval($_REQUEST['month']);	$exchange_rate = $_REQUEST['exchange_rate'];	//VALIDATE DATA	$errm = array();	    if(isset($config['monthly_report_additional_qty_sold']) && $config['monthly_report_additional_qty_sold']){          $qtys=array('qty','qty1','qty2','qty3','qty4');            $con->sql_query("select * from monthly_report_list where branch_id=$branch_id and year=$year and month=$month");      $mrl = $con->sql_fetchassoc();      if($mrl['additional_column']!="") $additional_column=unserialize($mrl['additional_column']);      $con->sql_freeresult();    }    else{      $qtys=array('qty');    }        // get all items	$sql = "select cr.sku_item_id,sum(cr.qty) as qty,sum(cr.qty1) as qty1,sum(cr.qty2) as qty2,sum(cr.qty3) as qty3,sum(cr.qty4) as qty4,crs.art_no,if(cr.price,cr.price,crs.price) as price,sku_id,cr.adj,cr.lost,cr.over,if(cr.price,1,0) as price_need_update,page_num,crpi.discount_code,sic.qty as sb1,sic2.qty as sb2from consignment_report crleft join consignment_report_sku crs on crs.branch_id=cr.branch_id and crs.year=cr.year and crs.month=cr.month and crs.sku_item_id=cr.sku_item_idleft join sku_items on cr.sku_item_id=sku_items.idleft join sku on sku_items.sku_id=sku.idleft join consignment_report_page_info crpi on crpi.year=crs.year and crpi.month=crs.month and crpi.branch_id=crs.branch_id and crpi.page=crs.page_numleft join sku_items_cost sic on sic.branch_id=$sessioninfo[branch_id] and sic.sku_item_id=cr.sku_item_idleft join sku_items_cost sic2 on sic2.branch_id=$branch_id and sic2.sku_item_id=cr.sku_item_idwhere cr.branch_id=$branch_id and cr.year=$year and cr.month=$month group by cr.sku_item_id order by crs.page_num, crs.row_num";	//print $sql;exit;	$q_ci_items = $con->sql_query($sql) or die(mysql_error());		if($con->sql_numrows($q_ci_items)<=0)  $errm[] = sprintf($LANG['CI_EMPTY']);	$sku_items_id_list = array();		while($r=$con->sql_fetchrow($q_ci_items)){	    //$discount_code = $r['trade_discount_code'] ? $r['trade_discount_code'] : $r['default_trade_discount_code'];	    if(strpos($r['discount_code'], 'extra,')===false){            $discount_code = $r['discount_code'];		}else{            list($dummy,$discount_code) = explode(",",$r['discount_code']);		}		$r['discount_code'] = $discount_code;		        foreach($qtys as $q){                  if($r[$q]){              $pcs = $r[$q];              if($exchange_rate && $exchange_rate != 1){                  $amt = $r[$q]*$r['price']*$exchange_rate;                  $foreign_amt = $r[$q]*$r['price'];              }else $amt = $r[$q]*$r['price'];          }else{              $pcs = 0;              $amt = 0;          }                    $total[$discount_code][$q]['total_pcs'] += $pcs;          $total[$discount_code][$q]['total_amount'] += $amt;          $total[$discount_code][$q]['total_foreign_amount'] += $foreign_amt;                }        	    $items[$discount_code][] = $r;	    $all_items[$r['sku_item_id']] = $r;		if(!in_array($r['sku_item_id'],$sku_items_id_list)){            $sku_items_id_list[] = $r['sku_item_id'];		}	}	 	$day = get_last_day_of_month($month,$year);	$form['ci_date']= $year."-".$month."-".$day;    // get discount percent    $q_dp = $con->sql_query("select bt.*,tdt.code,tdt.description from branch_trade_discount btleft join trade_discount_type tdt on tdt.id=bt.trade_discount_id where bt.branch_id=$branch_id") or die(mysql_error());    $discount_info = array();    // $discount_info[code] = value    while($r = $con->sql_fetchrow($q_dp)){        $discount_info[$r['code']] = $r['value'];        $discount_remark[$r['code']] = $r['description'];	}	    if(!$discount_remark){      $q_dp = $con->sql_query("select * from trade_discount_type") or die(mysql_error());      while($r = $con->sql_fetchrow($q_dp)){        $discount_remark[$r['code']] = $r['description'];      }    }    	//echo '<pre>';print_r($items);echo '</pre>';    //echo '<pre>';print_r($total);echo '</pre>';    //exit;    	$form['status'] = 0;	//if ($last_approval) $form['approved'] = 1;	$form['branch_id']=$sessioninfo['branch_id'];	$form['last_update'] = 'CURRENT_TIMESTAMP';	$form['added'] = 'CURRENT_TIMESTAMP';	$form['user_id'] = $sessioninfo['id'];	$form['ci_branch_id']=$branch_id;	$form['type'] = 'sales';		if($config['enable_gst'] && $form['ci_date']) $form['is_under_gst'] = check_gst_status(array('date'=>$form['ci_date'], 'branch_id'=>$form['branch_id']));	    $invoice_id_list = array();	$price_type_count = count($items);	//print_r($items);exit;    	if($form['is_under_gst']){		construct_gst_list();				$q2 = $con->sql_query("select is_export from branch where id = $branch_id and is_export>0");		$export_info = $con->sql_fetchassoc($q2);		$con->sql_freeresult($q2);				if($export_info['is_export']>0){			$export_gst = get_export_type_gst($export_info['is_export']);		}	}        	foreach($qtys as $q){		foreach($items as $discount_code=>$item_collection){			$discount_percent = $discount_info[$discount_code];			list($disc1, $disc2) = explode("+", $discount_percent);			$no_split = $config['consignment_monthly_report_no_split_inv'];			if($q != 'qty')	$no_split = 0;	// if is qty1/qty2, always split						$temp_disc_amt = $temp_foreign_disc_amt = $discount_amount = $foreign_discount_amount = 0;			if(isset($total[$discount_code][$q]['total_pcs']) && $total[$discount_code][$q]['total_pcs']>0){				if($q!='qty' && $additional_column[$q.'_sold']=="") continue;							if(!$no_split){					$form['show_per'] = 0;					// need to split by trade discount code					$form['remark'] = $discount_remark[$discount_code].(($additional_column[$q.'_sold'])?" - ".$additional_column[$q.'_sold']:"");					$form['total_pcs'] = $total[$discount_code][$q]['total_pcs'];					$form['sub_total_amt'] = $total[$discount_code][$q]['total_amount'];					$form['sub_total_foreign_amt'] = $total[$discount_code][$q]['total_foreign_amount'];										// calculate discount base on discount code					if($disc1){						$temp_disc_amt = $total[$discount_code][$q]['total_amount']*($disc1*0.01);						$total[$discount_code][$q]['total_amount'] -= $temp_disc_amt;						$discount_amount += $temp_disc_amt;						if($total[$discount_code][$q]['total_foreign_amount']){							$temp_foreign_disc_amt = $total[$discount_code][$q]['total_foreign_amount']*($disc1*0.01);							$total[$discount_code][$q]['total_foreign_amount'] -= $temp_foreign_disc_amt;							$foreign_discount_amount += $temp_foreign_disc_amt;						}					}					if($disc2){						$temp_disc_amt = $total[$discount_code][$q]['total_amount']*($disc2*0.01);						$total[$discount_code][$q]['total_amount'] -= $temp_disc_amt;						$discount_amount += $temp_disc_amt;						if($total[$discount_code][$q]['total_foreign_amount']){							$temp_foreign_disc_amt = $total[$discount_code][$q]['total_foreign_amount']*($disc2*0.01);							$total[$discount_code][$q]['total_foreign_amount'] -= $temp_foreign_disc_amt;							$foreign_discount_amount += $temp_foreign_disc_amt;						}					}										$form['discount_percent'] = $discount_percent;					$form['discount_amount'] = $discount_amount;					$form['foreign_discount_amount'] = $foreign_discount_amount;										$form['total_amount'] = $total[$discount_code][$q]['total_amount'];					$form['total_foreign_amount'] = $total[$discount_code][$q]['total_foreign_amount'];				}else{					// no split					$form['show_per'] = 1;					$form['total_pcs'] += $total[$discount_code][$q]['total_pcs'];					$form['sub_total_amt'] += $total[$discount_code][$q]['total_amount'];					$form['sub_total_foreign_amt'] += $total[$discount_code][$q]['total_foreign_amount'];										$form['total_amount'] += $total[$discount_code][$q]['total_amount'];					$form['total_foreign_amount'] += $total[$discount_code][$q]['total_foreign_amount'];				}            				if(!$form['total_pcs']) continue;								$form['exchange_rate'] = $exchange_rate;								if(!$no_split){					$form['sheet_price_type'] = $discount_code;				}												$form['mr_branch_id'] = $branch_id;				$form['mr_month'] = $month;				$form['mr_year'] = $year;								if(!$no_split || ($no_split && !$form['id'])){					unset($form['id']);					$con->sql_query("insert into ci " . mysql_insert_by_field($form));					$form['id'] = $con->sql_nextid();					if($last_approval)	$ci_no=assign_ci_no($form['id'], $form['branch_id']);										$invoice_id_list[] = $form['id'];				}								foreach($item_collection as $r){					if(!$r[$q]) continue;										$upd = array();					$upd['ci_id']=$form['id'];					$upd['branch_id']=$sessioninfo['branch_id'];					$upd['sku_item_id']=$r['sku_item_id'];					$upd['artno_mcode']=$r['art_no'];					if($exchange_rate && $exchange_rate != 1){						$upd['cost_price']=$r['price']*$exchange_rate;						$upd['foreign_cost_price']=$r['price'];					}else $upd['cost_price']=$r['price'];					$upd['selling_price']=$r['price'];					//$upd['uom_id']=$r['uom_id'];					//$upd['ctn']=$r['ctn'];					$upd['pcs']=$r[$q];					$upd['stock_balance'] = $r['sb2'];					$upd['price_type'] = $discount_code;					//$upd['ctn_allocation']=$r['ctn_allocation'];					//$upd['pcs_allocation']=$r['pcs_allocation'];					//$upd['selling_price_allocation']=$r['selling_price_allocation'];					//print_r($upd);										// need to put discount into item row					if($no_split){						$upd['discount'] = $discount_percent;											}					if($form['is_under_gst']){												// get sku is inclusive						$is_sku_inclusive = get_sku_gst("inclusive_tax", $r['sku_item_id']);												if($is_sku_inclusive == 'yes')	$upd['display_cost_price_is_inclusive'] = 1;						$upd['display_cost_price'] = $upd['cost_price'];								// get sku original output gst						if($export_gst){							$upd['gst_id'] = $export_gst['id'];							$upd['gst_code'] = $export_gst['code'];							$upd['gst_rate'] = $export_gst['rate'];						}else{							$gst_info = get_sku_gst("output_tax", $r['sku_item_id']);													if($gst_info){								$upd['gst_id'] = $gst_info['id'];								$upd['gst_code'] = $gst_info['code'];								$upd['gst_rate'] = $gst_info['rate'];							}/*else{ // pre load gst id, code and rate if not found								$upd['gst_id'] = $gst_list[0]['id'];								$upd['gst_code'] = $gst_list[0]['code'];								$upd['gst_rate'] = $gst_list[0]['rate'];							}*/						}																	//if($is_sku_inclusive == 'yes'){						// is inclusive tax						// find the price before tax						$gst_tax_price = 0;						if($upd['gst_rate']>0){							$gst_tax_price = $upd['selling_price'] / ($upd['gst_rate']+100) * $upd['gst_rate'];							$upd['cost_price'] = $upd['selling_price'] - $gst_tax_price;						}												if($exchange_rate && $exchange_rate != 1){							if(!$upd['display_cost_price_is_inclusive']){								$gst_tax_price = $r['price'] / ($upd['gst_rate']+100) * $upd['gst_rate'];								$upd['foreign_cost_price']= $r['price'] -= $gst_tax_price;							}							$upd['cost_price'] = $upd['foreign_cost_price']*$exchange_rate;						}						//}					}									$con->sql_query("insert into ci_items ".mysql_insert_by_field($upd)) or die(mysql_error());				}								// do recalculate for GST amount				recalculate_ci_gst_amount($form['id'], $form['branch_id']);						/*if ($is_confirm){					log_br($sessioninfo['id'], 'Consignment Invoice', $form['id'], "Consignment Invoice Confirmed (ID#$form[id], Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:$form[total_amount])");					if ($last_approval)						ci_approval($form['id'], $branch_id, $form['status'], true);					else						$con->sql_query("update branch_approval_history set ref_id=$form[id] where id=$form[approval_history_id] and branch_id = $sessioninfo[branch_id]");				}				else*/				log_br($sessioninfo['id'], 'Consignment Invoice', $form['id'], "Consignment Invoice Saved (ID#$form[id], Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:$form[total_amount])");			}        }	}	    	// insert into consignment_report_export_history	$upd = array();	$upd['branch_id'] = $branch_id;	$upd['year'] = intval($_REQUEST['year']);	$upd['month'] = intval($_REQUEST['month']);	$upd['date'] = date('Y-m-d');	$upd['timestamp'] = 'CURRENT_TIMESTAMP';	$upd['user_id'] = $sessioninfo['id'];	$upd['invoice_list'] = join(',',$invoice_id_list);	$con->sql_query("insert into consignment_report_export_history ".mysql_insert_by_field($upd)) or die(mysql_error());	$export_id = $con->sql_nextid();		// save to adjustment	$adj_list = save_to_adj($total,$all_items,$form['ci_date'],$discount_info,$sku_items_id_list,$exchange_rate);	$lost_list = save_to_lost($total,$items,$all_items,$form['ci_date'],$discount_info,$sku_items_id_list,$exchange_rate);	$over_list = save_to_over($total,$items,$all_items,$form['ci_date'],$discount_info,$sku_items_id_list,$exchange_rate);  /*if($adj_list)	$con->sql_query("update consignment_report_export_history set adj_list=".ms(join(',',$adj_list))." where id=$export_id");		if($lost_list)	$con->sql_query("update consignment_report_export_history set lost_list=".ms(join(',',$lost_list))." where id=$export_id");*/		$creh = array();	if($adj_list) $creh['adj_list'] = join(',',$adj_list);	//if($lost_list) $creh['lost_list'] = join(',',$lost_list);	if($lost_list) $creh['inv_lost_list'] = join(',',$lost_list);	if($over_list) $creh['over_list'] = join(',',$over_list);	if($creh){		$con->sql_query("update consignment_report_export_history set ".mysql_update_by_field($creh)." where id=$export_id");	}		// save log	log_br($sessioninfo['id'], 'Consignment Report', $branch_id, "Consignment Monthly Report Confirm (Branch ID: $branch_id, Year: $year, Month: $month)");	// update items cost changed=1  	update_item_cost($sku_items_id_list,$all_items,$form['ci_date']);        // update status to 1 (marked as confirmed)    $con->sql_query("update monthly_report_list set status=1,last_update=now(), exchange_rate=".mf($exchange_rate)." where branch_id=$branch_id and year=$year and month=$month");	//header("Location: /consignment_invoice.php?t=$form[a]&save_id=$form[id]");	header("Location: /consignment.monthly_report.php?a=load_table&branch=$branch_id&year=$year&month=$month&submits=1");	exit;}function check_submit_status(){	global $con;	$branch_id = intval($_REQUEST['branch_id']);	$year = intval($_REQUEST['year']);	$month = intval($_REQUEST['month']);	$sql = "select * from consignment_report_export_history where branch_id=$branch_id and year=$year and month=$month limit 1";	$con->sql_query($sql) or die(mysql_error());	if($con->sql_numrows()>0){		return false;	}	print "OK";}function load_page_info(){	global $con,$smarty;	$branch_id = intval($_REQUEST['branch']);	$month = intval($_REQUEST['month']);	$year = intval($_REQUEST['year']);		$q_pinfo = $con->sql_query("select * from consignment_report_page_info where branch_id=$branch_id and year=$year and month=$month order by page") or die(mysql_error());	while($r = $con->sql_fetchrow($q_pinfo)){		$page_data[$r['page']] = $r;	}	//print_r($page_data);	$smarty->assign('page_data',$page_data);	return $page_data;}function save_to_adj($total,$items,$date,$discount_info,$sku_items_id_list,$exchange_rate){	global $con, $smarty,$LANG, $sessioninfo, $items_cost, $appCore;	$branch_id = intval($_REQUEST['branch_id']);		$form = array();		$form['adjustment_date'] = $date;	$form['branch_id'] = $branch_id;	$form['mr_branch_id'] = $branch_id;	$form['mr_month'] = $_REQUEST['month'];	$form['mr_year'] = $_REQUEST['year'];		//$astat = check_and_create_branch_approval('ADJUSTMENT',$branch_id, 'ADJUSTMENT');	// use branch id = 1 , HQ	/*$astat = check_and_create_branch_approval('ADJUSTMENT',1, 'ADJUSTMENT');		if (!$astat){		$errm['top'][] = $LANG['ADJUSTMENT_NO_APPROVAL_FLOW'];	}	else{		$form['approval_history_id'] = $astat[0];		if ($astat[1] == '|') $last_approval = true;	} if($errm){		print_r($errm);		print "Error:";		exit;	}*/		//$form['status'] = 1;	$form['status'] = 0;	$form['approved'] = 0;		$form['branch_id'] =$branch_id;	$form['user_id'] = $sessioninfo['id'];	$form['added'] = 'CURRENT_TIMESTAMP';	$form['last_update'] = 'CURRENT_TIMESTAMP';	$form['adjustment_type'] = 'Monthly Report Adjustment';		if(!$sku_items_id_list) return;		// get items cost	$sql = "select distinct sh.branch_id,sku_item_id,(select max(sh2.date) from sku_items_cost_history sh2 where sh.branch_id=sh2.branch_id and sh.sku_item_id=sh2.sku_item_id) as last_date,(select grn_cost from sku_items_cost_history sh3 where sh.branch_id=sh3.branch_id and sh.sku_item_id=sh3.sku_item_id and sh3.date=last_date) costfrom sku_items_cost_history sh where sh.sku_item_id in (".join(',',$sku_items_id_list).") and branch_id=$branch_id";	$q_c = $con->sql_query($sql);	while($r = $con->sql_fetchrow($q_c)){		$items_cost[$r['sku_item_id']] = $r['cost'];	}	$con->sql_freeresult($q_c);		// get items by department	$sql = "select si.*,sku.category_id,category.department_id from sku_items sileft join sku on si.sku_id=sku.idleft join category on sku.category_id=category.idwhere si.id in (".join(',',$sku_items_id_list).")";	$q_i = $con->sql_query($sql);		while($r = $con->sql_fetchrow($q_i)){	    //print_r($items);	    	    if(!$items[$r['id']]['adj'])    continue;		$dept_items[$r['department_id']][] = $r;	}	$adj_list = array();	if(!$dept_items)    return;		foreach($dept_items as $dept_id=>$di){		// create approval id		/*$astat = check_and_create_branch_approval('ADJUSTMENT',$branch_id, 'ADJUSTMENT');		if (!$astat){			$errm['top'][] = $LANG['ADJUSTMENT_NO_APPROVAL_FLOW'];		}		else{			$form['approval_history_id'] = $astat[0];			if ($astat[1] == '|') $last_approval = true;		}				if($errm){			print_r($errm);			print "Error:";			exit;		}		if ($last_approval) $form['approved'] = 1;		else $form['approved'] = 0;			*/		/////////////////////			    $header = $form;		$header['id'] = $appCore->generateNewID("adjustment","branch_id=".mi($branch_id));        $header['dept_id'] = mi($dept_id);                // insert into adjustment header        $con->sql_query("insert into adjustment ".mysql_insert_by_field($header));        $adj_id = $header['id'];                foreach($di as $r){            $upd = array();            $upd['id'] = $appCore->generateNewID("adjustment_items","branch_id=".mi($branch_id));            $upd['adjustment_id'] = $adj_id;            $upd['branch_id'] = $branch_id;            $upd['user_id'] = $sessioninfo['id'];            $upd['sku_item_id'] = $r['id'];            $upd['qty'] = $items[$r['id']]['adj'];            $upd['cost'] = $items_cost[$r['id']];			if($exchange_rate && $exchange_rate != 1) $upd['selling_price'] = $items[$r['id']]['price']*$exchange_rate;			else $upd['selling_price'] = $items[$r['id']]['price'];            $upd['stock_balance'] = $r['sb2'];                        $con->sql_query("insert into adjustment_items ".mysql_insert_by_field($upd));		}		$adj_list[] = $adj_id;	}		return $adj_list;}/*function save_to_lost($total,$items,$all_items,$date,$discount_info,$sku_items_id_list){	global $con, $smarty,$LANG, $sessioninfo;	$branch_id = intval($_REQUEST['branch_id']);		$form = array();	//$form['status'] = 1;	$form['status'] = 0;	$form['branch_id']=$sessioninfo['branch_id'];	$form['last_update'] = 'CURRENT_TIMESTAMP';	$form['added'] = 'CURRENT_TIMESTAMP';	$form['user_id'] = $sessioninfo['id'];	$form['ci_branch_id']=$branch_id;	$form['type'] = 'lost';	$form['ci_date']= $date;	$form['remark'] = '*** Being Goods Lost ***';	    // insert header	if(!$items) return;	foreach($items as $discount_code=>$item_collection){        $discount_percent = $discount_info[$discount_code];		//$form['total_pcs'] += $total[$discount_code]['total_pcs'];		foreach($item_collection as $r){		    if(!$r['lost'])  continue;			$form['total_pcs'] += $r['lost'];						$discount_amt = $r['price']*($discount_percent*0.01);			$amt = ($r['price'] - $discount_amt)*$r['lost'];						$form['total_amount'] += $amt;		}	}		if(!$form['total_pcs']) return;		// get con_lost_ci_discount	$con->sql_query("select con_lost_ci_discount from branch where id=$branch_id");	$con_lost_ci_discount = $con->sql_fetchfield(0);		if($con_lost_ci_discount){        $discount_amount = $form['total_amount']*($con_lost_ci_discount*0.01);        $form['total_amount'] -= $discount_amount;        $form['discount_percent'] = $con_lost_ci_discount;        $form['discount_amount'] = $discount_amount;	}		$con->sql_query("insert into ci " . mysql_insert_by_field($form, array('branch_id', 'user_id', 'dept_id', 'status', 'approved', 'ci_date', 'added', 'deliver_branch','total_pcs', 'total_ctn', 'total_amount', 'remark','approval_history_id', 'ci_branch_id', 'open_info','price_indicate','discount_percent','discount_amount','type')));	$form['id'] = $con->sql_nextid();	$lost_id[] = $form['id'];		if ($is_confirm){        log_br($sessioninfo['id'], 'Consignment Lost Invoice', $form['id'], "Consignment Invoice Confirmed (ID#$form[id], Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:$form[total_amount])");	    if ($last_approval)	    	ci_approval($form['id'], $branch_id, $form['status'], true);		else			$con->sql_query("update branch_approval_history set ref_id=$form[id] where id=$form[approval_history_id] and branch_id = $sessioninfo[branch_id]");	}	else        log_br($sessioninfo['id'], 'Consignment Lost Invoice', $form['id'], "Consignment Invoice Saved (ID#$form[id], Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:$form[total_amount])");                	// insert items    foreach($items as $discount_code=>$item_collection){        $discount_percent = $discount_info[$discount_code];		foreach($item_collection as $r){		    $upd = array();		    if(!$r['lost'])  continue;		    			$upd['ci_id']=$form['id'];			$upd['branch_id']=$sessioninfo['branch_id'];			$upd['sku_item_id']=$r['sku_item_id'];			$upd['artno_mcode']=$r['art_no'];			$upd['cost_price']=$r['price'];			$upd['selling_price']=$r['price'];			$upd['pcs']=$r['lost'];			$upd['discount'] = $discount_percent;						$con->sql_query("insert into ci_items ".mysql_insert_by_field($upd)) or die(mysql_error());		}	}	return $lost_id;}*/function save_to_lost($total,$items,$all_items,$date,$discount_info,$sku_items_id_list,$exchange_rate){	global $con, $smarty,$LANG, $sessioninfo, $config, $gst_list;	$branch_id = intval($_REQUEST['branch_id']);	$form = array();	$form['status'] = 0;	$form['branch_id']=$sessioninfo['branch_id'];	$form['last_update'] = 'CURRENT_TIMESTAMP';	$form['added'] = 'CURRENT_TIMESTAMP';	$form['user_id'] = $sessioninfo['id'];	//$form['to_branch_id']=$branch_id;	$form['ci_branch_id']=$branch_id;	//$form['date']= $date;	$form['ci_date']= $date;	$form['remark'] = '*** Being Goods Lost ***';	$form['exchange_rate'] = $exchange_rate;		$form['mr_branch_id'] = $branch_id;	$form['mr_month'] = $_REQUEST['month'];	$form['mr_year'] = $_REQUEST['year'];	$form['is_for_lost'] = 1;	$form['show_per'] = 1;	    // insert header	if(!$items) return;	foreach($items as $discount_code=>$item_collection){        $discount_percent = $discount_info[$discount_code];		list($disc1, $disc2) = explode("+", $discount_percent);		//$form['total_pcs'] += $total[$discount_code]['total_pcs'];		foreach($item_collection as $r){		    if(!$r['lost'])  continue;			$form['total_pcs'] += $r['lost'];			//$form['total_qty'] += $r['lost'];            $row_amt = $row_foreign_amt = $discount_amt = $foreign_discount_amt = $row_discount_amt = $row_foreign_discount_amt = 0;            			/*if($disc1){				$temp_disc_amt = $r['price']*($disc1*0.01);				$discount_amt += $temp_disc_amt;				$r['price'] -= $temp_disc_amt;			}			if($disc2){				$temp_disc_amt = $r['price']*($disc2*0.01);				$discount_amt += $temp_disc_amt;				$r['price'] -= $temp_disc_amt;			}			//$discount_amt = $r['price']*($discount_percent*0.01);			$amt = $r['price']*$r['lost'];			$form['total_amount'] += $amt;*/						if($exchange_rate && $exchange_rate != 1){				$row_amt = mf($r['lost']*$r['price']*$exchange_rate);				$row_foreign_amt = mf($r['lost']*$r['price']);			}else $row_amt = mf($r['lost']*$r['price']);			if($disc1){		        $discount_amt = $row_amt*($disc1/100);		        $row_discount_amt += $discount_amt;		        $row_amt -= $discount_amt;				if($row_foreign_amt){					$foreign_discount_amt = $row_foreign_amt*($disc1/100);					$row_foreign_discount_amt += $foreign_discount_amt;					$row_foreign_amt -= $foreign_discount_amt;				}			}			if($disc2){		        $discount_amt = $row_amt*($disc2/100);		        $row_discount_amt += $discount_amt;		        $row_amt -= $discount_amt;				if($row_foreign_amt){					$foreign_discount_amt = $row_foreign_amt*($disc2/100);					$row_foreign_discount_amt += $foreign_discount_amt;					$row_foreign_amt -= $foreign_discount_amt;				}			}			$row_amt = round($row_amt, 2);	        $form['total_amount'] += $row_amt;	        $form['total_foreign_amount'] += $row_foreign_amt;			//print "<br> += $amt";		}	}	//print_r($form);exit;	if(!$form['total_pcs']) return;	// get con_lost_ci_discount	$con->sql_query("select con_lost_ci_discount from branch where id=$branch_id");	$con_lost_ci_discount = $con->sql_fetchfield(0);	if($con_lost_ci_discount){	    /*list($disc1, $disc2) = explode("+", $con_lost_ci_discount);	    $total_amt = $form['total_amount'];	    $total_foreign_amt = $form['total_foreign_amount'];	    if($disc1){            $temp_disc_amt =  $total_amt*($disc1*0.01);            $total_amt -= $temp_disc_amt;            $discount_amount += $temp_disc_amt;			if($total_foreign_amt){				$temp_foreign_disc_amt =  $total_foreign_amt*($disc1*0.01);				$total_foreign_amt -= $temp_foreign_disc_amt;				$foreign_discount_amount += $temp_foreign_disc_amt;			}		}		if($disc2){            $temp_disc_amt =  $total_amt*($disc2*0.01);            $total_amt -= $temp_disc_amt;            $discount_amount += $temp_disc_amt;			if($total_foreign_amt){				$temp_foreign_disc_amt =  $total_foreign_amt*($disc2*0.01);				$total_foreign_amt -= $temp_foreign_disc_amt;				$foreign_discount_amount += $temp_foreign_disc_amt;			}		}*/        //$discount_amount = $form['total_amount']*($con_lost_ci_discount*0.01);        //$form['total_amount'] -= $discount_amount;        //$form['discount_percent'] = $con_lost_ci_discount;        //$form['discount'] = $con_lost_ci_discount;        $form['discount_percent'] = $con_lost_ci_discount;        //$form['discount_amount'] = $discount_amount;        //$form['foreign_discount_amount'] = $foreign_discount_amount;	}		if($config['enable_gst'] && $form['ci_date']) $form['is_under_gst'] = check_gst_status(array('date'=>$form['ci_date'], 'branch_id'=>$form['branch_id']));	//$con->sql_query("insert into dn " . mysql_insert_by_field($form, array('branch_id', 'user_id', 'status', 'approved', 'date', 'added', 'total_pcs', 'total_ctn', 'total_amount', 'total_foreign_amount', 'remark', 'to_branch_id','discount','discount_amount','foreign_discount_amount', 'last_update','total_qty', 'exchange_rate', 'mr_branch_id', 'mr_month', 'mr_year', 'is_under_gst')));	$con->sql_query("insert into ci " . mysql_insert_by_field($form));	$form['id'] = $con->sql_nextid();	$lost_id[] = $form['id'];		//log_br($sessioninfo['id'], 'DEBIT NOTE', $form['id'], "Credit Note Saved (ID#$form[id], Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:$form[total_amount])");	log_br($sessioninfo['id'], 'Consignment Lost Invoice', $form['id'], "Saved (ID#$form[id], Pcs:$form[total_pcs], Ctn:$form[total_ctn])");	if($form['is_under_gst']){		construct_gst_list();				$q2 = $con->sql_query("select is_export from branch where id = $branch_id and is_export>0");		$export_info = $con->sql_fetchassoc($q2);		$con->sql_freeresult($q2);				if($export_info['is_export']>0){			$export_gst = get_export_type_gst($export_info['is_export']);		}	}		// insert items    foreach($items as $discount_code=>$item_collection){        $discount_percent = $discount_info[$discount_code];        $con->sql_query("select id from trade_discount_type where code=".ms($discount_code));        $price_type_id = $con->sql_fetchfield(0);        list($disc1, $disc2) = explode("+", $discount_percent);        		foreach($item_collection as $r){		    $upd = array();		    $row_amt = $row_foreign_amt = $discount_amt = $foreign_discount_amt = $row_discount_amt = $row_foreign_discount_amt = 0;		    		    if(!$r['lost'])  continue;			//$upd['dn_id']=$form['id'];			$upd['ci_id']=$form['id'];			$upd['branch_id']=$sessioninfo['branch_id'];			$upd['sku_item_id']=$r['sku_item_id'];			//$upd['artno_mcode']=$r['art_no'];			if($exchange_rate && $exchange_rate != 1){				$upd['cost_price']=$r['price']*$exchange_rate;				$upd['foreign_cost_price']=$r['price'];			}else $upd['cost_price']=$r['price'];			$upd['selling_price']=$r['price'];			$upd['pcs']=$r['lost'];			$upd['uom_id'] = 1;			$upd['price_type_id'] = $price_type_id;			$upd['stock_balance'] = $r['sb1'];									$upd['discount'] = $discount_percent;            			if($form['is_under_gst']){				construct_gst_list();				// get sku is inclusive				//$is_sku_inclusive = get_sku_gst("inclusive_tax", $r['sku_item_id']);				//if($is_sku_inclusive == 'yes')					// price shown in monthly report is always gst inclusive				$upd['display_cost_price_is_inclusive'] = 1;				$upd['display_cost_price'] = $upd['cost_price'];										if($export_gst){					$upd['gst_id'] = $export_gst['id'];					$upd['gst_code'] = $export_gst['code'];					$upd['gst_rate'] = $export_gst['rate'];				}else{					// get sku original output gst					$gst_info = get_sku_gst("output_tax", $r['sku_item_id']);										if($gst_info){						$upd['gst_id'] = $gst_info['id'];						$upd['gst_code'] = $gst_info['code'];						$upd['gst_rate'] = $gst_info['rate'];					}else{ // pre load gst id, code and rate if not found						$upd['gst_id'] = $gst_list[0]['id'];						$upd['gst_code'] = $gst_list[0]['code'];						$upd['gst_rate'] = $gst_list[0]['rate'];					}				}							if($exchange_rate && $exchange_rate != 1){					$gst_tax_price = $r['price'] / ($upd['gst_rate']+100) * $upd['gst_rate'];					$tmp_foreign_cost_price = $r['price'] -= $gst_tax_price;					$upd['cost_price'] = $tmp_foreign_cost_price*$exchange_rate;				}else{					$gst_tax_price = $upd['selling_price'] / ($upd['gst_rate']+100) * $upd['gst_rate'];					$upd['cost_price'] = $upd['selling_price'] -= $gst_tax_price;				}			}						//$con->sql_query("insert into dn_items ".mysql_insert_by_field($upd)) or die(mysql_error());			$con->sql_query("insert into ci_items ".mysql_insert_by_field($upd)) or die(mysql_error());		}	}		// do recalculate for GST amount	//if($form['is_under_gst']) recalculate_gst_amount($form['id'], $form['branch_id'], "dn");	// do recalculate for GST amount	recalculate_ci_gst_amount($form['id'], $form['branch_id']);					return $lost_id;}/*function save_to_over($total,$items,$all_items,$date,$discount_info,$sku_items_id_list){	global $con, $smarty,$LANG, $sessioninfo;	$branch_id = intval($_REQUEST['branch_id']);		$form = array();		$form['status'] = 0;	$form['branch_id']=$sessioninfo['branch_id'];	$form['last_update'] = 'CURRENT_TIMESTAMP';	$form['added'] = 'CURRENT_TIMESTAMP';	$form['user_id'] = $sessioninfo['id'];	$form['ci_branch_id']=$branch_id;	$form['type'] = 'over';	$form['ci_date']= $date;	//$form['remark'] = '*** Being Goods Lost ***';	    // insert header	if(!$items) return;	foreach($items as $discount_code=>$item_collection){        $discount_percent = $discount_info[$discount_code];		//$form['total_pcs'] += $total[$discount_code]['total_pcs'];		foreach($item_collection as $r){		    if(!$r['over'])  continue;			$form['total_pcs'] += $r['over'];						//$discount_amt = $r['price']*($discount_percent*0.01);			//$amt = ($r['price'] - $discount_amt)*$r['lost'];			$amt = $r['price'] * $r['over']; 			$form['total_amount'] += $amt;		}	}		if(!$form['total_pcs']) return;		// get con_lost_ci_discount	$con->sql_query("select con_lost_ci_discount from branch where id=$branch_id");	$con_lost_ci_discount = $con->sql_fetchfield(0);		if($con_lost_ci_discount){        $discount_amount = $form['total_amount']*($con_lost_ci_discount*0.01);        $form['total_amount'] -= $discount_amount;        $form['discount_percent'] = $con_lost_ci_discount;        $form['discount_amount'] = $discount_amount;	}		$con->sql_query("insert into ci " . mysql_insert_by_field($form, array('branch_id', 'user_id', 'dept_id', 'status', 'approved', 'ci_date', 'added', 'deliver_branch','total_pcs', 'total_ctn', 'total_amount', 'remark','approval_history_id', 'ci_branch_id', 'open_info','price_indicate','discount_percent','discount_amount','type')));	$form['id'] = $con->sql_nextid();	$over_id[] = $form['id'];		if ($is_confirm){        log_br($sessioninfo['id'], 'Consignment Over Invoice', $form['id'], "Consignment Invoice Confirmed (ID#$form[id], Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:$form[total_amount])");	    if ($last_approval)	    	ci_approval($form['id'], $branch_id, $form['status'], true);		else			$con->sql_query("update branch_approval_history set ref_id=$form[id] where id=$form[approval_history_id] and branch_id = $sessioninfo[branch_id]");	}	else        log_br($sessioninfo['id'], 'Consignment Over Invoice', $form['id'], "Consignment Invoice Saved (ID#$form[id], Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:$form[total_amount])");                	// insert items    foreach($items as $discount_code=>$item_collection){        $discount_percent = $discount_info[$discount_code];		foreach($item_collection as $r){		    $upd = array();		    if(!$r['over'])  continue;		    			$upd['ci_id']=$form['id'];			$upd['branch_id']=$sessioninfo['branch_id'];			$upd['sku_item_id']=$r['sku_item_id'];			$upd['artno_mcode']=$r['art_no'];			$upd['cost_price']=$r['price'];			$upd['selling_price']=$r['price'];			$upd['pcs']=$r['over'];			$upd['discount'] = $discount_percent;						$con->sql_query("insert into ci_items ".mysql_insert_by_field($upd)) or die(mysql_error());		}	}	return $over_id;}*/function save_to_over($total,$items,$all_items,$date,$discount_info,$sku_items_id_list,$exchange_rate){	global $con, $smarty,$LANG, $sessioninfo, $config, $gst_list;	$branch_id = intval($_REQUEST['branch_id']);	$form = array();	$form['status'] = 0;	$form['branch_id']=$sessioninfo['branch_id'];	$form['last_update'] = 'CURRENT_TIMESTAMP';	$form['added'] = 'CURRENT_TIMESTAMP';	$form['user_id'] = $sessioninfo['id'];	$form['to_branch_id']=$branch_id;	$form['date']= $date;	$form['remark'] = '*** Being Goods Over ***';	$form['exchange_rate'] = $exchange_rate;		$form['mr_branch_id'] = $branch_id;	$form['mr_month'] = $_REQUEST['month'];	$form['mr_year'] = $_REQUEST['year'];		    // insert header	if(!$items) return;	foreach($items as $discount_code=>$item_collection){        $discount_percent = $discount_info[$discount_code];		list($disc1, $disc2) = explode("+", $discount_percent);		//$form['total_pcs'] += $total[$discount_code]['total_pcs'];		foreach($item_collection as $r){		    if(!$r['over'])  continue;			$form['total_pcs'] += $r['over'];			$form['total_qty'] += $r['over'];            $row_amt = $row_foreign_amt = $discount_amt = $foreign_discount_amt = $row_discount_amt = $row_foreign_discount_amt = 0;            			/*if($disc1){				$temp_disc_amt = $r['price']*($disc1*0.01);				$discount_amt += $temp_disc_amt;				$r['price'] -= $temp_disc_amt;			}			if($disc2){				$temp_disc_amt = $r['price']*($disc2*0.01);				$discount_amt += $temp_disc_amt;				$r['price'] -= $temp_disc_amt;			}			//$discount_amt = $r['price']*($discount_percent*0.01);			$amt = $r['price']*$r['over'];			$form['total_amount'] += $amt;*/			if($exchange_rate && $exchange_rate != 1){				$row_amt = mf($r['over']*$r['price']*$exchange_rate);				$row_foreign_amt = mf($r['over']*$r['price']);			}else $row_amt = mf($r['over']*$r['price']);			if($disc1){		        $discount_amt = $row_amt*($disc1/100);		        $row_discount_amt += $discount_amt;		        $row_amt -= $discount_amt;				if($row_foreign_amt){					$foreign_discount_amt = $row_foreign_amt*($disc1/100);					$row_foreign_discount_amt += $foreign_discount_amt;					$row_foreign_amt -= $foreign_discount_amt;				}			}			if($disc2){		        $discount_amt = $row_amt*($disc2/100);		        $row_discount_amt += $discount_amt;		        $row_amt -= $discount_amt;				if($row_foreign_amt){					$foreign_discount_amt = $row_foreign_amt*($disc1/100);					$row_foreign_discount_amt += $foreign_discount_amt;					$row_foreign_amt -= $foreign_discount_amt;				}			}			$row_amt = round($row_amt, 2);			$row_foreign_amt = round($row_foreign_amt, 2);	        $form['total_amount'] += $row_amt;	        $form['total_foreign_amount'] += $row_foreign_amt;	        			//print "<br> += $amt";		}	}	//print_r($form);exit;	if(!$form['total_pcs']) return;	// get con_lost_ci_discount	$con->sql_query("select con_lost_ci_discount from branch where id=$branch_id");	$con_lost_ci_discount = $con->sql_fetchfield(0);	if($con_lost_ci_discount){	    list($disc1, $disc2) = explode("+", $con_lost_ci_discount);	    $total_amt = $form['total_amount'];	    $total_foreign_amt = $form['total_foreign_amount'];	    if($disc1){            $temp_disc_amt =  $total_amt*($disc1*0.01);            $total_amt -= $temp_disc_amt;            $discount_amount += $temp_disc_amt;			if($total_foreign_amt){				$temp_foreign_disc_amt =  $total_foreign_amt*($disc1*0.01);				$total_foreign_amt -= $temp_foreign_disc_amt;				$foreign_discount_amount += $temp_foreign_disc_amt;			}		}		if($disc2){            $temp_disc_amt =  $total_amt*($disc2*0.01);            $total_amt -= $temp_disc_amt;            $discount_amount += $temp_disc_amt;			if($total_foreign_amt){				$temp_foreign_disc_amt =  $total_foreign_amt*($disc2*0.01);				$total_foreign_amt -= $temp_foreign_disc_amt;				$foreign_discount_amount += $temp_foreign_disc_amt;			}		}        //$discount_amount = $form['total_amount']*($con_lost_ci_discount*0.01);        //$form['total_amount'] -= $discount_amount;        //$form['discount_percent'] = $con_lost_ci_discount;        $form['discount'] = $con_lost_ci_discount;        $form['discount_amount'] = $discount_amount;        $form['foreign_discount_amount'] = $foreign_discount_amount;	}		if($config['enable_gst'] && $form['date']) $form['is_under_gst'] = check_gst_status(array('date'=>$form['date'], 'branch_id'=>$form['branch_id']));	$con->sql_query("insert into cn " . mysql_insert_by_field($form, array('branch_id', 'user_id', 'status', 'approved', 'date', 'added', 'total_pcs', 'total_ctn', 'total_amount', 'total_foreign_amount', 'remark', 'to_branch_id', 'discount','discount_amount', 'foreign_discount_amount', 'last_update','total_qty', 'exchange_rate', 'mr_branch_id', 'mr_month', 'mr_year', 'is_under_gst')));	$form['id'] = $con->sql_nextid();	$over_id[] = $form['id'];	log_br($sessioninfo['id'], 'CREDIT NOTE', $form['id'], "Debit Note Saved (ID#$form[id], Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:$form[total_amount])");	if($form['is_under_gst']){		construct_gst_list();				$q2 = $con->sql_query("select is_export from branch where id = $branch_id and is_export>0");		$export_info = $con->sql_fetchassoc($q2);		$con->sql_freeresult($q2);				if($export_info['is_export']>0){			$export_gst = get_export_type_gst($export_info['is_export']);		}	}		// insert items    foreach($items as $discount_code=>$item_collection){        $discount_percent = $discount_info[$discount_code];        $con->sql_query("select id from trade_discount_type where code=".ms($discount_code));        $price_type_id = $con->sql_fetchfield(0);        list($disc1, $disc2) = explode("+", $discount_percent);		foreach($item_collection as $r){		    $upd = array();		    $row_amt = $row_foreign_amt = $discount_amt = $foreign_discount_amt = $row_discount_amt = $row_foreign_discount_amt = 0;            		    if(!$r['over'])  continue;			$upd['cn_id']=$form['id'];			$upd['branch_id']=$sessioninfo['branch_id'];			$upd['sku_item_id']=$r['sku_item_id'];			//$upd['artno_mcode']=$r['art_no'];			if($exchange_rate && $exchange_rate != 1){ // is foreign currency				$upd['cost_price']=$r['price']*$exchange_rate;				$upd['foreign_cost_price']=$r['price'];			}else{				$upd['cost_price']=$r['price'];			}			$upd['selling_price']=$r['price'];			$upd['pcs']=$r['over'];			$upd['uom_id'] = 1;			$upd['price_type_id'] = $price_type_id;            $upd['stock_balance1'] = $r['sb1'];			$upd['stock_balance2'] = $r['sb2'];									$upd['discount_per'] = $discount_percent;            //$upd['discount_amt'] = $discount_amt*$r['over'];            $upd['discount_amt'] = $row_discount_amt;            $upd['foreign_discount_amt'] = $row_foreign_discount_amt;            			if($form['is_under_gst']){				construct_gst_list();				// get sku is inclusive				//$is_sku_inclusive = get_sku_gst("inclusive_tax", $r['sku_item_id']);								//if($is_sku_inclusive == 'yes')					// price shown in monthly report is always GST inclusive				$upd['display_cost_price_is_inclusive'] = 1;				$upd['display_cost_price'] = $upd['cost_price'];								// get sku original output gst				if($export_gst){					$upd['gst_id'] = $export_gst['id'];					$upd['gst_code'] = $export_gst['code'];					$upd['gst_rate'] = $export_gst['rate'];				}else{					$gst_info = get_sku_gst("output_tax", $r['sku_item_id']);									if($gst_info){						$upd['gst_id'] = $gst_info['id'];						$upd['gst_code'] = $gst_info['code'];						$upd['gst_rate'] = $gst_info['rate'];					}else{ // pre load gst id, code and rate if not found						$upd['gst_id'] = $gst_list[0]['id'];						$upd['gst_code'] = $gst_list[0]['code'];						$upd['gst_rate'] = $gst_list[0]['rate'];					}				}															if($exchange_rate && $exchange_rate != 1){									$gst_tax_price = $r['price'] / ($upd['gst_rate']+100) * $upd['gst_rate'];					$tmp_foreign_cost_price = $r['price'] -= $gst_tax_price;					$upd['cost_price'] = $tmp_foreign_cost_price * $exchange_rate;				}else{					$gst_tax_price = $upd['selling_price'] / ($upd['gst_rate']+100) * $upd['gst_rate'];					$upd['cost_price'] = $upd['selling_price'] -= $gst_tax_price;				}			}						$con->sql_query("insert into cn_items ".mysql_insert_by_field($upd)) or die(mysql_error());		}	}		// do recalculate for GST amount	recalculate_cn_dn_amount($form['id'], $form['branch_id'], "cn");		return $over_id;}function update_item_cost($sku_items_id_list,$all_items,$date){	global $con, $smarty,$LANG, $sessioninfo, $items_cost, $config;	$branch_id = intval($_REQUEST['branch_id']);		foreach($all_items as $sku_item_id=>$r){		if(!$r['price_need_update'])    continue;				$upd = array();		$need_insert = false;		$need_update = false;				$upd['branch_id'] = $branch_id;		$upd['sku_item_id'] = $sku_item_id;		$upd['added'] = $date;				if($config['enable_gst']) $is_under_gst = check_gst_status(array('branch_id'=>$form['branch_id']));				// check if the keyed in selling price for this SKU item is not inclusive gst, need to deduct 		if($is_under_gst){			$is_inclusive_tax = get_sku_gst("inclusive_tax", $sku_item_id);			$output_tax = get_sku_gst("output_tax", $sku_item_id);						if($is_inclusive_tax == "no"){				$r['price'] = round(($r['price']*100)/(100+$output_tax['rate']), 2);			}		}				$upd['price'] = $r['price'];		$upd['cost'] = $items_cost[$sku_item_id];		$upd['source'] = 'RPT';		$upd['user_id'] = $sessioninfo['id'];		$upd['trade_discount_code'] = $r['discount_code'];				$con->sql_query("insert into sku_items_price_history ".mysql_insert_by_field($upd));		// check for latest price	    $sql = "select * from sku_items_price where branch_id=$branch_id and sku_item_id=$sku_item_id";	    $con->sql_query($sql);		if($con->sql_numrows()<=0){			$need_insert = true;		}else{			$last_update = $con->sql_fetchfield('last_update');			if($date>$last_update)  $need_update = true;		}		$upd2 = array();		$upd2['last_update'] = $date;		$upd2['price'] = $r['price'];		$upd2['cost'] = $items_cost[$sku_item_id];		$upd2['trade_discount_code'] = $r['discount_code'];				if($need_update){			$con->sql_query("update sku_items_price set ".mysql_update_by_field($upd2)." where branch_id=$branch_id and sku_item_id=$sku_item_id");		}elseif($need_insert){			$upd2['branch_id'] = $branch_id;			$upd2['sku_item_id'] = $sku_item_id;						$con->sql_query("insert into sku_items_price ".mysql_insert_by_field($upd2));		}	}}function invoice_recall(){	global $con, $sessioninfo;		$branch_id = mi($_REQUEST['branch_id']);	$year = mi($_REQUEST['year']);	$month = mi($_REQUEST['month']);		$sql = "select * from consignment_report_export_history where branch_id=$branch_id and year=$year and month=$month and active=1 order by timestamp desc limit 1";	$con->sql_query($sql) or die(mysql_error());	$form = $con->sql_fetchrow();		$can_recall = true;		if($form){		// ci		$ci_list = $form['invoice_list'];		if($ci_list){            $ci_array = explode(",",$ci_list);                        $sql = "select count(*) from ci where id in ($ci_list) and branch_id=$sessioninfo[branch_id] and approved=1 and type='sales'";            $con->sql_query($sql) or die(mysql_error());                        if($con->sql_fetchfield(0)>0){                $can_recall = false;                $err[] = "one or more of your consignment invoice already approved.";			}		}				// ci lost		$ci_lost_list = $form['inv_lost_list'];		if($ci_lost_list){            $ci_array = explode(",",$ci_lost_list);                        $sql = "select count(*) from ci where id in ($ci_lost_list) and branch_id=$sessioninfo[branch_id] and approved=1 and type='sales'";            $con->sql_query($sql) or die(mysql_error());                        if($con->sql_fetchfield(0)>0){                $can_recall = false;                $err[] = "one or more of your consignment invoice (Lost) already approved.";			}		}				// ci lost		/*$lost_list = $form['lost_list'];		if($lost_list){            $lost_array = split(",",$lost_list);            $sql = "select count(*) from ci where id in ($lost_list) and branch_id=$sessioninfo[branch_id] and approved=1 and type='lost'";            $con->sql_query($sql) or die(mysql_error());            if($con->sql_fetchfield(0)>0){                $can_recall = false;                $err[] = "one or more of your consignment lost invoice already approved.";			}		}*/		$lost_list = $form['lost_list'];		if($lost_list){            $lost_array = explode(",",$lost_list);            $sql = "select count(*) from dn where id in ($lost_list) and branch_id=$sessioninfo[branch_id] and approved=1 and active=1 and status=1";            $con->sql_query($sql) or die(mysql_error());            if($con->sql_fetchfield(0)>0){                $can_recall = false;                $err[] = "one or more of your consignment credit note already approved.";			}		}				$over_list = $form['over_list'];		if($over_list){            $lost_array = explode(",",$lost_list);            $sql = "select count(*) from cn where id in ($over_list) and branch_id=$sessioninfo[branch_id] and approved=1 and active=1 and status=1";            $con->sql_query($sql) or die(mysql_error());            if($con->sql_fetchfield(0)>0){                $can_recall = false;                $err[] = "one or more of your consignment debit note already approved.";			}		}				// adj		$adj_list = $form['adj_list'];		if($adj_list){            $adj_array = explode(",",$adj_list);            $sql = "select count(*) from adjustment where id in ($adj_list) and branch_id=$branch_id and approved=1";                        $con->sql_query($sql) or die(mysql_error());            if($con->sql_fetchfield(0)>0){                $can_recall = false;                $err[] = "one or more of your adjustment already approved.";			}		}	}		if($can_recall){		$cancel_upd = array();		$cancel_upd['status'] = 4;		$cancel_upd['last_update'] = 'CURRENT_TIMESTAMP';		$cancel_upd['cancelled_by'] = $sessioninfo['id'];		$cancel_upd['reason'] = 'Recall by Monthly Report';			    // ci        if($ci_list){            $ci_array = explode(",",$ci_list);            $sql = "update ci set ".mysql_update_by_field($cancel_upd)." where id in ($ci_list) and ci_branch_id=$branch_id and approved<>1 and type='sales'";            $con->sql_query($sql) or die(mysql_error());		}				// ci lost		if($ci_lost_list){            $sql = "update ci set ".mysql_update_by_field($cancel_upd)." where id in ($ci_lost_list) and ci_branch_id=$branch_id and approved<>1 and type='sales'";            $con->sql_query($sql) or die(mysql_error());		}				// ci lost		/*if($lost_list){            $sql = "update ci set status=4 where id in ($lost_list) and ci_branch_id=$branch_id and approved<>1 and type='lost'";            $con->sql_query($sql) or die(mysql_error());		}*/		if($lost_list){            $sql = "update dn set ".mysql_update_by_field($cancel_upd)." where id in ($lost_list) and branch_id=$sessioninfo[branch_id] and to_branch_id=$branch_id and approved<>1";            $con->sql_query($sql) or die(mysql_error());		}		if($over_list){            $sql = "update cn set ".mysql_update_by_field($cancel_upd)." where id in ($over_list) and branch_id=$sessioninfo[branch_id] and to_branch_id=$branch_id and approved<>1";            $con->sql_query($sql) or die(mysql_error());		}				// adj		if($adj_list){            $sql = "update adjustment set ".mysql_update_by_field($cancel_upd)." where id in ($adj_list) and branch_id=$branch_id and approved<>1";            $con->sql_query($sql) or die(mysql_error());		}				// set export history to 0		$sql = "update consignment_report_export_history set active=0 where branch_id=$branch_id and year=$year and month=$month and active=1";		$con->sql_query($sql) or die(mysql_error());		log_br($sessioninfo['id'], 'Consignment Report', '', "ReCall Consignment Report #branch_id: $branch_id year:$year month:$month");				// update status to 0 (marked as confirmed)	    $con->sql_query("update monthly_report_list set status=0,last_update=now() where branch_id=$branch_id and year=$year and month=$month");		print "OK";	}else{	    print "Following error had occured.\n";		foreach($err as $e){			print "- ".$e."\n";		}	}}function get_grn($branch_id,$month,$year,$sku_item_id_list,&$table){	global $con,$smarty;		$from_Date = $year.'-'.$month.'-1';	$to_Date = $year.'-'.$month.'-'.get_last_day_of_month($month,$year);		//GRN = get the rcvd qty, rcvd cost and grn qty	$q4=$con->sql_query("select grn_items.sku_item_id as sid,sum(if (grn_items.acc_ctn is null and grn_items.acc_pcs is null, grn_items.ctn *rcv_uom.fraction + grn_items.pcs, grn_items.acc_ctn *rcv_uom.fraction + grn_items.acc_pcs)) as qty,sum(if (grn_items.acc_ctn is null and grn_items.acc_pcs is null,	(grn_items.ctn  + (grn_items.pcs / rcv_uom.fraction)),	(grn_items.acc_ctn + (grn_items.acc_pcs / rcv_uom.fraction))) *	if (grn_items.acc_cost is null, grn_items.cost,grn_items.acc_cost)) as total_rcv_cost,if(grr.rcv_date>='$from_Date',0,1) as bal,(rcv_date <= (select max(date) from sku_items_cost_history sh where sh.sku_item_id = sid and sh.branch_id=$branch_id and sh.date <'$from_Date')) as dont_countfrom grn_itemsleft join uom rcv_uom on grn_items.uom_id=rcv_uom.idleft join grn on grn_id = grn.id and grn_items.branch_id = grn.branch_idleft join grr on grr_id = grr.id and grn.branch_id = grr.branch_idwhere grn.branch_id=$branch_id and rcv_date <= '$to_Date' and grn.approved=1 and grn.status and grn.active and grn_items.sku_item_id in (".join(',',$sku_item_id_list).")group by bal, dont_count, sid order by null");	while($r4=$con->sql_fetchrow($q4)){	    if(!$r4['dont_count'])		{           	$table[$r4['sid']]['grn'] += $r4['qty'];			if ($r4['bal']==0)				$table[$r4['sid']]['post_grn'] += $r4['qty'];		}	}	$con->sql_freeresult($q4);		// get do qty out	$sql = "select do_items.sku_item_id as sid,(do_items.ctn *uom.fraction + do_items.pcs) as qtyfrom do_itemsleft join uom on do_items.uom_id=uom.idleft join do on do_id = do.id and do_items.branch_id = do.branch_idwhere do_date between ".ms($from_Date)." and ".ms($to_Date)." and do.approved=1 and do.checkout=1 and do.status<2 and do_items.sku_item_id in (".join(',',$sku_item_id_list).") and do_items.branch_id=$branch_id";	//print $sql;		$con->sql_query($sql) or die(mysql_error());	while($r = $con->sql_fetchrow()){		$table[$r['sid']]['qty_out'] += $r['qty'];	}	$con->sql_freeresult($q4);	// get export history    $con->sql_query("select * from consignment_report_export_history where year=$year and month=$month and branch_id=$branch_id and active=1 order by timestamp desc limit 1");    $export_history = $con->sql_fetchrow();    $filter = array();        if($export_history['adj_list']) $exclude = 'and adj.id not in ('.$export_history['adj_list'].')';	// get adj	$sql = "select ai.sku_item_id as sid,ai.qty from adjustment_items aileft join adjustment adj on adj.id=ai.adjustment_id and adj.branch_id=ai.branch_idwhere adj.approved=1 and adj.status<2 and adjustment_date between ".ms($from_Date)." and ".ms($to_Date)." and adj.branch_id=$branch_id and ai.sku_item_id in (".join(',',$sku_item_id_list).") $exclude";	$con->sql_query($sql) or die(mysql_error());		while($r = $con->sql_fetchrow()){        $table[$r['sid']]['adj2'] += $r['qty'];	}    $con->sql_freeresult($q4);}function load_new_table_item($type=''){	global $con, $config, $sessioninfo;    $branch_id = intval($_REQUEST['branch']);	$month = intval($_REQUEST['month']);	$year = intval($_REQUEST['year']);	$from_Date = $year.'-'.$month.'-1';	$to_Date = $year.'-'.$month.'-'.get_last_day_of_month($month,$year);		if ($type=='grn'){		//GRN = get the rcvd qty, rcvd cost and grn qty		$sql = "select grn_items.sku_item_id as sid,		sum(if (grn_items.acc_ctn is null and grn_items.acc_pcs is null, grn_items.ctn *rcv_uom.fraction + grn_items.pcs, grn_items.acc_ctn *rcv_uom.fraction + grn_items.acc_pcs)) as qty,		sum(if (grn_items.acc_ctn is null and grn_items.acc_pcs is null,(grn_items.ctn  + (grn_items.pcs / rcv_uom.fraction)),	(grn_items.acc_ctn + (grn_items.acc_pcs / rcv_uom.fraction))) *	if (grn_items.acc_cost is null, grn_items.cost,grn_items.acc_cost)) as total_rcv_cost,		if(grr.rcv_date>='$from_Date',0,1) as bal,				(rcv_date <= (select max(date) from sku_items_cost_history sh where sh.sku_item_id = sid and sh.branch_id=$branch_id and sh.date <'$from_Date')) as dont_count		,grn_items.artno_mcode,grn_items.selling_price,sku.default_trade_discount_code, grn_items.gst_selling_price				from grn_items		left join uom rcv_uom on grn_items.uom_id=rcv_uom.id		left join grn on grn_id = grn.id and grn_items.branch_id = grn.branch_id		left join grr on grr_id = grr.id and grn.branch_id = grr.branch_id		left join sku_items on sku_items.id=grn_items.sku_item_id		left join sku on sku_items.sku_id=sku.id				where grn.branch_id=$branch_id and rcv_date <= '$to_Date' and grn.approved=1 and grn.status and grn.active and grn_items.sku_item_id not in (select sku_item_id from consignment_report_sku where branch_id=$branch_id and year=$year and month=$month)		group by bal, dont_count, sid order by null";	}elseif ($type=='adj'){		//adjustment items		$sql = "select adji.sku_item_id as sid,		sum(qty) as qty,		sum(qty*cost) as total_rcv_cost,		if(adj.adjustment_date>='$from_Date',0,1) as bal,				(adj.adjustment_date <= (select max(date) from sku_items_cost_history sh where sh.sku_item_id = sid and sh.branch_id=$branch_id and sh.date <'$from_Date')) as dont_count		,sku_items.artno as artno_mcode,adji.selling_price,sku.default_trade_discount_code				from adjustment_items adji		left join adjustment adj on adj.id= adji.adjustment_id and adj.branch_id=adji.branch_id		left join sku_items on sku_items.id=adji.sku_item_id		left join sku on sku_items.sku_id=sku.id				where adj.branch_id=$branch_id and adj.adjustment_date <= '$to_Date' and adj.approved=1 and adj.status=1 and adj.active=1 and adji.sku_item_id not in (select sku_item_id from consignment_report_sku where branch_id=$branch_id and year=$year and month=$month)		group by bal, dont_count, sid order by null";	}	//print $sql;	if (!$sql)	return;	$con->sql_query($sql) or die(mysql_error());	while($r = $con->sql_fetchassoc()){	    if(!$r['dont_count'])		{           	$new_items[$r['sid']]= $r;		}	}	$con->sql_freeresult();		// insert new items	if($new_items){        // get price type		$sid_str = join(',',array_keys($new_items));		foreach($new_items as $sid=>&$r){            $q_cl = $con->sql_query("select price,trade_discount_code,added from sku_items_price_history where sku_item_id=".mi($sid)." and branch_id=$branch_id and added<=".ms($to_Date)." order by added desc limit 1");			$temp = $con->sql_fetchassoc($q_cl);			$con->sql_freeresult();						if($temp['trade_discount_code'])   $r['discount_code'] = $temp['trade_discount_code'];			else    $r['discount_code'] = $r['default_trade_discount_code'];						$new_page[$r['discount_code']][] = $r;		}		// get max page number		$con->sql_query("select max(page) from consignment_report_page_info where branch_id=$branch_id and year=$year and month=$month") or die(mysql_error());		$page_num = mi($con->sql_fetchfield(0));				foreach($new_page as $price_type=>$items){		    $exist_page_num = 0;		    $exist_row_num = 0;		    		    // check for existing page		    $con->sql_query("select * from consignment_report_page_info where branch_id=$branch_id and year=$year and month=$month and discount_code=".ms('extra,'.$price_type)) or die(mysql_error());			$exist_page = $con->sql_fetchassoc();			$con->sql_freeresult();						if($exist_page){    // page already exists                $exist_page_num = mi($exist_page['page']);                                $con->sql_query("select max(row_num) from consignment_report_sku where branch_id=$branch_id and year=$year and month=$month and page_num=$exist_page_num") or die(mysql_error());                $exist_row_num = mi($con->sql_fetchfield(0));                $con->sql_freeresult();			}else{  // it is new page                // add new page				$page_num++;				$row_num = 0;				$upd = array();	            $upd['branch_id'] = $branch_id;				$upd['year'] = $year;				$upd['month'] = $month;				$upd['page'] = $page_num;				$upd['discount_code'] = 'extra,'.$price_type;				$con->sql_query("insert into consignment_report_page_info".mysql_insert_by_field($upd)) or die(mysql_error());			}						$use_page = ($exist_page_num>0)?$exist_page_num:$page_num;			$use_row = ($exist_row_num>0)?$exist_row_num:$row_num;						foreach($items as $r){			    $use_row++;			    				$upd2 = array();				$upd2['page_num'] = $use_page;				$upd2['row_num'] = $use_row;				$upd2['sku_item_id'] = $r['sid'];				$upd2['art_no'] = $r['artno_mcode'];				if($config['enable_gst'] && $year && $month){					$gst_date = date("Y-m-d", strtotime("-1 day", strtotime("+1 months", strtotime($year."-".$month."-01"))));					$is_under_gst = check_gst_status(array('date'=>$gst_date, 'branch_id'=>$sessioninfo['branch_id']));					if($is_under_gst){						$is_inclusive_tax = get_sku_gst("inclusive_tax", $r['sid']);						if($type=='grn' && $is_inclusive_tax == "yes" && $r['gst_selling_price'] > 0){							$r['selling_price'] = $r['gst_selling_price'];						}else{							$gst_info = get_sku_gst("output_tax", $r['sid']);							//if($type=='grn' && $r['is_under_gst']) $is_inclusive_tax = "no";							$prms['selling_price'] = $r['selling_price'];							$prms['inclusive_tax'] = $is_inclusive_tax;							$prms['gst_rate'] = $gst_info['rate'];							$gst_sp_info = calculate_gst_sp($prms);														if($is_inclusive_tax == "no") $r['selling_price'] = $gst_sp_info['gst_selling_price'];						}					}				}								$upd2['price'] = round($r['selling_price'], 2);				$upd2['year'] = $year;				$upd2['month'] = $month;				$upd2['branch_id'] = $branch_id;								$con->sql_query("insert into consignment_report_sku".mysql_insert_by_field($upd2)) or die(mysql_error());			}		}	}}function print_draft(){	global $con, $smarty, $config, $months;		$branch_id = mi($_REQUEST['branch_id']);	$year = mi($_REQUEST['year']);	$month = mi($_REQUEST['month']);	$pagesize = $config['ci_monthly_report_print_item_per_page'] ? $config['ci_monthly_report_print_item_per_page'] : 32;		if(!$branch_id||!$year||!$month)    die("Invalid Parameters");		// get page discount code	$sql = "select * from consignment_report_page_info where branch_id=$branch_id and year=$year and month=$month order by page";	$con->sql_query($sql);	$page_info = array();	while($r = $con->sql_fetchrow()){		$page_info[$r['page']] = $r;	}	$con->sql_freeresult();		if(!$page_info) die("No Data.");	$con->sql_query("select * from branch where id=$branch_id");	$smarty->assign('branch', $con->sql_fetchrow());	//generate subtitle_r	$sr = $months[$month]." $year <br>";	//$sr .= "Promoter's Name: ".$branch2['contact_person'];	$sr .= "Promoter's Name:____________________";	$days_of_month = days_of_month($month, $year);	$smarty->assign('subtitle_r',$sr);	$smarty->assign('pagesize', $pagesize);	$smarty->assign('total_page', count($page_info));	$smarty->assign('days_of_month',$days_of_month);	$smarty->assign('month_label',$months[$month]);	$smarty->assign('page_info', $page_info);		// get item list	$sql = "select * from consignment_report_sku where branch_id=$branch_id and year=$year and month=$month order by page_num,row_num";	$con->sql_query($sql);	$last_page = 1;	$items = array();	$got_page = array();	$max_page = $config['con_print_monthly_report_draft_table_per_page'] ? $config['con_print_monthly_report_draft_table_per_page'] : 6;		while($r = $con->sql_fetchrow()){	    $current_page = mi($r['page_num']);	    $got_page[$current_page] = $current_page;	    	    list($r['artno_code'],$r['artno_size']) = explode(" ",$r['art_no'],2);				if(count($got_page)>$max_page){ // new page			$smarty->assign('items', $items);			$smarty->assign('start_counter', ($last_page-(count($got_page)-1))*$pagesize);			$smarty->display('consignment.monthly_report.print_draft.tpl');			$smarty->assign('skip_header', 1);			$got_page = array($got_page=>$got_page);			$items = array();		}		if($last_page!=$current_page){            $last_page = $current_page;		}		$items[$current_page][] = $r;	}	$con->sql_freeresult();		if($items){        $smarty->assign('items', $items);		$smarty->assign('start_counter', ($last_page-count($got_page))*$pagesize);		$smarty->display('consignment.monthly_report.print_draft.tpl');	}}function ajax_list_sel(){	global $con, $smarty, $sessioninfo;	    $list_size = 30;	    $t = mi($_REQUEST['t']);		$p = mi($_REQUEST['p']);		$size = $list_size;		$start = $p*$size;		$filter = array();		// status		// 0 = saved		// 1 = confirmed		// 2 = deleted		switch($t){			case 1:	// saved				$filter[] = "mrl.status=0";				break;			case 2: // confirm				$filter[] = "mrl.status=1";				break;			case 3: // search items				$str = $_REQUEST['search_str'];				if(!$str)	die('Cannot search empty string');				if(strlen($str)==6&&preg_match("/^20/", $str)){					$y = mi(substr($str, 0, 4));					$m = mi(substr($str, 4, 2));					$filter[] = "mrl.year=$y and mrl.month=$m";				}else{					$filter[] = "branch.code=".ms($str);				}				$filter[] = "mrl.status in (0,1)";				//$filter_or[] = "cn.inv_no=".ms($str);				//$filter_or[] = "cn.id=".ms(preg_replace("/[^0-9]/","", $str));				//$filter[] = "(".join(' or ',$filter_or).")";				break;			default:				die('Invalid Page');		}		if(BRANCH_CODE!='HQ')	$filter[] = "mrl.branch_id=$sessioninfo[branch_id]";		$filter = "where ".join(' and ',$filter);		$con->sql_query("select count(*) from monthly_report_list mrl		left join branch on branch.id=mrl.branch_id $filter");		$total_rows = $con->sql_fetchfield(0);		if($start>=$total_rows){			$start = 0;			$_REQUEST['p'] = 0;		}		$limit = "limit $start, $size";		$order = "order by mrl.last_update desc";		$total_page = ceil($total_rows/$size);		$sql = "select mrl.*, branch.report_prefix as branch_prefix, branch.code as branch_code, branch.description as branch_descfrom monthly_report_list mrlleft join branch on branch.id=mrl.branch_id$filter $order $limit";		//print $sql;		$q1 = $con->sql_query($sql);		$smarty->assign('sheet_list', $con->sql_fetchrowset($q1));		$smarty->assign('total_page',$total_page);        $smarty->display("consignment.monthly_report.list.tpl");}function delete_table(){	global $con, $smarty, $sessioninfo;		$bid = mi($_REQUEST['branch']);	$y = mi($_REQUEST['year']);	$m = mi($_REQUEST['month']);		// check first	$con->sql_query("select * from monthly_report_list where branch_id=$bid and year=$y and month=$m and status=0");	$form = $con->sql_fetchrow();		if(!$form){        js_redirect('Invalid Monthly Report', $_SERVER['PHP_SELF']);	}		// update status = 2 to mark as deleted	$upd['last_update'] = 'CURRENT_TIMESTAMP';	$upd['delete_by'] = $sessioninfo['id'];	$upd['delete_reason'] = trim($_REQUEST['delete_reason']);	$upd['status'] = 2;	$con->sql_query("update monthly_report_list set ".mysql_update_by_field($upd)." where branch_id=$bid and year=$y and month=$m and status=0");	// insert log	log_br($sessioninfo['id'], 'Consignment Report', $bid, "Consignment Monthly Report Deleted (Branch ID: $bid, Year: $y, Month: $m)");		$bcode = get_branch_code($bid);	$msg = "Monthly Report Deleted(Branch: $bcode, Year: $y, Month: $m)";	header("Location: $_SERVER[PHP_SELF]?t=delete&msg=$msg");	exit;}function ajax_search_sku_page(){	global $con, $smarty, $sessioninfo;		$branch_id = mi($_REQUEST['branch']);	$year = mi($_REQUEST['year']);	$month = mi($_REQUEST['month']);	$sid = mi($_REQUEST['sid']);		if(!$branch_id || !$year || !$month || !$sid)   die('Invalid Parameters');		$sql = "select crs.page_numfrom consignment_report_sku crswhere crs.branch_id=$branch_id and crs.year=$year and crs.month=$month and crs.sku_item_id=$sid";	$con->sql_query($sql);	$r = $con->sql_fetchassoc();	$con->sql_freeresult();		$ret = array();	$ret['ok'] = 1;	if($r['page_num']>0)    $ret['page'] = $r['page_num'];	print json_encode($ret);}function clear_old_tmp_data(){	global $con, $smarty, $sessioninfo;		$con->sql_query("delete from tmp_consignment_report where last_update < date_add(now(), interval -1 month)");}?>