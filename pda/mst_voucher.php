<?php/*4/20/2011 11:43:40 AM Alex- add allow interbranch- add duration checking6/20/2011 12:42:48 PM Alex- add checking voucher value6/20/2011 4:10:30 PM Alex- include masterfile_voucher.include.php for default settings6/24/2011 5:08:55 PM Andy- Make all branch default sort by sequence, code.3/15/2012 11:05:32 AM Justin- Added "/pda" to redirect user back to pda login menu page.8/29/2012 1:36 PM Andy- Add privilege checking for DO, GRR, GRN, Adj, Stock Take and Voucher.5/10/2016 10:02 AM Andy- Fix when code not exists, should stop processing and return error.*/include("common.php");include("class.scan_product.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/pda/index.php");if (!privilege('MST_VOUCHER')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'MST_VOUCHER', BRANCH_CODE), "/pda");include("../masterfile_voucher.include.php");class VOUCHER extends Scan_Product{	function init_module(){	    global $con, $smarty;		// alter any default value, such as $this->scan_templates and $this->result_templates		//$this->scan_templates = 'abc.tpl';		//$this->result_templates = 'abc.tpl';		$con->sql_query("select * from branch where active=1 order by sequence, code");		while ($r=$con->sql_fetchassoc()){			$this->branches[$r['id']]=$r['code'];		}	    $con->sql_freeresult();		$smarty->assign('branches',$this->branches);	    	    $smarty->assign('form',$_REQUEST);		$this->bid = get_request_branch();		$smarty->assign('PAGE_TITLE','Voucher Activation');		$smarty->assign('top_include','do.top_include.tpl');		$smarty->assign('btm_include','do.btm_include.tpl');	}		function default_(){		global $con, $smarty,$config;		$duration_valid = $config['voucher_active_month_duration'] ? $config['voucher_active_month_duration'] : 3;    //by month		if (!$_REQUEST['valid_from'])			$_REQUEST['valid_from']=date('Y-m-d');		if (!$_REQUEST['valid_to'])	        $_REQUEST['valid_to']=date('Y-m-d',strtotime("+$duration_valid month", strtotime($_REQUEST['valid_from'])));	    		$this->show_setting();	}		private function default_load(){		global $con,$smarty;/*				// all branches		$con->sql_query("select * from branch where active=1 order by sequence,code") or die(mysql_error());		while($r = $con->sql_fetchrow()){			$branches[$r['id']] = $r;			$_REQUEST['interbranch'][$r['id']]=1;		}		$smarty->assign('branches',$branches);					// branches group		$branches_group = array();		// load header		$con->sql_query("select * from branch_group",false,false);		// if got branches group, load items		if($con->sql_numrows()>0){            while($r = $con->sql_fetchrow()){	            $branches_group['header'][$r['id']] = $r;			}			// load items			$con->sql_query("select bgi.*,branch.code,branch.description from branch_group_items bgi left join branch on bgi.branch_id=branch.id where branch.active=1 order by branch.sequence, branch.code",false,false);			while($r = $con->sql_fetchrow()){		        $branches_group['items'][$r['branch_group_id']][$r['branch_id']] = $r;		        $branches_group['have_group'][$r['branch_id']] = $r['branch_id'];			}						$smarty->assign('branches_group',$branches_group);		}				$con->sql_query("select * from debtor where active=1 order by code",false,false);		if($con->sql_numrows()>0){			while($r = $con->sql_fetchrow()){				$debtors[$r['id']] = $r;			}			$smarty->assign('debtors',$debtors);		}*/	}		function show_setting(){		global $con, $smarty;				$this->default_load();	    $smarty->assign('form',$_REQUEST);		$smarty->display('mst_voucher.tpl');	}		function activate_voucher(){		global $con, $smarty, $sessioninfo, $LANG;	    $form=$_REQUEST;	    		$ps_res=$con->sql_query("select ps.setting_value						from pos_settings ps						where ps.setting_name='barcode_voucher_prefix' and ps.branch_id=$sessioninfo[branch_id]");        $ps=$con->sql_fetchassoc($ps_res);		$prefix=$ps['setting_value'];		if (!$prefix)   $prefix="VC";        $con->sql_freeresult($ps_res);        		//============get end date==========		$date_type=$form['rdo_end'];		if ($date_type == 'valid_to'){		    if ($form['valid_from'] > $form[$date_type]){				$err[] = $LANG['VOU_OVER_DATE'];			}		    $date_valid_to=$form[$date_type];		}else{            $date_valid_to=date("Y-m-d",strtotime("+$form[$date_type] month", strtotime($form['valid_from'])));		}			//==========end get===========        $codes_arr = explode("\n",trim($form['codes']));		foreach ($codes_arr as $data){		    $data=trim($data);		    if ($data){		        $input_barcode=substr($data,strlen($prefix),12);                $voucher_code=substr($input_barcode,0,7);				$voucher_amount = substr($input_barcode,-5 , 5)/100;                		        $this->org_code[$voucher_code]=$data;				$check_code[$voucher_code]=$data;				$check_amount[$voucher_code]=$voucher_amount;						        $barcode_verify_code = substr($data,-2);		        $verify_code=substr(encrypt_for_verification($input_barcode),0,2);		        if ($barcode_verify_code == $verify_code && $prefix == substr($data,0,strlen($prefix))){					$codes_r[$voucher_code]=ms($voucher_code);				}else{					$invalid_code[$data]=$data;				}			}		}		//invalid code show not exist		if ($invalid_code)	$err[]=sprintf($LANG['VOU_CODE_NO_EXIST'],join(", ",$invalid_code));		elseif (!$invalid_code && !$codes_r) $err[]="Please enter a code.";		if ($err){			$smarty->assign('err',$err);			$this->default_();			exit;		}        $total_codes=count($codes_r);		$codes = join(",",$codes_r);		$con->sql_query("select mv.*						from mst_voucher mv						where mv.code in ($codes)");		while ($r=$con->sql_fetchassoc()){			unset($check_code[$r['code']]);			if ($r['branch_id'] != $sessioninfo['branch_id'])   $not_branch_code[$r['code']]=$r['code'];			elseif ($r['voucher_value'] != $check_amount[$r['code']])	$value_code[$r['code']]=$r['code'];			elseif ($r['active'] == '1')    	$active_code[$r['code']]=$r['code'];			elseif ($r['cancel_status'] == '1')	$cancel_code[$r['code']]=$r['code'];			elseif ($r['is_print'] == '0')		$not_print_code[$r['code']]=$r['code'];			$voucher_batch_arr[$r['batch_no']] = $r['batch_no'];		}		$con->sql_freeresult();				//check invalid code return error message		if ($check_code){ 			$err=sprintf($LANG['VOU_CODE_NO_EXIST'],join(", ",$check_code));		}				if ($value_code){            $err=$this->filter_error_code($value_code,$LANG['VOU_CODE_VALUE_NOT_MATCH']);				}		if ($not_branch_code){            $err=$this->filter_error_code($not_branch_code,$LANG['VOU_CODE_NOT_BRANCH']);		}				if ($active_code){			$err=$this->filter_error_code($active_code,$LANG['VOU_CODE_HAD_ACTIVATED']);		}		if ($cancel_code){			$err=$this->filter_error_code($cancel_code,$LANG['VOU_CODE_HAD_CANCELLED']);	  	}		if ($not_print_code){			$err=$this->filter_error_code($not_print_code,$LANG['VOU_CODE_NOT_PRINTED']);		}		if ($err){			$smarty->assign('err',$err);		}else{			$time_stamp=date("Y-m-d H:i:s");			$voucher_batch=join(',',$voucher_batch_arr);			$upd['last_update']=$time_stamp;			$con->sql_query("update mst_voucher_batch set ".mysql_update_by_field($upd)." where batch_no in (".$voucher_batch.") and branch_id=$sessioninfo[branch_id]");			$upd['active']=1;			$upd['active_remark']=$form['active_remark'];			$upd['activated']=$time_stamp;			$upd['valid_from']=$form['valid_from'];						//			foreach($form['interbranch'] as $bid => $dummy){				$interbranch[$bid]=$this->branches[$bid];			}			$upd['allow_interbranch']=serialize($interbranch);			$upd['valid_to']=$date_valid_to." 23:59:59";			$upd['active_user_id']=$sessioninfo['id'];			$con->sql_query("update mst_voucher set ".mysql_update_by_field($upd)." where code in (".$codes.") and branch_id=$sessioninfo[branch_id]");						log_br($sessioninfo['id'], 'VOUCHER',$sessioninfo['branch_id'], "Activate voucher codes (".$codes.") , Branch:".get_branch_code($sessioninfo['branch_id']));	        			$smarty->assign('suc',sprintf($LANG["VOU_CODE_ACTIVATE"],$total_codes)); ;		}				$smarty->display('mst_voucher.tpl');	}	function show_scan_product(){		global $con, $smarty;	}	function add_items(){		global $con,$config,$sessioninfo;	}		function validate_date($check_date)	{		global $smarty;		//check date format		list($year,$month,$day)=explode('-',$check_date);		if (!$year || strlen(intval($year))!=4 || !$month || !$day)		{							$err[]= $year."-".$month."-".$day;		    $err[]="Invalid date";			$smarty->assign('err', $err);			$this->default_();			exit;		}				//check date available		if (checkdate($month, $day, $year))		{		 //return TRUE;		}else{		    $err[]="Invalid date";			$smarty->assign('err', $err);			$this->default_();			exit;		}	}		function filter_error_code($err_code, $language){	    foreach ($err_code as $err_c){            $msg_code[]=$this->org_code[$err_c];		}	    		$err[]=sprintf($language,join(", ",$msg_code));		return $err;	}}//print_r($_SESSION);$voucher_module = new VOUCHER('Voucher Activation');?>