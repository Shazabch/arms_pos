<?php/*4/1/2014 4:45 PM Justin- Bug fixed on SKU Type cannot work properly.- Bug fixed on gross profit does not calculated correctly.4/2/2014 2:18 PM Justin- Bug fixed on SKU items info does not show out properly.4/3/2014 9:48 AM Justin- Bug fixed on the wrong cost and amount for DO.4/28/2014 11:51 AM Fithri- add option to filter out inactive SKU items5/20/2014 10:37 AM Justin- Enhanced to have export feature for itemise table.6/4/2014 2:48 PM Justin- Enhanced to use new method for export itemise into CSV.6/18/2014 9:53 AM Fithri- report privilege & config checking is set to be the same as in menu (menu.tpl)11/28/2014 1:56 PM Andy- Fix the wrong DO sales amount when got mark-up/mark-down.3/9/2015 11:27 AM Andy- Fix export items sometime cannot export at some server.5/27/2015 10:30 AM Justin- Enhanced to pickup transfer do (if got print invoice) by config set.- Bug fixed on DO amount have wrongly sum up with GST amount.- Enhanced to allow user can filter and show report by GST amount.9/29/2016 17:44 Qiu Ying- Enhanced to add Art No for Daily Category from Cash/Credit Sales Report2/20/2020 11:00 AM William- Enhanced to change connection "$con" to use report server connection "$con_multi".*/include("include/common.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('REPORTS_SALES')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'REPORTS_SALES', BRANCH_CODE), "/index.php");class REPORT_CATEGORY_CASH_CREDIT_SALES extends Module{	var $branches_group = array();  // use to hold all branches group data	var $branches = array();    // use to hold all branches data	var $branch_id; // use to store user selected branch id	var $branch_id_list = array(); // use to store all branch need to generate	    function __construct($title){		global $con, $smarty, $sessioninfo, $config, $con_multi, $appCore;				if(!$con_multi)	$con_multi = $appCore->reportManager->connectReportServer();		$this->init_selection();		if(BRANCH_CODE == 'HQ'){			$this->branch_id = mi($_REQUEST['branch_id']);			if($this->branch_id<0){ // branch group selected				$this->bgid = abs($this->branch_id);				if($this->branches_group){					foreach($this->branches_group['items'][$this->bgid] as $bid=>$b){												if ($config['sales_report_branches_exclude']) {							$branch_code = $b['code'];							if (in_array($branch_code,$config['sales_report_branches_exclude'])) {								// print "$branch_code skipped<br />";								continue;							}						}						$this->branch_id_list[] = $bid;					}				}			}elseif($this->branch_id)   $this->branch_id_list[] = $this->branch_id;			else{				foreach($this->branches as $bid=>$b){									if ($config['sales_report_branches_exclude']) {						$branch_code = $b['code'];						if (in_array($branch_code,$config['sales_report_branches_exclude'])) {							// print "$branch_code skipped<br />";							continue;						}					}					                    $this->branch_id_list[] = $bid;				}			}		}else{            $this->branch_id = mi($sessioninfo['branch_id']);            $this->branch_id_list[] = mi($sessioninfo['branch_id']);		}   				$this->date_from = $_REQUEST['from'];		$this->date_to = $_REQUEST['to'];		$this->date_from_key = date("Ymd", strtotime($this->date_from));		$this->date_to_key = date("Ymd", strtotime($this->date_to));		        $this->cat_id  = mi($_REQUEST['cat_id']);        $this->sku_type = $_REQUEST['sku_type'];        $this->by_monthly = mi($_REQUEST['by_monthly']);        $this->do_type = $_REQUEST['do_type'];        $this->do_status = $_REQUEST['do_status'];        $this->sales_person_name = $_REQUEST['sales_person_name'];        $this->debtor_id = $_REQUEST['debtor_id'];				$con_multi->sql_query("select * from debtor where active=1 order by code");		$smarty->assign("debtors", $con_multi->sql_fetchrowset());		$con_multi->sql_freeresult();                if($config['do_credit_sales_show_sales_person_name'] || $config['do_cash_sales_show_sales_person_name']){			$con_multi->sql_query("select distinct(sales_person_name) as sales_person_name from do where sales_person_name<>'' and sales_person_name is not null order by sales_person_name");			$smarty->assign('sales_person_name_list', $con_multi->sql_fetchrowset());			$con_multi->sql_freeresult();		}        		parent::__construct($title);	}		function _default(){	    global $sessioninfo, $smarty;	    	    if($_REQUEST['subm']){			if(!$_REQUEST['is_itemise_export']){				$this->generate_report();				if(isset($_REQUEST['output_excel'])){					include_once("include/excelwriter.php");					log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Daily Category Sales from Cash/Credit Sales Report To Excel");					Header('Content-Type: application/msexcel');					Header('Content-Disposition: attachment;filename=arms'.time().'.xls');					print ExcelWriter::GetHeader();					$smarty->assign('no_header_footer', 1);				}			}else{				$this->export_itemise_info();			}		}						$this->display();	}		private function init_selection(){	    global $con, $smarty, $con_multi;	            if (!$_REQUEST['to']) $_REQUEST['to'] = date('Y-m-d');		if (!$_REQUEST['from']) $_REQUEST['from'] = date('Y-m-d', strtotime("-1 month"));				$con_multi->sql_query("select * from branch where active=1 and id>0 order by sequence,code");		while($r = $con_multi->sql_fetchassoc()){			$this->branches[$r['id']] = $r;		}		$con_multi->sql_freeresult();		$smarty->assign('branches',$this->branches);				// load branch group header		$con_multi->sql_query("select * from branch_group",false,false);		while($r = $con_multi->sql_fetchassoc()){            $this->branches_group['header'][$r['id']] = $r;		}		$con_multi->sql_freeresult();		if($this->branches_group){            // load branch group items			$con_multi->sql_query("select bgi.*,branch.code,branch.description			from branch_group_items bgi			left join branch on bgi.branch_id=branch.id			where branch.active=1");			while($r = $con_multi->sql_fetchassoc()){		        $this->branches_group['items'][$r['branch_group_id']][$r['branch_id']] = $r;		        $this->branches_group['have_group'][$r['branch_id']] = $r['branch_id'];			}			$con_multi->sql_freeresult();		}		$smarty->assign('branches_group',$this->branches_group);				$con_multi->sql_query("select * from sku_type order by code");		$smarty->assign('sku_type', $con_multi->sql_fetchrowset());		$con_multi->sql_freeresult();	}		private function generate_report(){		global $con, $smarty;				$this->generate_category_data(true);				$report_title = array();		if($this->branch_id_list){			foreach($this->branch_id_list as $bid){				$bcode[] = $this->branches[$bid]['code'];			}			$report_title[] = "Branch: ".join(', ', $bcode);		}		$report_title[] = "Date: ".$this->date_from." to ".$this->date_to;		$smarty->assign('report_title', join('&nbsp;&nbsp;&nbsp;&nbsp;', $report_title));	}		function generate_category_data($sqlonly = false){		global $con, $smarty, $sessioninfo,$config, $con_multi;				if(!$this->branch_id_list)  return;		$this->generate_header_date_label();				if($this->cat_id){ // got category clicked			$con_multi->sql_query("select * from category where id=$this->cat_id");			$cat_info = $con_multi->sql_fetchassoc();			$con_multi->sql_freeresult();						if($cat_info['tree_str']!=''){  // generate category tree			    $tree_str = $cat_info['tree_str'];				$temp = str_replace(")(", ",",  str_replace("(0)", "", $tree_str));				if($temp){                    $con_multi->sql_query("select id,description from category where id in $temp order by level");                    while ($r = $con_multi->sql_fetchassoc()){                        $cat_info['cat_tree_info'][] = $r;					}					$con_multi->sql_freeresult();				}							}						$pf = "p".($cat_info['level']+1);			$filter[] = "p".$cat_info['level']."=$this->cat_id";			$uncat_name = $cat_info['description'];		}else{  // no select category, show all            $pf = "p1";			$uncat_name = 'Un-categorized';		}				// construct filter		$filter[] = "do.do_date between ".ms($this->date_from)." and ".ms($this->date_to)." and do.active = 1";		if ($sessioninfo['level']<1000){	        $filter[] = "cc.p2 in ($sessioninfo[department_ids])";		}		if($this->sku_type){			$filter[]="sku.sku_type=".ms($this->sku_type);		}				if($this->do_type){			if($this->do_type != 'all'){				$filter[] = "do.do_type = ".ms($this->do_type);			}elseif(!$config['sales_report_include_transfer_do']){				$filter[] = "do.do_type in ('open', 'credit_sales')";			}						if($config['sales_report_include_transfer_do'] && ($this->do_type == "transfer" || $this->do_type == "all")){				$filter[] = "(case when do.do_type = 'transfer' then do.inv_no is not null and do.inv_no != '' else 1=1 end)";								}		}		switch ($this->do_status){			case 1: // show approved			    $filter[] = "do.approved=1 and do.checkout=0";			    break;			case 2: // show checkout			    $filter[] = "do.approved=1 and do.checkout=1 ";			    break;		}		if(!$this->do_status)	$filter[] = "do.approved=1 and (do.checkout=0 or do.checkout=1)";		if(trim($this->sales_person_name))    $filter[] = "do.sales_person_name like ".ms("%".$this->sales_person_name."%");		if($this->do_type == 'credit_sales' && $this->debtor_id){			$filter[] = "do.debtor_id=".mi($this->debtor_id);		}			if($this->branch_id_list) $filter[] = "do.branch_id in (".join(",", $this->branch_id_list).")";				$filter[] = $_REQUEST['exclude_inactive_sku'] ? 'si.active=1' : '1';		    if ($filter) $filter = "where ".join(' and ', $filter);	    // get all child category info	    $con_multi->sql_query("select c.id,c.description, cm.branch_id, cm.markup						 from category c						 left join category_markup cm on c.id = cm.category_id						 where c.root_id=$this->cat_id or c.id=$this->cat_id");	    while($r=$con_multi->sql_fetchrow())	    {	    	$category_markup[$r['id']][$r['branch_id']] = $r['markup'];	        $category[$r['id']] = $r['description'];		}		$con_multi->sql_freeresult();				// get category sales		$sql = "select di.*, $pf as cat_id, di.sku_item_id, di.branch_id, di.cost, di.cost_price,				((di.ctn*uom.fraction)+di.pcs) as qty, di.selling_price, do.do_markup,uom.fraction as uom_fraction,				do.markup_type, do.do_date as dt,di.ctn,di.pcs,do.is_under_gst,di.gst_rate,di.item_discount				from do				left join do_items di on di.do_id = do.id and di.branch_id = do.branch_id				left join uom on uom.id = di.uom_id				left join sku_items si on si.id = di.sku_item_id				left join sku on sku.id = si.sku_id				left join category_cache cc using(category_id)				$filter				order by si.id";		//$query = join(' union all ', $query);		//echo $sql;		// establish report server connection		$do_sql = $con_multi->sql_query($sql);		if ($con_multi->sql_numrows($do_sql)>0){			while($r = $con_multi->sql_fetchrow($do_sql)){			    $date_key = date("Ymd", strtotime($r['dt']));			    			    /*if($r['do_markup'])	$r['do_markup_arr'] = explode("+", $r['do_markup']);				if($r['markup_type']=='down'){					$r['do_markup_arr'][0] *= -1;					$r['do_markup_arr'][1] *= -1;				}				//cost				$cost = ($r['qty']*$r['cost']);				// amt				$cost_price = $r['cost_price'];						// markup / mark down				if($r['do_markup_arr'][0]){					$cost_price = $cost_price * (1+($r['do_markup_arr'][0]/100));				}				if($r['do_markup_arr'][1]){					$cost_price = $cost_price * (1+($r['do_markup_arr'][1]/100));				}				$amt_ctn = $cost_price*$r['ctn'];				$amt_pcs = ($cost_price/$r['uom_fraction'])*$r['pcs'];				// gross amt				$gross_amt = round($amt_pcs+$amt_ctn,2);								// invoice discount				$inv_discount_amt = 0;				if($r['item_discount']){					$inv_discount_amt = round(get_discount_amt($gross_amt, $r['item_discount']),2);				}					// gross invoice amt				$gross_inv_amt = round($gross_amt - $inv_discount_amt,2);								// invoice gst				$inv_gst_amt = 0;				if($r['is_under_gst']){					$gst_rate = $r['gst_rate'];					$inv_gst_amt = round($gross_inv_amt * ($gst_rate/100), 2);				}								// final invoice amt				$inv_amt = $gross_inv_amt + $inv_gst_amt;*/				if($r['inv_line_gross_amt2'] > 0){					$inv_gross_amt = $r['inv_line_gross_amt2'];					$inv_gst_amt = $r['inv_line_gst_amt2'];					$inv_amt = $r['inv_line_amt2'];				}else{					$inv_gross_amt = $r['line_gross_amt'];					$inv_gst_amt = $r['line_gst_amt'];					$inv_amt = $r['line_amt'];				}				$cost = ($r['qty']*$r['cost']);				$tb[$r['cat_id']]['data'][$date_key]['amt'] += $inv_gross_amt;				$tb[$r['cat_id']]['data'][$date_key]['cost'] += $cost;				$tb[$r['cat_id']]['data'][$date_key]['qty'] += $r['qty'];				$tb[$r['cat_id']]['data'][$date_key]['tax_amount'] += $inv_gst_amt;				$tb[$r['cat_id']]['data'][$date_key]['amt_inc_gst'] += $inv_amt;			}			foreach (array_keys($tb) as $id){   // loop for each category to assign cat id and description				$tb[$id]['id'] = $id;			    if (!$category[$id]){   // unknow category id			        $tb[$id]['have_subcat'] = false;		            $tb[$id]['description'] = $uncat_name;				}			    else{					$tb[$id]['have_subcat'] = $this->check_have_subcat($id);				    $tb[$id]['description'] = $category[$id];			    }			}		}		$con_multi->sql_freeresult($do_sql);						// construct total table		if($tb){			foreach($tb as $cat_id=>$cat){				if($cat['data']){					foreach($cat['data'] as $date_key=>$r){					    $tb[$cat_id]['total']['amt']+=$r['amt'];					    $tb[$cat_id]['total']['cost']+=$r['cost'];					    $tb[$cat_id]['total']['qty']+=$r['qty'];					    $tb[$cat_id]['total']['tax_amount']+=$r['tax_amount'];					    $tb[$cat_id]['total']['amt_inc_gst']+=$r['amt_inc_gst'];					                            $tb_total['data'][$date_key]['amt'] += $r['amt'];				    	$tb_total['data'][$date_key]['cost'] += $r['cost'];				    	$tb_total['data'][$date_key]['qty'] += $r['qty'];				    	$tb_total['data'][$date_key]['tax_amount'] += $r['tax_amount'];				    	$tb_total['data'][$date_key]['amt_inc_gst'] += $r['amt_inc_gst'];				    	$tb_total['data']['total']['amt'] += $r['amt'];				    	$tb_total['data']['total']['cost'] += $r['cost'];				    	$tb_total['data']['total']['qty'] += $r['qty'];				    	$tb_total['data']['total']['tax_amount'] += $r['tax_amount'];				    	$tb_total['data']['total']['amt_inc_gst'] += $r['amt_inc_gst'];					}				}			}		}		    $root_id = $this->cat_id;		$root_per = isset($_REQUEST['root_per']) ? mf($_REQUEST['root_per']) : 100;				//print_r($tb);		if($this->by_monthly){  // report group by month			$this->group_data_to_monthly($tb, $tb_total);		}				$smarty->assign('root_per', $root_per);		$smarty->assign('root_id', $root_id);		$smarty->assign('cat_info', $cat_info);		$smarty->assign('tb', $tb);		$smarty->assign('tb_total', $tb_total);				if(!$sqlonly){            $this->display('report.category_cash_credit_sales.table.tpl');		}   	}		private function check_have_subcat($id){		global $con,$con_multi;		$con_multi->sql_query("select id from category where root_id=$id limit 1");		$c = $con_multi->sql_fetchrow();		$con_multi->sql_freeresult();		if ($c) return true;		return false;	}		private function generate_header_date_label(){	    global $smarty;	            $d1 = strtotime($this->date_from);		$d2 = strtotime($this->date_to);		$uq_cols = array();		while($d1<=$d2)		{		    $temp = array('y'=>date('Y', $d1), 'm'=>mi(date('m', $d1)));		    if($this->by_monthly){	            $key = date('Ym', $d1);			}else{			    $key = date('Ymd', $d1);	            $temp['d'] = date('d', $d1);			}		    $uq_cols[$key] = $temp;			$d1 += 86400;		}		$this->uq_cols = $uq_cols;		$smarty->assign('uq_cols', $this->uq_cols);	}		function ajax_load_category(){        $this->generate_category_data();	}		function ajax_load_sku(){	    global $con, $smarty, $sessioninfo, $config, $con_multi;	    	    if(!$this->branch_id_list)  die("No branch selected.");	    	    $this->generate_header_date_label();	    		if(!$this->cat_id && $_REQUEST['itemise_cat_id']){			$this->cat_id = $_REQUEST['itemise_cat_id'];		}		        if (!$this->cat_id){    // showing uncategory sku			$cat_info['description'] = 'Uncategorized';   			$filter[] = "p0 is null";		}		else{   			$con_multi->sql_query("select id,level,description from category where id=$this->cat_id");			$cat_info = $con_multi->sql_fetchrow();			$con_multi->sql_freeresult();			$pf = "p".($cat_info['level']+1);			$filter[] = "p".$cat_info['level']."=$this->cat_id";						if($sessioninfo['level']<9999){                $filter[] = "p2 in ($sessioninfo[department_ids])";			} 		}				$filter[] = "do.do_date between ".ms($this->date_from)." and ".ms($this->date_to)." and do.active = 1";		if($this->sku_type){			$filter[] = "sku.sku_type=".ms($this->sku_type);		}		if($this->do_type){			if($this->do_type != 'all'){				$filter[] = "do.do_type = ".ms($this->do_type);			}elseif(!$config['sales_report_include_transfer_do']){				$filter[] = "do.do_type in ('open', 'credit_sales')";			}						if($config['sales_report_include_transfer_do'] && ($this->do_type == "transfer" || $this->do_type == "all")){				$filter[] = "(case when do.do_type = 'transfer' then do.inv_no is not null and do.inv_no != '' else 1=1 end)";								}		}		switch ($this->do_status){			case 1: // show approved			    $filter[] = "do.approved=1 and do.checkout=0";			    break;			case 2: // show checkout			    $filter[] = "do.approved=1 and do.checkout=1 ";			    break;		}		if(!$this->do_status)	$filter[] = "do.approved=1 and (do.checkout=0 or do.checkout=1)";		if(trim($this->sales_person_name))    $filter[] = "do.sales_person_name=".ms($this->sales_person_name);		if($this->do_type == 'credit_sales' && $this->debtor_id){			$filter[] = "do.debtor_id=".mi($this->debtor_id);		}		if($this->branch_id_list) $filter[] = "do.branch_id in (".join(",", $this->branch_id_list).")";				$filter[] = $_REQUEST['exclude_inactive_sku'] ? 'si.active=1' : '1';				if($filter) $filter = "where ".join(' and ', $filter);			$sql = "select di.*, do.branch_id as bid, di.sku_item_id, si.sku_item_code, si.description, si.artno,				((di.ctn*uom.fraction)+di.pcs) as qty, di.selling_price, do.do_markup, uom.fraction as uom_fraction,				do.markup_type, do.do_date as dt, di.cost, di.cost_price,di.ctn,di.pcs,do.is_under_gst,di.gst_rate,di.item_discount				from do				left join do_items di on di.do_id = do.id and di.branch_id = do.branch_id				left join uom on uom.id = di.uom_id				left join sku_items si on si.id = di.sku_item_id				left join sku on sku.id = si.sku_id				left join category_cache cc using(category_id)				$filter				order by si.sku_item_code";		//$query = join(' union all ', $query);		//print $query;		//print $sql;		$do_sql = $con_multi->sql_query($sql);				while($r = $con_multi->sql_fetchrow($do_sql)){			$date_key = date("Ymd", strtotime($r['dt']));			$tb[$r['sku_item_id']]['info']['sku_item_code'] = $r['sku_item_code'];			$tb[$r['sku_item_id']]['info']['description'] = $r['description'];			$tb[$r['sku_item_id']]['info']['artno'] = $r['artno'];			$tb[$r['sku_item_id']]['info']['sku_id'] = $r['sku_id'];			/*if($r['do_markup'])	$r['do_markup_arr'] = explode("+", $r['do_markup']);			if($r['markup_type']=='down'){				$r['do_markup_arr'][0] *= -1;				$r['do_markup_arr'][1] *= -1;			}					    //cost			$cost = ($r['qty']*$r['cost']);			// amt			$cost_price = $r['cost_price'];				// markup / mark down			if($r['do_markup_arr'][0]){				$cost_price = $cost_price * (1+($r['do_markup_arr'][0]/100));			}			if($r['do_markup_arr'][1]){				$cost_price = $cost_price * (1+($r['do_markup_arr'][1]/100));			}			$amt_ctn = $cost_price*$r['ctn'];			$amt_pcs = ($cost_price/$r['uom_fraction'])*$r['pcs'];			// gross amt			$gross_amt = round($amt_pcs+$amt_ctn,2);						// invoice discount			$inv_discount_amt = 0;			if($r['item_discount']){				$inv_discount_amt = round(get_discount_amt($gross_amt, $r['item_discount']),2);			}			// gross invoice amt			$gross_inv_amt = round($gross_amt - $inv_discount_amt,2);						// invoice gst			$inv_gst_amt = 0;			if($r['is_under_gst']){				$gst_rate = $r['gst_rate'];				$inv_gst_amt = round($gross_inv_amt * ($gst_rate/100), 2);			}						// final invoice amt			$inv_amt = $gross_inv_amt + $inv_gst_amt;*/			if($r['inv_line_gross_amt2'] > 0){				$inv_gross_amt = $r['inv_line_gross_amt2'];				$inv_gst_amt = $r['inv_line_gst_amt2'];				$inv_amt = $r['inv_line_amt2'];			}else{				$inv_gross_amt = $r['line_gross_amt'];				$inv_gst_amt = $r['line_gst_amt'];				$inv_amt = $r['line_amt'];			}			$cost = ($r['qty']*$r['cost']);				        $tb[$r['sku_item_id']]['data'][$date_key]['qty'] += $r['qty'];	        $tb[$r['sku_item_id']]['data'][$date_key]['amt'] += $inv_gross_amt;	        $tb[$r['sku_item_id']]['data'][$date_key]['cost'] += $cost;	        $tb[$r['sku_item_id']]['data'][$date_key][$r['bid']]['cost'] += $cost;	        $tb[$r['sku_item_id']]['data'][$date_key]['tax_amount'] += $inv_gst_amt;	        $tb[$r['sku_item_id']]['data'][$date_key]['amt_inc_gst'] += $inv_amt;		}		$con_multi->sql_freeresult($do_sql);		//print_r($tb);				if($tb){			foreach($tb as $sid=>$sku_items){			    if(!$sku_items['data'])  continue;			    			    foreach($sku_items['data'] as $date_key=>$r){                    $tb[$sid]['data']['total']['qty'] += $r['qty'];			        $tb[$sid]['data']['total']['amt'] += $r['amt'];			        $tb[$sid]['data']['total']['cost'] += $r['cost'];			        $tb[$sid]['data']['total']['tax_amount'] += $r['tax_amount'];			        $tb[$sid]['data']['total']['amt_inc_gst'] += $r['amt_inc_gst'];					//print "cost += $r[cost] <br />";			    	$tb_total['data'][$date_key]['amt'] += $r['amt'];			    	$tb_total['data'][$date_key]['cost'] += $r['cost'];			    	$tb_total['data'][$date_key]['qty'] += $r['qty'];			    	$tb_total['data'][$date_key]['tax_amount'] += $r['tax_amount'];			    	$tb_total['data'][$date_key]['amt_inc_gst'] += $r['amt_inc_gst'];			    	$tb_total['data']['total']['amt'] += $r['amt'];			    	$tb_total['data']['total']['cost'] += $r['cost'];			    	$tb_total['data']['total']['qty'] += $r['qty'];			    	$tb_total['data']['total']['tax_amount'] += $r['tax_amount'];			    	$tb_total['data']['total']['amt_inc_gst'] += $r['amt_inc_gst'];				}			}		}        if($this->by_monthly){  // report group by month			$this->group_data_to_monthly($tb, $tb_total);		}		        $root_id = $this->cat_id;		$root_per = isset($_REQUEST['root_per']) ? mf($_REQUEST['root_per']) : 100;		$smarty->assign('root_per', $root_per);		$smarty->assign('root_id', $root_id);		$smarty->assign('is_itemise_export', $_REQUEST['is_itemise_export']);				$smarty->assign('tb', $tb);		$smarty->assign('tb_total', $tb_total);				$this->display('report.category_cash_credit_sales.sku_table.tpl');	}		private function group_data_to_monthly(&$tb, &$tb_total){        if($tb){    // group category data			foreach($tb as $id=>$cat){			    $new_data = array();				if(!$cat['data'])   continue;				foreach($cat['data'] as $date_key=>$r){ // loop for daily data to convert to monthly data					$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key					$new_data[$ym]['amt'] += $r['amt'];					$new_data[$ym]['cost'] += $r['cost'];					$new_data[$ym]['qty'] += $r['qty'];					$new_data[$ym]['tax_amount'] += $r['tax_amount'];					$new_data[$ym]['amt_inc_gst'] += $r['amt_inc_gst'];				}				$tb[$id]['data'] = $new_data;  // replace the daily data to monthly data				unset($new_data);			}		}		if($tb_total['data']){  // group total row data		    $new_data = array();			foreach($tb_total['data'] as $date_key=>$r){                $ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key                $new_data[$ym]['amt'] += $r['amt'];				$new_data[$ym]['cost'] += $r['cost'];				$new_data[$ym]['qty'] += $r['qty'];				$new_data[$ym]['tax_amount'] += $r['tax_amount'];				$new_data[$ym]['amt_inc_gst'] += $r['amt_inc_gst'];			}			$tb_total['data'] = $new_data;			unset($new_data);		}	}		function export_itemise_info(){		global $config, $con, $sessioninfo;				//print_r($_REQUEST);exit;				//print $_REQUEST['html'];		include_once("include/excelwriter.php");		log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Daily Category Sales from Cash/Credit Sales Report To Excel (Itemise)");				Header('Content-Type: application/msexcel');		Header('Content-Disposition: attachment;filename=arms'.time().'.xls');		print ExcelWriter::GetHeader();		//$smarty->assign('no_header_footer', 1);		$this->ajax_load_sku();		exit;			}}function smarty_value_format($value, $fmt,$zero='&nbsp;'){	global $config;	$ret = '';	if ($value==0)	{		if ($value!==0)	// if report is qty, show 0 as zero, space as blank			return $zero;		if ($_REQUEST['report_type']!='qty')			return $zero;	}	if ($value<0)	$ret = '<font color=red>';		if ($fmt == '%d')		$ret .= number_format($value,0);	elseif ($fmt == 'qty')		$ret .= (strpos($value,'.')>0) ? number_format($value, $config['global_qty_decimal_points']) : number_format($value);	elseif ($fmt == '%0.2f%%')		$ret .= number_format($value,2) . "%";	else		$ret .= number_format($value,2);	if ($value<0)		$ret .= '</font>';	//= sprintf($value)	return $ret;}$smarty->register_modifier('value_format', 'smarty_value_format');/*$con_multi= new mysql_multi();  // use report serverif(!$con_multi){	die("Error: Fail to connect report server");}*/$REPORT_CATEGORY_CASH_CREDIT_SALES = new REPORT_CATEGORY_CASH_CREDIT_SALES('Daily Category Sales from Cash/Credit Sales Report');//$con_multi->close_connection(); // close report server connection?>