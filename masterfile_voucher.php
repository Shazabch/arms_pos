<?/*4/7/2011 12:35:51 PM Alex- create by me4/12/2011 4:33:09 PM Alex- add page no- add batch no- change use crypt and md5 encryption- add $config['voucher_hq_print'], $config['voucher_hq_reprint'], $config['voucher_subbranch_print'], $config['voucher_subbranch_reprint'] for HQ or sub-branch printing privilege- add $config['voucher_edit_after_print'] to able to edit after print voucher4/22/2011 11:34:57 AM Alex- add no. of active qty and cancel qty information - edit checking printed voucher4/26/2011 6:06:43 PM Alex- add info for template for checking config hq_reprint or subbranch_reprint and branch_code4/27/2011 5:54:54 PM Alex- change $config['voucher_print_template'] to array to store format and location5/16/2011 3:07:21 PM Alex- add linux and windows print format6/15/2011 3:20:32 PM Alex- count voucher used by checking in pos payment6/16/2011 5:51:32 PM Alex- only check length 12 digit voucher remark and first 7 digit to compare with voucher only6/24/2011 4:55:41 PM Andy- Make all branch default sort by sequence, code.8/22/2011 2:16:48 PM Alex- add show numbering and multiple branch under allow interbranch9/22/2011 5:43:33 PM Alex- fix voucher used no check cancelled pos10/11/2011 1:48:47 PM Alex- enhance speed of loading voucher- add checking on 12 digit only10/21/2011 2:13:45 PM Alex- fix allow interbrarnch show duplicate 10/28/2011 3:34:14 PM Alex- add format change able to set preprinted and without cutting_line11/9/2011 10:39:43 AM Alex- remove the prefix while searching- add filter used time11/10/2011 4:42:43 PM Alex- add expired filter 11/21/2011 9:51:15 AM Alex- fix allow interbranch bugs3/12/2012 7:17:20 PM Alex- add 2 column voucher checking3/13/2012 3:56:08 PM Alex- fix printed count on 2 column and above printed voucher3/14/2012 4:50:46 PM Alex- change prefix to uppercase 6/20/2012 1:28:00 PM Andy- Add feature to voucher listing to able to print member redeem format.8/14/2012 5:19 PM Justin- Enhanced to have export voucher feature.9/6/2012 5:35 PM Andy- Fix default format missing.1/11/2012 10:39 AM Andy- Fix filter by active remark not working.1/17/2013 11:57 AM Andy- Fix date filter if choose same date will return no result.2/22/2013 10:49 AM Andy- Fix filter Used Time not working.- Fix total records and pagination bug.2/26/2013 3:30 PM Andy- Fix voucher used pcs to not get the adjusted payment, should only use adjust=011/22/2016 5:32 PM Andy- Added new default printing format (ARMS 4 x 1).2/21/2017 3:32 PM Justin- Bug fixed on voucher value options is not showing as per voucher setup.1/10/2020 6.00 PM William- Enhanced to generate "Actual Voucher Code" for new column, it will show when user got privilege "MST_VOUCHER_PRINT".- Fixed bug variable "whole_voucher" value not correct.7/13/2020 2:28 PM Andy- Added new voucher default format "ARMS A4 paper v2: 3 x 1"  and "ARMS A4 paper v2: 3 x 1 (Greyscale)".*/include("include/common.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('MASTERFILE')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'MASTERFILE', BRANCH_CODE), "/index.php");if (!privilege('MST_VOUCHER')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'MST_VOUCHER', BRANCH_CODE), "/index.php");include("masterfile_voucher.include.php");class Voucher extends Module{    //pre-printed format	var $default_format=array(			'LARMS' => array (			    'description' => 'Linux: ARMS A4 paper: 3 x 1',				'row' => 3,				'column' => 1,				'address' => 'voucher_formats/default.tpl'			),			'WARMS' => array (			    'description' => 'Windows: ARMS A4 paper: 3 x 1',				'row' => 3,				'column' => 1,				'address' => 'voucher_formats/window_default.tpl'			),			'ARMS4x1' => array (			    'description' => 'ARMS A4 paper: 4 x 1',				'row' => 4,				'column' => 1,				'address' => 'voucher_formats/default4x1.tpl'			),			'ARMS_v2_3x1' => array (			    'description' => 'ARMS A4 paper v2: 3 x 1',				'row' => 3,				'column' => 1,				'address' => 'voucher_formats/default_v2_3x1.tpl'			),			'ARMS_v2_3x1_greyscale' => array (			    'description' => 'ARMS A4 paper v2: 3 x 1 (Greyscale)',				'row' => 3,				'column' => 1,				'address' => 'voucher_formats/default_v2_3x1_greyscale.tpl'			),		);	function __construct($title){		global $con, $smarty, $sessioninfo, $config;		$con->sql_query('select * from branch where active=1 order by sequence,code');		while ($b=$con->sql_fetchassoc()){			$this->branches[$b['id']]=$b['code'];			$branches[]=$b;		}				$smarty->assign('branches',$branches);		if (!is_dir('templates/voucher_formats')) mkdir('templates/voucher_formats',0777);		//=========setting batch no========		if (!isset($_REQUEST['branch_id']))	$_REQUEST['branch_id']='';			$bid=get_request_branch(true);		if ($bid){			$filter="where branch_id=$bid";		}				$con->sql_query("select *						from mst_voucher_batch mvb						$filter						order by mvb.batch_no desc");		while($bat=$con->sql_fetchassoc()){			$batch_no[] = $bat;		}		$smarty->assign('batch_no', $batch_no);  		//======end setting=========		$this->construct_print_format();	    if (!$_REQUEST['date_to'])	$_REQUEST['date_to']=date("Y-m-d");	    if (!$_REQUEST['date_from'])	$_REQUEST['date_from']=date("Y-m-d",strtotime("-1 month +1 day",strtotime($_REQUEST['date_to'])));		// select all voucher setup value		$vs_list = array();		$q1 = $con->sql_query('select id, voucher_value from mst_voucher_setup order by voucher_value');				while($r = $con->sql_fetchrow($q1)){			$vs_list[$r['voucher_value']] = $r['voucher_value'];		}		$con->sql_freeresult($q1);		// need to check if customer never setup voucher before, load from config		if(!$vs_list) $vs_list = $config['voucher_value_prefix'];				$smarty->assign('vs_list',$vs_list);		 		parent::__construct($title);	}		private function construct_print_format($batch_type=''){		global $config, $smarty;				$config_arr = $config['voucher_print_template'];		if($batch_type=='member_redeem'){			$config_arr = $config['voucher_member_redeem_print_template'];		}				$this->format = $this->default_format;				if ($config_arr){			foreach ($config_arr as $key => $dummy){				if ($this->format[$key])	continue;				else $this->format[$key]=$dummy;			}//			$this->format=$config['voucher_print_template']+$this->format;		}		$smarty->assign('print_format', $this->format);	}	function _default(){	    $_REQUEST['branch_id']='';	    $this->voucher_list();	    exit;	}	function voucher_list(){		global $con, $smarty;		$form=$_REQUEST;		if (BRANCH_CODE != 'HQ')	$bid=get_request_branch();		else    $bid=get_request_branch(true);		//Create Filter		if ($form['search_value']){			$ps=$con->sql_query("select * from pos_settings where branch_id=$bid and setting_name='barcode_voucher_prefix'");			$r=$con->sql_fetchassoc($ps);			$patt_arr=array("/^VC/","/^$r[setting_value]/","/^vc/","/".strtolower($r['setting_value'])."/");			$search_value = substr(preg_replace($patt_arr, "",$form['search_value']),0,7);			$filter[] = "mv.code=".ms(str_pad($search_value,7,"0",STR_PAD_LEFT));		}else{			if ($bid != '')   				$filter[] = "mv.branch_id=$bid";			if ($form['batch_no'] != '')	$filter[] = "mv.batch_no=".mi($form['batch_no']);			if ($form['voucher_value'] != '')	$filter[] = "mv.voucher_value=".mi($form['voucher_value']);			if ($form['interbranch'] != '')	$filter[] = "mv.allow_interbranch like '%i:".mi($form['interbranch'])."%'";			if ($form['active'] != '')		$filter[] = "mv.active=".mi($form['active']);			if ($form['date_filter']){				if ($form['date_filter'] != "used_time")					$filter[] = "mv.$form[date_filter] between ".ms($form['date_from'])." and ".ms($form['date_to'].' 23:59:59');				else					$filter_by_pos=true;			}			if ($form['cancel_status'] != '')   $filter[] = "mv.cancel_status=".intval($form['cancel_status']);			if ($form['expired'] != ''){				if ($form['expired'] == 1){					$filter[] = "mv.cancel_status=0 and mv.active=1 and mv.valid_to != 0 and mv.valid_to <".ms(date("Y-m-d H:i:s"));					$expired_voucher=true;				}else					$filter[] = "mv.cancel_status=0 and mv.active=1 and mv.valid_to != 0 and mv.valid_to >".ms(date("Y-m-d H:i:s"));			}		}		if ($filter)	$where = " where ".join(' and ', $filter);		//===================== create pagination		$start = intval($_REQUEST['s']);		if (isset($_REQUEST['sz']))			$sz = intval($_REQUEST['sz']);		else			$sz = 50;					//get total voucher		// get batch no		$batch_rid=$con->sql_query("select mvb.*						from mst_voucher_batch mvb						left join mst_voucher mv on mv.batch_no=mvb.batch_no and mv.branch_id=mvb.branch_id 						$where						group by mvb.batch_no						order by mv.batch_no desc");		if ($con->sql_numrows($batch_rid)>0){			while ($btc=$con->sql_fetchassoc($batch_rid)){				$batch_arr[$btc['batch_no']]=$btc['batch_no'];			}									//filter out the expired voucher			if ($filter_by_pos || $expired_voucher){			//additional query: to avoid the query wrong use indexing				foreach($batch_arr as $batch_no){					$batch_vou_rid=$con->sql_query("select code									from mst_voucher mv			 						where batch_no =$batch_no and cancel_status=0");					while ($btc=$con->sql_fetchassoc($batch_vou_rid)){						$pos_filter[]= "pp.remark like '".$btc['code']."%'";					}					$con->sql_freeresult($batch_vou_rid);					if ($pos_filter){						$batch_vou_rid=$con->sql_query("select * from pos_payment pp  								left join pos on pos.id=pp.pos_id and pos.counter_id=pp.counter_id and pos.date=pp.date and pos.branch_id=pp.branch_id								where length(pp.remark)=12 and pos.cancel_status=0 and pp.type='Voucher' and (".join(" or ",$pos_filter).") and pp.adjust=0								group by pp.remark");						$total=$con->sql_numrows($batch_vou_rid);						//clear the batch if found, 						if ($filter_by_pos && $total<=0)	unset($batch_arr[$batch_no]);						if ($expired_voucher && $total == count($pos_filter))	 unset($batch_arr[$batch_no]);						$con->sql_freeresult($batch_vou_rid);						unset($pos_filter);					}else						unset($batch_arr[$batch_no]);					}			}		}		$con->sql_freeresult($batch_rid);		//$r = $con->sql_fetchrow();		$total = count($batch_arr);		$smarty->assign('total_row', $total);		if ($total > $sz){			if ($start > $total) $start = 0;			// create pagination			$pg="";			for ($i=0,$p=1;$i<$total;$i+=$sz,$p++){				$pg .= "<option value=$i";				if ($i == $start){					$pg .= " selected";				}				$pg .= ">$p</option>";			}			$pg .= "</select>&nbsp;&nbsp;";			$pg2 = "<b>Page</b> <select name=s1 onchange=\"form.s.selectedIndex=this.selectedIndex;f_a.submit();\">".$pg;			$smarty->assign("pagination2", "$pg2");			$pg = "<b>Page</b> <select name=s onchange=\"f_a.submit();\">".$pg;			$smarty->assign("pagination", "$pg");		}		$limit = "limit $start, $sz";				//======================================		if ($batch_arr){			$where_batch=" where mvb.batch_no in (".join(',',$batch_arr).")";				$sql_batch="select mvb.*,						branch.code as branch_desc,c_u.u as create_user, 						min(mv.code) as min_code, max(mv.code) as max_code,count(*) as voucher_qty, 						max(mv.activated) as activated,  max(mv.cancelled) as cancelled, canc_u.u as cancel_user, 						max(mv.is_print) as max_print, 						(select count(*) from mst_voucher mv2 							where mv2.batch_no=mv.batch_no and mv2.branch_id=mv.branch_id and mv2.active=1) as active_qty,						(select count(*) from mst_voucher mv3 							where mv3.batch_no=mv.batch_no and mv3.branch_id=mv.branch_id and mv3.cancel_status=1) as cancel_qty,											(select count(*) from mst_voucher mv4 							where mv4.batch_no=mv.batch_no and mv4.branch_id=mv.branch_id and mv4.is_print>=1) as print_qty											from mst_voucher_batch mvb						left join mst_voucher mv on mv.batch_no=mvb.batch_no and mv.branch_id=mvb.branch_id						left join branch on mvb.branch_id=branch.id						left join user c_u on mvb.create_user_id=c_u.id						left join user canc_u on mvb.cancel_user_id=canc_u.id						$where_batch 						group by mvb.batch_no						order by mvb.batch_no desc						$limit";			//print $sql_batch;			$con->sql_query($sql_batch);			while($vou_b=$con->sql_fetchassoc()){				if ($vou_b['voucher_qty'] == $vou_b['print_qty'])	$vou_b['printed']=1;				$voucher_batch[$vou_b['batch_no']] = $vou_b;			}				unset($vou_b);			$con->sql_freeresult();			//count voucher batch used in POS			foreach ($voucher_batch as $batch_no =>$dummy){				$sql_voucher="select * from mst_voucher where batch_no = $batch_no";				$con->sql_query($sql_voucher);				while($vou_c=$con->sql_fetchassoc()){					$or_filter[] = "pp.remark like ".ms($vou_c['code'].'%');				}				unset($vou_c);				$con->sql_freeresult();								if ($or_filter){					$remark_filter = "and (".implode(" or ", $or_filter).")";					$sql_used = "select count(*) as num_used,max(pos.pos_time) as max_pos_time from pos_payment pp 							left join pos on pp.pos_id=pos.id and pp.counter_id=pos.counter_id and pp.branch_id=pos.branch_id and pp.date=pos.date 							where pos.cancel_status=0 and pp.type='Voucher' and length(pp.remark)=12 and pp.adjust=0 $remark_filter";					$used_rid=$con->sql_query($sql_used);					if ($con->sql_numrows($used_rid) > 0){						$r=$con->sql_fetchassoc();						$voucher_batch[$batch_no]['num_used']=$r['num_used'];						$voucher_batch[$batch_no]['max_pos_time']=$r['max_pos_time'];					}					$con->sql_freeresult();					unset($or_filter,$r);				}			}			//check multiple info like voucher value or interbranch			$sql_v_a="select mvb.batch_no, mv.voucher_value, mv.allow_interbranch						from mst_voucher_batch mvb						left join mst_voucher mv on mv.batch_no=mvb.batch_no and mv.branch_id=mvb.branch_id						$where_batch						group by mv.voucher_value,mv.allow_interbranch,mvb.batch_no						order by mvb.batch_no";			$con->sql_query($sql_v_a);			while($vou_v_a=$con->sql_fetchassoc()){				$voucher_value[$vou_v_a['batch_no']][$vou_v_a['voucher_value']]=$vou_v_a['voucher_value'];				    //get longest branch 			    $arr_allow_interbranch=unserialize($vou_v_a['allow_interbranch']);				if (!$arr_allow_interbranch)	continue;//			    $arr_test[$vou_v_a['batch_no']]=array_merge(is_array($arr_test[$vou_v_a['batch_no']]) ? $arr_test[$vou_v_a['batch_no']] : array(),$arr_allow_interbranch);			    $allow_interbranch[$vou_v_a['batch_no']]['allow_interbranch']=$arr_allow_interbranch;			    			}			foreach ($voucher_batch as $batch_no => $other){				//check voucher value				ksort($voucher_value[$batch_no]);	            $voucher_batch[$batch_no]['voucher_value']= join(', ', $voucher_value[$batch_no]);	            //check allow interbranch				if ($allow_interbranch[$batch_no]['allow_interbranch']){					asort($allow_interbranch[$batch_no]['allow_interbranch']);					foreach ($allow_interbranch[$batch_no]['allow_interbranch'] as $bid => $bcode){						if (count($allow_interbranch_short)<3){								$allow_interbranch_short[$bid]=$bcode;						}else{							$allow_interbranch_short[]="...";							break;						}					}					$voucher_batch[$batch_no]['allow_interbranch_short']=join(", ",$allow_interbranch_short);					$voucher_batch[$batch_no]['allow_interbranch_full']=join(", ",$allow_interbranch[$batch_no]['allow_interbranch']);					unset($allow_interbranch_short);					unset($allow_interbranch[$batch_no]['allow_interbranch']);				}			}		}		$smarty->assign('voucher_batch',$voucher_batch);		$smarty->assign('num_start',$start);	    $this->display();	}		function voucher_list_data(){		global $con, $smarty, $sessioninfo, $config;		$by_batch=false;		$form=$_REQUEST;		$bid=get_request_branch(true);				if ($form['search_value'] || $sessioninfo['privilege']['MST_VOUCHER_PRINT']){			$ps=$con->sql_query("select * from pos_settings where branch_id=$bid and setting_name='barcode_voucher_prefix'");			$r1=$con->sql_fetchassoc($ps);			$setting_value = $r1['setting_value'];			$con->sql_freeresult($ps);		}				//Create Filter		if ($form['search_value']){			$patt_arr=array("/^VC/","/^$setting_value/","/^vc/","/".strtolower($setting_value)."/");			$search_value = substr(preg_replace($patt_arr, "",$form['search_value']),0,7);			$filter[] = "mv.code=".ms(str_pad($search_value,7,"0",STR_PAD_LEFT));					}else{			if ($bid != '')   				$filter[] = "mv.branch_id=".mi($bid);			if ($form['voucher_value'] != '')	$filter[] = "mv.voucher_value=".mi($form['voucher_value']);			if ($form['batch_no'] != ''){				$filter[] = "mv.batch_no=".mi($form['batch_no']);				$by_batch=true;			}						if ($form['interbranch'] != '')	$filter[] = "mv.allow_interbranch like '%i:".mi($form['interbranch'])."%'";			if ($form['active'] != '')		$filter[] = "mv.active=".mi($form['active']);			if ($form['date_filter']){				if ($form['date_filter'] != "used_time")					$filter[] = "mv.$form[date_filter] between ".ms($form['date_from'])." and ".ms($form['date_to'].' 23:59:59');				else					$filter_by_pos=true;			}			if ($form['cancel_status'] != '')   $filter[] = "mv.cancel_status=".intval($form['cancel_status']);			if ($form['expired'] != ''){				if ($form['expired'] == 1){					$filter[] = "mv.cancel_status=0 and mv.active=1 and mv.valid_to != 0 and mv.valid_to <".ms(date("Y-m-d H:i:s"));					$expired_voucher=true;				}else					$filter[] = "mv.cancel_status=0 and mv.active=1 and mv.valid_to != 0 and mv.valid_to >".ms(date("Y-m-d H:i:s"));			}			if($form['active_remark']){				$filter[] = "mv.active_remark=".ms($form['active_remark']);			}		}		if ($filter)	$where = " where ".join(' and ', $filter);		// create pagination		$start = intval($_REQUEST['s']);		if (isset($_REQUEST['sz']))			$sz = intval($_REQUEST['sz']);		else			$sz = 50;		//get total voucher		$con->sql_query("select mv.*						from mst_voucher mv 						$where"); 		$total=$con->sql_numrows();		if ($total>0){			while($r = $con->sql_fetchassoc()){				if ($filter_by_pos || $expired_voucher)					$voucher_pos[$r['batch_no']][$r['code']] = "pp.remark like '".$r['code']."%'";				else					$voucher_data[] = ms($r['code']);			}			$con->sql_freeresult();		}						if (($filter_by_pos || $expired_voucher) && $voucher_pos){			if($filter_by_pos){				$pp_filter = " and pos.pos_time between ".ms($form['date_from'])." and ".ms($form['date_to'].' 23:59:59');			}			//filter with pos payment			foreach($voucher_pos as $batch_no=>$data){				$batch_vou_rid=$con->sql_query("select pp.remark from pos_payment pp  						left join pos on pos.id=pp.pos_id and pos.counter_id=pp.counter_id and pos.date=pp.date and pos.branch_id=pp.branch_id						where length(pp.remark)=12 and pos.cancel_status=0 and pp.type='Voucher' and (".join(" or ",$data).") and pp.adjust=0 $pp_filter						group by pp.remark");				$rtotal=$con->sql_numrows($batch_vou_rid);				if ($rtotal>0){					while($r=$con->sql_fetchassoc($batch_vou_rid)){						$voucher_remark=substr($r['remark'],0,7);						if($filter_by_pos){							$voucher_data[]=ms($voucher_remark);						}elseif($expired_voucher){							unset($voucher_pos[$batch_no][$voucher_remark]);						}					}				}							$con->sql_freeresult($batch_vou_rid);			}						//final combine for expired voucher			if ($expired_voucher && $voucher_pos){				foreach($voucher_pos as $batch_no=>$data){					foreach($data as $code=>$dummy){						$voucher_data[]=ms($code);					}				}			}					$total=count($voucher_data);		}		$smarty->assign('total_row', $total);		if ($total > $sz){			if ($start > $total) $start = 0;			$pg="";			for ($i=0,$p=1;$i<$total;$i+=$sz,$p++){				$pg .= "<option value=$i";				if ($i == $start){					$pg .= " selected";				}				$pg .= ">$p</option>";			}			$pg .= "</select>&nbsp;&nbsp;";			$pg2 = "<b>Page</b> <select name=s1 onchange=\"form.s.selectedIndex=this.selectedIndex;f_a.submit();\">".$pg;			$smarty->assign("pagination2", "$pg2");			$pg = "<b>Page</b> <select name=s onchange=\"f_a.submit();\">".$pg;			$smarty->assign("pagination", "$pg");		}		$limit = "limit $start, $sz";		$voucher = array();				if ($voucher_data){			if(!$setting_value){				$voucher_prefix="VC";			}else{				$voucher_prefix=strtoupper($setting_value);			}			$where_voucher = "where mv.code in (".join(",",$voucher_data).")";							//get data			$sql="select SQL_CALC_FOUND_ROWS mv.*, LPAD(mv.code,7,0) as code, if(mv.active = 1,'Yes','No') as active,				mv.activated, branch.code as branch_desc, c_u.u as create_user, a_u.u as active_user, canc_u.u as cancel_user, 				(select count(*) from mst_voucher mv4 					where mv4.batch_no=mv.batch_no and mv4.branch_id=mv.branch_id and mv4.is_print>=1) as print_qty				from mst_voucher mv				left join mst_voucher_batch mvb on mvb.batch_no=mv.batch_no and mvb.branch_id=mv.branch_id				left join branch on mv.branch_id=branch.id				left join user c_u on mv.create_user_id=c_u.id				left join user a_u on mv.active_user_id=a_u.id				left join user canc_u on mv.cancel_user_id=canc_u.id				$where_voucher				group by mv.code				order by mv.code $limit";						$data_rid=$con->sql_query($sql);			//Count total num row of data			$q2 = $con->sql_query("SELECT FOUND_ROWS()");			$tmp =$con->sql_fetchrow($q2);			$con->sql_freeresult($q2);			$total_rows = mi($tmp[0]);						while($vou=$con->sql_fetchassoc($data_rid)){				if ($by_batch){					$whole_voucher['cancel_status']=$vou['cancel_status'];					if ($total_rows == $vou['print_qty'])	$whole_voucher['printed']=1;				}								if ($vou['allow_interbranch']){					$count=0;					$arr_allow_interbranch=unserialize($vou['allow_interbranch']);					if ($arr_allow_interbranch){						asort($arr_allow_interbranch);									foreach ($arr_allow_interbranch as $bid => $bcode){							if ($count<3){									$allow_interbranch_short[]=$bcode;								$count++;							}else{								$allow_interbranch_short[]="...";								break;							}						}								$vou['allow_interbranch_short']=join(", ",$allow_interbranch_short);						$vou['allow_interbranch_full']=join(", ",$arr_allow_interbranch);						unset($allow_interbranch_short, $arr_allow_interbranch);					}				}					$sql_used = "select count(*) as num_used,max(pos.pos_time) as max_pos_time from pos_payment pp 						left join pos on pp.pos_id=pos.id and pp.counter_id=pos.counter_id and pp.branch_id=pos.branch_id and pp.date=pos.date 						where pos.cancel_status=0 and pp.type='Voucher' and length(pp.remark)=12 and pp.remark like ".ms($vou['code'].'%')." and pp.adjust=0 $pp_filter";								$used_rid=$con->sql_query($sql_used);				if ($con->sql_numrows($used_rid) > 0){					$r=$con->sql_fetchassoc();					$vou['num_used']=$r['num_used'];					$vou['max_pos_time']=$r['max_pos_time'];				}								$con->sql_freeresult($used_rid);								if($filter_by_pos && !$vou['num_used']){	// no voucher used					continue;				}								if($sessioninfo['privilege']['MST_VOUCHER_PRINT']){					$barcode=str_pad($vou['code'],7,"0",STR_PAD_LEFT).str_pad(($vou['voucher_value']*100),5,"0",STR_PAD_LEFT);					$vou['secur_barcode']=$voucher_prefix.$barcode.substr(encrypt_for_verification($barcode),0,2);				}					$voucher[] = $vou;			}			$con->sql_freeresult($data_rid);		}				$smarty->assign('whole_voucher',$whole_voucher);		$smarty->assign('voucher',$voucher);		$smarty->assign('num_start',$start);				$smarty->display('masterfile_voucher.data.tpl');	}		function update_voucher(){		global $con;		$form=$_REQUEST;	    foreach ($form['changes_trigger'] as $voucher_code => $trig){			if (!$trig) continue;			$con->sql_query("update mst_voucher set voucher_value=".ms($form['voucher_value_data'][$voucher_code])." where code=$voucher_code");			log_br($sessioninfo['id'], 'VOUCHER',$form['data_batch_no'], "Update voucher batch no: $form[data_batch_no], Code: $voucher_code, Value to: ".intval($form['voucher_value_data'][$voucher_code]));		}			    $this->voucher_list_data();	}		function ajax_cancel_batch($ajax=true){		global $con, $sessioninfo;				$form=$_REQUEST;		//check voucher if cancelled		$sql="select * from mst_voucher where batch_no=$form[batch_no] and cancel_status=0 limit 1";				$con->sql_query($sql);		if ($con->sql_numrows() >0){			$time_stamp=date("Y-m-d H:i:s");		    $upd['cancel_status']=1;		    $upd['cancel_remark']=$form['cancel_remark'];			$upd['cancelled']=$time_stamp;			$upd['cancel_user_id']=$sessioninfo['id'];			$upd['last_update']=$time_stamp;			$con->sql_query("update mst_voucher_batch set ".mysql_update_by_field($upd)." where batch_no=$form[batch_no] and cancel_status=0");			$con->sql_query("update mst_voucher set ".mysql_update_by_field($upd)." where batch_no=$form[batch_no] and cancel_status=0");			log_br($sessioninfo['id'], 'VOUCHER',$form['batch_no'], "Cancel voucher batch no: $form[batch_no]");						if ($ajax)	print "ok";		}	}		function ajax_cancel_voucher(){		global $con, $sessioninfo;		$form=$_REQUEST;		$code=str_pad($form['code'],7,"0",STR_PAD_LEFT);		//check voucher if can cancel		$sql="select * from mst_voucher where code=".ms($code);		$con->sql_query($sql);		if ($con->sql_numrows() >0){			$r=$con->sql_fetchassoc();/*            if ($r['is_print']>0 or $r['active']==1){            	print "Unable to cancel printed / actived voucher.";			}else{*/			    $sql_batch="select * from mst_voucher where batch_no=$r[batch_no] and cancel_status=0 ";				$con->sql_query($sql_batch);				//cancel whole batch if found only 1 record haven't cancelled				if ($con->sql_numrows() == 1){				    $_REQUEST['batch_no']=$r['batch_no'];					$this->ajax_cancel_batch(false);					exit;				}				$time_stamp=date("Y-m-d H:i:s");			    $upd['cancel_status']=1;			    $upd['cancel_remark']=$form['cancel_remark'];				$upd['cancelled']=$time_stamp;				$upd['cancel_user_id']=$sessioninfo['id'];				$upd['last_update']=$time_stamp;				$con->sql_query("update mst_voucher set ".mysql_update_by_field($upd)." where code=$code");				log_br($upd['cancel_user_id'], 'VOUCHER',$code, "Cancel voucher code: $form[code]");				print "ok";//			}		}	}		function ajax_load_batch(){		global $con, $sessioninfo;		$bid=get_request_branch(true);		if ($bid)	$where = "where branch_id=$bid";				$options="";		$sql="select batch_no, LPAD(min(code),7,0) as min_code, LPAD(max(code),7,0) as max_code from mst_voucher			$where 	 		group by batch_no			order by batch_no desc";        $con->sql_query($sql);                $total=$con->sql_numrows();        if ($total){        	if ($total >1 && $_REQUEST['data']) $options.="<option value=''>All</option>";        	        while ($r=$con->sql_fetchassoc()){	            $options.="<option min='$r[min_code]' max='$r[max_code]' value='$r[batch_no]'>$r[batch_no]</option>";			}				print $options;		}else{			print "NO";		}	}	function ajax_check_printed_voucher(){		global $con,$sessioninfo,$config,$LANG;		$bid=$_REQUEST['branch_id'];		$batch_no=$_REQUEST['batch_no'];        $from_code=str_pad($_REQUEST['from_code'],7,"0",STR_PAD_LEFT);        $to_code=str_pad($_REQUEST['to_code'],7,"0",STR_PAD_LEFT);                $filter_arr[]="is_print>=1";        if ($bid)	$filter_arr[] = "branch_id='$bid'";        if ($batch_no)	$filter_arr[] = "batch_no='$batch_no'";        if ($_REQUEST['from_code'] && $_REQUEST['to_code'])	$filter_arr[] = "code between '$from_code' and '$to_code'";		$filter=join(" and ", $filter_arr);        		$sql="select * from mst_voucher			where $filter";        $con->sql_query($sql);		if ($con->sql_numrows() >0){		    //no reprint voucher		    if ((BRANCH_CODE == "HQ" && !$config['voucher_hq_reprint']) ||				(BRANCH_CODE != "HQ" && !$config['voucher_subbranch_reprint'])){				printf($LANG["VOU_BRANCH_REPRINT_V"],BRANCH_CODE);			}else				print "got";		}else{ 		    //no print voucher							    if ((BRANCH_CODE == "HQ" && !$config['voucher_hq_print']) ||				(BRANCH_CODE != "HQ" && !$config['voucher_subbranch_print'])){				printf($LANG["VOU_BRANCH_PRINT_V"],BRANCH_CODE);			}else				print "ok";		}	}		function print_voucher(){		global $con,$smarty,$config,$sessioninfo,$LANG;		//print_r($_REQUEST);		$from_code=str_pad($_REQUEST['from_code'],7,"0",STR_PAD_LEFT);		$to_code=str_pad($_REQUEST['to_code'],7,"0",STR_PAD_LEFT);		$batch_no=mi($_REQUEST['batch_no']);		$print_remark=$_REQUEST['print_remark'];		$print_format=$_REQUEST['print_format'];		$s=0;		$row=0;		$col=0;				$reprint_reason=$_REQUEST['p'];		$branch_id=get_request_branch();				// get batch info		$con->sql_query("select * from mst_voucher_batch where batch_no=$batch_no");		$batch_info = $con->sql_fetchassoc();		$con->sql_freeresult();				if($batch_info['batch_type']!='normal'){			// need to reset print format array			$this->construct_print_format($batch_info['batch_type']);		}				if($batch_info['batch_type']=='member_redeem'){			$print_format = $_REQUEST['member_redeem_print_format'];			//$from_code = mi($from_code);			//$to_code = mi($to_code);		}		// check printing format		if(!isset($this->format[$print_format])){			print "Invalid Printing Format";			exit;		}				//get prefix header		$sql_pre = "select * from pos_settings ps					where ps.branch_id = $branch_id and ps.setting_name='barcode_voucher_prefix'";        $sql_p=$con->sql_query($sql_pre);	    $p=$con->sql_fetchassoc($sql_p);		if (!$p['setting_value']){			$voucher_prefix="VC";		}else{            $voucher_prefix=strtoupper($p['setting_value']);		}				//get voucher data		if ($from_code > $to_code){			print "To code is larger than from code";			exit;		}		$total_code = $to_code-$from_code+1;				//print own branch's voucher only		$sql = "select mv.*, u1.u as create_user_name ,branch.code as branch_code from mst_voucher mv		        left join branch on mv.branch_id=branch.id		        left join user u1 on mv.create_user_id=u1.id				where mv.code between '$from_code' and '$to_code' and mv.batch_no=$batch_no				order by mv.code";		//print $sql;        $sql_r=$con->sql_query($sql);                if ($con->sql_numrows($sql_r) <=0){			print $LANG["VOU_CODE_NO_EXIST_V"];			exit;		}else{		    $voucher_qty=$con->sql_numrows($sql_r);			$time_stamp=date("Y-m-d H:i:s");		    while($r=$con->sql_fetchassoc($sql_r)){				if (BRANCH_CODE != 'HQ' && $r['branch_id'] != $branch_id){					print $LANG["VOU_CODE_NOT_BRANCH_V"];					exit;				}elseif ($r['cancel_status'] == '1'){					print $LANG["VOU_CODE_HAD_CANCELLED_V"];					exit;				}elseif ($r['batch_no'] != $batch_no){				    printf($LANG["VOU_CODE_NOT_BATCH_V"],$batch_no);				    exit;				}elseif ($r['is_print'] == 0){				    //no print voucher									    if ((BRANCH_CODE == "HQ" && !$config['voucher_hq_print']) ||						(BRANCH_CODE != "HQ" && !$config['voucher_subbranch_print'])){						printf($LANG["VOU_BRANCH_PRINT_V"],BRANCH_CODE);						exit;					}								}elseif ($r['is_print'] >= 1){				    //no reprint voucher				    if ((BRANCH_CODE == "HQ" && !$config['voucher_hq_reprint']) ||						(BRANCH_CODE != "HQ" && !$config['voucher_subbranch_reprint'])){						printf($LANG["VOU_BRANCH_REPRINT_V"],BRANCH_CODE);						exit;					}				}				$r['barcode_voucher_prefix']=$voucher_prefix;								$barcode=str_pad($r['code'],7,"0",STR_PAD_LEFT).str_pad(($r['voucher_value']*100),5,"0",STR_PAD_LEFT);				$r['secur_barcode']=$barcode.substr(encrypt_for_verification($barcode),0,2);								$r['print_remark']=$print_remark;				$r['reprint_reason']=$reprint_reason;				$r['value_length']=strlen($r['voucher_value']);				//split value to ringgit and cent				$voucher_amount=number_format($r['voucher_value'],2);				 				list($r['ringgit'], $r['cent'])=explode(".",$voucher_amount);				if ($this->format[$print_format]['column']==1){					$voucher[$s][$row]=$r;						//data for bud					$bud[$s][$row]['ip']=$_SERVER['REMOTE_ADDR'];					$bud[$s][$row]['branch_code']=$r['branch_code'];					$bud[$s][$row]['timestamp']=$time_stamp;					$bud[$s][$row]['print_by']=$sessioninfo['u'];					$bud[$s][$row]['valid_from']=$r['valid_from'];					$bud[$s][$row]['valid_to']=$r['valid_to'];					$bud[$s][$row]['register_by']=$r['create_user_name'];					$bud[$s][$row]['barcode']=$r['barcode_voucher_prefix'].$r['secur_barcode'];					$bud[$s][$row]['amount']=$r['voucher_value'];					$bud[$s][$row]['register_time']=$r['added'];	                $bud[$s][$row]['register_by']=$r['create_user_name'];                }else{					$voucher[$s][$row][$col]=$r;				}								if ($row == ($this->format[$print_format]['row']-1) && $col == ($this->format[$print_format]['column']-1)){					$s=$s+1;                    $row=0;                    $col=0;				}else if ($col < ($this->format[$print_format]['column']-1)){					$col=$col+1;				}else{					$col = 0;					$row=$row+1;				}			}						$pages = $this->get_no_of_sheet($print_format, $voucher_qty);			$time_stamp=date("Y-m-d H:i:s");						//2 and above column style			if ($this->format[$print_format]['column']>1){				foreach ($voucher as $key => $rc){					foreach($rc as $row => $ci){						foreach($ci as $col => $item){							$upd['is_print']=$item['is_print']+1;			                $upd['last_update']=$time_stamp;							if ($upd['is_print'] > 1 )  $upd['reprint_reason']=$reprint_reason;							else	$upd['print_remark']=$print_remark;										$con->sql_query("update mst_voucher set ".mysql_update_by_field($upd)." where code=".ms($item['code']));							unset($upd);						}					}				}			}else{				//1 column only				foreach ($voucher as $key => $ri){					foreach($ri as $ro => $item){						$upd['is_print']=$item['is_print']+1;		                $upd['last_update']=$time_stamp;						if ($upd['is_print'] > 1 )  $upd['reprint_reason']=$reprint_reason;						else	$upd['print_remark']=$print_remark;								$con->sql_query("update mst_voucher set ".mysql_update_by_field($upd)." where code=".ms($item['code']));						unset($upd);					}				}			}						if($batch_info['batch_type']=='member_redeem'){				$print_format = $_REQUEST['member_redeem_print_format'];				$this->print_voucher_by_member_redeem($voucher, $print_format);				exit;			}					log_br($sessioninfo['id'], 'VOUCHER',$batch_no, "Print voucher code: $from_code to $to_code");			$smarty->assign('no_cutting_line',$_REQUEST['no_cutting_line']);			$smarty->assign('preprinted',$_REQUEST['preprinted']);						$smarty->assign('voucher',$voucher);			$smarty->assign('pages',$pages);			$smarty->assign('bud',$bud);  			$smarty->assign('max_voucher',count($voucher));  			  			$address=$this->format[$print_format]['address'];  			  			//print_r($voucher);  						$smarty->display($address);		}	}		function get_no_of_sheet($print_format, $print_qty){	    $print_out['row']=$this->format[$print_format]['row'];	    $print_out['column']=$this->format[$print_format]['column'];	    $pcs=$print_out['row']*$print_out['column'];	    $print_out['sheet']=ceil($print_qty/$pcs);	    $print_out['pcs']=$print_out['sheet']*$pcs;		return $print_out;	}		private function print_voucher_by_member_redeem($voucher, $print_format){		global $con, $smarty, $sessioninfo, $config;				$print_format = $_REQUEST['member_redeem_print_format'];				$voucher_list = array();		if ($this->format[$print_format]['column']>1){			// column >= 2			foreach ($voucher as $key => $rc){				foreach($rc as $row => $ci){					foreach($ci as $col => $item){						$voucher_list[$item['member_nric']][] = $item;					}				}			}		}else{			// 1 column format			foreach ($voucher as $key => $ri){				foreach($ri as $ro => $item){					$voucher_list[$item['member_nric']][] = $item;				}			}		}		unset($voucher);	// unset to clear memory, since it is no longer use				//print_r($voucher_list);		$page_list = array();		$mem_info = array();				$row = $this->format[$print_format]['row'];		$col = $this->format[$print_format]['column'];				if(!$row || !$col)	die("Invalid Print format Row and Column");				$page_num = 0;		$row_num = 0;		$col_num = 0;				// construct page list		foreach($voucher_list as $nric => $vc_list){			foreach($vc_list as $vc){				if($col_num>=$col){					$row_num++;					$col_num = 0;				}								if($row_num>=$row){					$page_num++;					$row_num = 0;					$col_num = 0;				}				$page_list[$page_num]['nric'] = $nric;				$page_list[$page_num]['page_voucher'][$row_num][$col_num] = $vc;				$col_num++;			}									$page_num++;			$row_num = 0;			$col_num = 0;		}		unset($voucher_list); // clear memory				// get membership info		foreach($page_list as $page => $page_data){			$nric = $page_data['nric'];			$con->sql_query("select * from membership where nric=".ms($nric));			$mem_info[$nric] = $con->sql_fetchassoc();			$con->sql_freeresult();		}				//print_r($mem_info);				$smarty->assign('mem_info', $mem_info);		$smarty->assign('page_list', $page_list);		$print_info = $this->format[$print_format];				$this->display($this->format[$print_format]['address']);	}		function export_voucher(){		global $con, $sessioninfo;		$form = $_REQUEST;				$voucher_prefix_code = get_pos_settings_value($form['branch_id'], "barcode_voucher_prefix");				$q1 = $con->sql_query("select *						 from mst_voucher mv						 where batch_no = ".ms($form['batch_no'])." and branch_id = ".mi($form['branch_id']));						 		while($r = $con->sql_fetchassoc($q1)){			$barcode=str_pad($r['code'],7,"0",STR_PAD_LEFT).str_pad(($r['voucher_value']*100),5,"0",STR_PAD_LEFT);			$secure_voucher=$barcode.substr(encrypt_for_verification($barcode),0,2);			$voucher_code = $voucher_prefix_code.$secure_voucher;			$contents[] = $voucher_code.",".$r['voucher_value']."\r\n";		}		$header = "Voucher_Code,Voucher_Value\n";		$content = $header.join("", $contents);		header("Content-type: text/plain");		header('Content-Disposition: attachment;filename=Voucher_'.$form['batch_no'].'_'.get_branch_code($form['branch_id']).'.csv');		print $content;	}}if ($_REQUEST['a'] == 'voucher_list_data' || $_REQUEST['a'] == 'update_voucher')  $title = "Voucher Listing By Codes";else $title = "Voucher Listing By Batch No";$Voucher=new Voucher($title);?>