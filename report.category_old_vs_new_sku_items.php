<?php/*1/5/2012 2:18:43 PM Justin- Fixed the contributions sum up bugs for group daily and monthly.- Fixed the contributions and sub total from sku data is not calculated properly.- Fixed some of the bugs found causing the figures is not table with daily category sales report.4/3/2013 2:35 PM Fithri- excluded all the non-sales branch from report (follow config)4/28/2014 11:51 AM Fithri- add option to filter out inactive SKU items5/20/2014 10:37 AM Justin- Enhanced to have export feature for itemise table.6/4/2014 2:48 PM Justin- Enhanced to use new method for export itemise into CSV.6/5/2014 11:54 AM Justin- Bug fixed of some info were missing after new method applied.6/18/2014 9:53 AM Fithri- report privilege & config checking is set to be the same as in menu (menu.tpl)9/27/2016 10:31 AM Andy- Fixed sql error when filter by sku type.2/20/2020 5:07 PM William- Enhanced to change connection "$con" to use report server connection "$con_multi".*/include("include/common.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");//if ($sessioninfo['level']<9999) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('REPORTS_SALES')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'REPORTS_SALES', BRANCH_CODE), "/index.php");class SALES_REPORT_CATEGORY extends Module{	var $branches_group = array();  // use to hold all branches group data	var $branches = array();    // use to hold all branches data	var $branch_id; // use to store user selected branch id	var $branch_id_list = array(); // use to store all branch need to generate		var $tb = array();	var $tb_total = array();	var $cat_child_info = array();	    function __construct($title){		global $con, $smarty, $sessioninfo, $config, $con_multi, $appCore;				if(!$con_multi)	$con_multi = $appCore->reportManager->connectReportServer();		$this->init_selection();		if(BRANCH_CODE == 'HQ'){			$this->branch_id = mi($_REQUEST['branch_id']);			if($this->branch_id<0){ // branch group selected				$this->bgid = abs($this->branch_id);				if($this->branches_group){					foreach($this->branches_group['items'][$this->bgid] as $bid=>$b){											if ($config['sales_report_branches_exclude']) {							$branch_code = $b['code'];							if (in_array($branch_code,$config['sales_report_branches_exclude'])) {								// print "$branch_code skipped88<br />";								continue;							}						}											$this->branch_id_list[] = $bid;					}				}			}elseif($this->branch_id)   $this->branch_id_list[] = $this->branch_id;			else{				foreach($this->branches as $bid=>$b){									if ($config['sales_report_branches_exclude']) {						$branch_code = $b['code'];						if (in_array($branch_code,$config['sales_report_branches_exclude'])) {							// print "$branch_code skipped99<br />";							continue;						}					}					                    $this->branch_id_list[] = $bid;				}			}		}else{            $this->branch_id = mi($sessioninfo['branch_id']);            $this->branch_id_list[] = mi($sessioninfo['branch_id']);		}   				$this->date_from = $_REQUEST['from'];		$this->date_to = $_REQUEST['to'];		$this->date_from_key = date("Ymd", strtotime($this->date_from));		$this->date_to_key = date("Ymd", strtotime($this->date_to));		        $this->cat_id  = mi($_REQUEST['cat_id']);        $this->sku_type = $_REQUEST['sku_type'];        $this->by_monthly = mi($_REQUEST['by_monthly']);        $this->item_age = mi($_REQUEST['item_age']);        		parent::__construct($title);	}		function _default(){	    global $sessioninfo, $smarty;				if($_REQUEST['subm']){			if(!$_REQUEST['is_itemise_export']){				$this->generate_report();				if(isset($_REQUEST['output_excel'])){					include_once("include/excelwriter.php");					log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Daily Category Sales Report To Excel");					Header('Content-Type: application/msexcel');					Header('Content-Disposition: attachment;filename=arms'.time().'.xls');					print ExcelWriter::GetHeader();					$smarty->assign('no_header_footer', 1);				}			}else{				$this->export_itemise_info();			}		}				$this->display();	}		private function init_selection(){	    global $con, $smarty, $con_multi;	            if (!$_REQUEST['to']) $_REQUEST['to'] = date('Y-m-d');		if (!$_REQUEST['from']) $_REQUEST['from'] = date('Y-m-d', strtotime("-1 month"));				$con_multi->sql_query("select * from branch where active=1 and id>0 order by sequence,code");		while($r = $con_multi->sql_fetchassoc()){			$this->branches[$r['id']] = $r;		}		$con_multi->sql_freeresult();		$smarty->assign('branches',$this->branches);				// load branch group header		$con_multi->sql_query("select * from branch_group",false,false);		while($r = $con_multi->sql_fetchassoc()){            $this->branches_group['header'][$r['id']] = $r;		}		$con_multi->sql_freeresult();		if($this->branches_group){            // load branch group items			$con_multi->sql_query("select bgi.*,branch.code,branch.description			from branch_group_items bgi			left join branch on bgi.branch_id=branch.id			where branch.active=1			order by branch.sequence, branch.code");			while($r = $con_multi->sql_fetchassoc()){		        $this->branches_group['items'][$r['branch_group_id']][$r['branch_id']] = $r;		        $this->branches_group['have_group'][$r['branch_id']] = $r['branch_id'];			}			$con_multi->sql_freeresult();		}		$smarty->assign('branches_group',$this->branches_group);				$con_multi->sql_query("select * from sku_type order by code");		$smarty->assign('sku_type', $con_multi->sql_fetchrowset());		$con_multi->sql_freeresult();	}		private function generate_report(){		global $con, $smarty;				$options = array();		if(isset($_REQUEST['output_excel']) && $_REQUEST['include_sub_cat']){			$options['include_sub_cat'] = true;		}			$this->generate_category_data($this->cat_id, $options);				$report_title = array();		if($this->branch_id_list){			foreach($this->branch_id_list as $bid){				$bcode[] = $this->branches[$bid]['code'];			}			if(count($bcode) > 1) $branch_desc = "All";			else $branch_desc = join(', ', $bcode);			$report_title[] = "Branch: ".$branch_desc;		}		$sku_type = ($_REQUEST['sku_type']) ? $_REQUEST['sku_type'] : "All";		$report_title[] = "SKU Type: ".$sku_type;		$report_title[] = "Date: ".$this->date_from." to ".$this->date_to;		$smarty->assign('report_title', join('&nbsp;&nbsp;&nbsp;&nbsp;', $report_title));				$this->assign_cat_report_data();	}		private function assign_cat_report_data($show_tpl = false){		global $con, $smarty;					$this->construct_tb_total();				if($this->by_monthly){  // report group by month			$this->group_data_to_monthly($this->tb, $this->tb_total);		}		$smarty->assign('tb', $this->tb);		$smarty->assign('tb_total', $this->tb_total);		$smarty->assign('cat_child_info', $this->cat_child_info);		$smarty->assign('root_cat_info', $this->root_cat_info);		$smarty->assign('curr_cat_info', $this->root_cat_info);		//if($_REQUEST['show_tran_count'])	$smarty->assign('show_tran_count', 1);		//print_r($this->cat_child_info);				if($show_tpl){            $this->display('report.category_old_vs_new_sku_items.table.tpl');		}	}		private function construct_tb_total(){		// construct total table		if($this->tb){			foreach($this->tb as $root_cat_id=>$cat_list){				foreach($cat_list as $cat_id=>$cat){					if($cat['data']){						foreach($cat['data'] as $date_key=>$status_list){							foreach($status_list as $item_status=>$r){								// row total by category								$this->tb[$root_cat_id][$cat_id]['data'][$item_status]['total']['amt']+=$r['amt'];								$this->tb[$root_cat_id][$cat_id]['data'][$item_status]['total']['cost']+=$r['cost'];								$this->tb[$root_cat_id][$cat_id]['data'][$item_status]['total']['qty']+=$r['qty'];								//$this->tb[$item_status][$root_cat_id][$cat_id]['data']['total']['tran_count']+=$r['tran_count'];																// column total by date								$this->tb_total[$root_cat_id]['data'][$date_key][$item_status]['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['data'][$date_key][$item_status]['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['data'][$date_key][$item_status]['qty'] += $r['qty'];								if($this->is_sub_cat){									$this->tb_total[$root_cat_id]['total']['total'][$item_status]['amt'] += $r['amt'];									$this->tb_total[$root_cat_id]['total']['total'][$item_status]['cost'] += $r['cost'];									$this->tb_total[$root_cat_id]['total']['total'][$item_status]['qty'] += $r['qty'];									$this->tb_total[$root_cat_id]['data']['total'][$item_status]['amt'] += $r['amt'];									$this->tb_total[$root_cat_id]['data']['total'][$item_status]['cost'] += $r['cost'];									$this->tb_total[$root_cat_id]['data']['total'][$item_status]['qty'] += $r['qty'];								}																// sub total for old & new items								$this->tb_total[$root_cat_id]['sub_total'][$item_status]['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['sub_total'][$item_status]['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['sub_total'][$item_status]['qty'] += $r['qty'];								$this->tb_total[$root_cat_id]['sub_total'][$date_key][$item_status]['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['sub_total'][$date_key][$item_status]['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['sub_total'][$date_key][$item_status]['qty'] += $r['qty'];																// grand total								$this->tb_total[$root_cat_id]['total'][$date_key]['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['total'][$date_key]['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['total'][$date_key]['qty'] += $r['qty'];								$this->tb_total[$root_cat_id]['total']['total']['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['total']['total']['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['total']['total']['qty'] += $r['qty'];								$this->tb_total[$root_cat_id]['data']['total']['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['data']['total']['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['data']['total']['qty'] += $r['qty'];							}						}					}										if($cat['fm_data']){						//print_r($cat['fm_data']);						foreach($cat['fm_data'] as $date_key=>$status_list){							foreach($status_list as $item_status=>$r){								// row total by category								$this->tb[$root_cat_id][$cat_id]['fm_data'][$item_status]['total']['amt']+=$r['amt'];								$this->tb[$root_cat_id][$cat_id]['fm_data'][$item_status]['total']['cost']+=$r['cost'];								$this->tb[$root_cat_id][$cat_id]['fm_data'][$item_status]['total']['qty']+=$r['qty'];								//print "+=".$r['tran_count']."<br />";								//$this->tb[$item_status][$root_cat_id][$cat_id]['fm_data']['total']['tran_count']+=$r['tran_count'];																// column total by date								$this->tb_total[$root_cat_id]['fm_data'][$date_key][$item_status]['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['fm_data'][$date_key][$item_status]['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['fm_data'][$date_key][$item_status]['qty'] += $r['qty'];								if($this->is_sub_cat){									$this->tb_total[$root_cat_id]['total']['total'][$item_status]['amt'] += $r['amt'];									$this->tb_total[$root_cat_id]['total']['total'][$item_status]['cost'] += $r['cost'];									$this->tb_total[$root_cat_id]['total']['total'][$item_status]['qty'] += $r['qty'];									$this->tb_total[$root_cat_id]['fm_data']['total'][$item_status]['amt'] += $r['amt'];									$this->tb_total[$root_cat_id]['fm_data']['total'][$item_status]['cost'] += $r['cost'];									$this->tb_total[$root_cat_id]['fm_data']['total'][$item_status]['qty'] += $r['qty'];								}																// row total by category								$this->tb_total[$root_cat_id]['fm_data'][$item_status]['total']['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['fm_data'][$item_status]['total']['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['fm_data'][$item_status]['total']['qty'] += $r['qty'];																// sub total for old & new items								$this->tb_total[$root_cat_id]['sub_total'][$item_status]['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['sub_total'][$item_status]['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['sub_total'][$item_status]['qty'] += $r['qty'];								$this->tb_total[$root_cat_id]['sub_total'][$date_key][$item_status]['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['sub_total'][$date_key][$item_status]['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['sub_total'][$date_key][$item_status]['qty'] += $r['qty'];																// grand total								$this->tb_total[$root_cat_id]['total'][$date_key]['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['total'][$date_key]['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['total'][$date_key]['qty'] += $r['qty'];								$this->tb_total[$root_cat_id]['total']['total']['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['total']['total']['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['total']['total']['qty'] += $r['qty'];								$this->tb_total[$root_cat_id]['fm_data']['total']['amt'] += $r['amt'];								$this->tb_total[$root_cat_id]['fm_data']['total']['cost'] += $r['cost'];								$this->tb_total[$root_cat_id]['fm_data']['total']['qty'] += $r['qty'];							}						}					}				}			}			//print_r($this->tb);			//print_r($this->tb_total);		}	}		function generate_category_data($root_cat_id, $options = array()){		global $con, $smarty, $sessioninfo,$config, $con_multi;				$root_cat_id = mi($root_cat_id);				//print "get cat id = $root_cat_id<br />";				if(!$this->branch_id_list)  return;				// generate date column data		if(!$this->uq_cols)	$this->generate_header_date_label();				if($root_cat_id){  // got category clicked			$con_multi->sql_query("select * from category where id=$root_cat_id");			$cat_info = $con_multi->sql_fetchassoc();			$con_multi->sql_freeresult();						if($cat_info['tree_str']!=''){  // generate category tree			    $tree_str = $cat_info['tree_str'];				$temp = str_replace(")(", ",",  str_replace("(0)", "", $tree_str));				if($temp){                    $con_multi->sql_query("select id,description from category where id in $temp order by level");                    while ($r = $con_multi->sql_fetchassoc()){                        $cat_info['cat_tree_info'][] = $r;					}					$con_multi->sql_freeresult();				}							}						$pf = "p".($cat_info['level']+1);			$filter[] = "p".$cat_info['level']."=$root_cat_id";			$common_fm_filter[]= "p".$cat_info['level']."=$root_cat_id";			//$uncat_name = $cat_info['description'];			$uncat_name = '(Items directly under this category)';					}else{  // no select category, show all            $pf = "p1";			$uncat_name = 'Un-categorized';						// root			$cat_info['id'] = 0;			$cat_info['level'] = 0;		}		$cat_lv = mi($cat_info['level']);				// construct filter		$filter[] = "tbl.date between ".ms($this->date_from)." and ".ms($this->date_to);		if ($sessioninfo['level']<1000){	        $filter[] = "cc.p2 in ($sessioninfo[department_ids])";	        $common_fm_filter[]= "cc.p2 in ($sessioninfo[department_ids])";		}		$tran_filter = $filter;	// clone filter for transaction query				if($this->sku_type){			$filter[]="sku.sku_type=".ms($this->sku_type);	        $common_fm_filter[]= "sku.sku_type=".ms($this->sku_type);		}		$common_fm_filter[] = "(sku.is_fresh_market='yes' or (sku.is_fresh_market='inherit' and cc.is_fresh_market='yes'))";		    $filter[] = $_REQUEST['exclude_inactive_sku'] ? 'si.active=1' : '1';				if ($filter) $filter = "where ".join(' and ', $filter);	    	    // get all child category info	    $con_multi->sql_query("select c.id,c.description, cm.branch_id, cm.markup						 from category c						 left join category_markup cm on c.id = cm.category_id						 where c.root_id=$root_cat_id or c.id=$root_cat_id");	    while($r=$con_multi->sql_fetchrow()){	    	$category_markup[$r['id']][$r['branch_id']] = $r['markup'];	        $category[$r['id']] = $r['description'];		}		$con_multi->sql_freeresult();			// get the specific id that indicate the gate between old/new sku items based on user selected aging of sku items		$con_multi->sql_query("select id from sku_items where added < date_sub(".ms($this->date_from).", interval ".mi($this->item_age)." month) order by id desc limit 1");		$old_si_id = $con_multi->sql_fetchfield(0);		$con_multi->sql_freeresult();		// get category sales		$sql = "select $pf as cat_id, sum(tbl.qty) as qty, sum(tbl.amount) as amt, sum(tbl.cost) as cost, tbl.date as dt,				tbl.sku_item_id				from %s tbl				left join sku_items si on si.id = tbl.sku_item_id				left join sku on sku.id = si.sku_id				left join category_cache cc using(category_id)				$filter				group by tbl.sku_item_id, dt";			    foreach($this->branch_id_list as $bid){            $query[] = sprintf($sql, 'sku_items_sales_cache_b'.$bid);		}		$query = join(' union all ', $query);        //print $query;                // establish report server connection        /*if(!$con_multi){			if(!$_REQUEST['use_report_server'])   $con_multi = $con;			else	$con_multi= new mysql_multi();		}*/				// get category sales		$q_cc = $con_multi->sql_query($query);//print "$query<br /><br />";		if ($con_multi->sql_numrows($q_cc)>0){			$cat_id_list = array();			while($r = $con_multi->sql_fetchrow()){			    $date_key = date("Ymd", strtotime($r['dt']));			    $cat_id = mi($r['cat_id']);			    			    if(!in_array($cat_id, $cat_id_list))	$cat_id_list[] = $cat_id;			    				if($old_si_id >= $r['sku_item_id']) $item_status = "old"; // it's old sku item				else $item_status = "new"; // it's new sku item								//if(!$this->item_status_list[$item_status]) $this->item_status_list[$item_status] = $item_status;								$this->tb[$root_cat_id][$cat_id]['data'][$date_key][$item_status]['amt'] += $r['amt'];				$this->tb[$root_cat_id][$cat_id]['data'][$date_key][$item_status]['cost'] += $r['cost'];				$this->tb[$root_cat_id][$cat_id]['data'][$date_key][$item_status]['qty'] += $r['qty'];			}			if($this->tb){				// loop for each category to assign cat id and description				foreach(array_keys($this->tb[$root_cat_id]) as $cat_id){   					$this->tb[$root_cat_id][$cat_id]['id'] = $cat_id;					if (!$category[$cat_id]){   // unknow category id						$this->tb[$root_cat_id][$cat_id]['have_subcat'] = false;						$this->tb[$root_cat_id][$cat_id]['description'] = $uncat_name;						$this->tb[$root_cat_id][$cat_id]['root_id'] = $root_cat_id;					}					else{						$this->tb[$root_cat_id][$cat_id]['have_subcat'] = $this->check_have_subcat($cat_id);						$this->tb[$root_cat_id][$cat_id]['description'] = $category[$cat_id];					}				}			}		}		$con_multi->sql_freeresult($q_cc);				// get transaction count		/*if($cat_lv>=0 && $cat_lv<2){			//print $filter;			if($tran_filter)	$tran_filter = "where ".join(' and ', $tran_filter);			else	$tran_filter = '';						foreach($this->branch_id_list as $bid){				/*$sql = "select distinct tbl.date,tbl.counter_id,tbl.pos_id,$pf as cat_id				from dept_trans_cache_b".$bid." tbl 				left join category_cache cc on cc.category_id=tbl.department_id				$tran_filter";				$sql = "select tbl.date, $pf as cat_id, count(distinct tbl.date,tbl.counter_id,tbl.pos_id) as tran_count				from dept_trans_cache_b".$bid." tbl 				left join category_cache cc on cc.category_id=tbl.department_id				$tran_filter				group by date,cat_id";				/*if($sessioninfo['u']=='wsatp'){					print "$sql<br />";					continue;				}				$con_multi->sql_query_false($sql, true);				while($r = $con_multi->sql_fetchassoc()){					$date_key = date("Ymd", strtotime($r['date']));			    	$cat_id = mi($r['cat_id']);			    					$this->tb[$root_cat_id][$r['cat_id']]['data'][$date_key]['tran_count'] += $r['tran_count'];				}				$con_multi->sql_freeresult();			}			$smarty->assign('show_tran_count', 1);		}*/				//if($sessioninfo['u']=='wsatp'){			//print_r($this->tb[$root_cat_id]);		//}		// got fresh market, check fresh market sales		if($config['enable_fresh_market_sku'] && $this->tb){		    $params = array();		    $params['filter'] = $common_fm_filter;		    $params['pf'] = $pf;			$params['old_si_id'] = $old_si_id;		        		foreach($this->branch_id_list as $bid){				$params['branch_id'] = mi($bid);								$fm_data = $this->get_fresh_market_data($params);				//print_r($fm_data);exit;				if($fm_data){                    // loop to reconstruct tb					foreach($fm_data as $sku_item_id=>$r){					    foreach($r['pos'] as $date_key=>$pos){							// remove qty , amt and cost from report if it is fresh market item							if($old_si_id >= $sku_item_id) $item_status = "old";							else $item_status = "new";														//if(!$this->item_status_list[$item_status]) $this->item_status_list[$item_status] = $item_status;														$this->tb[$root_cat_id][$r['cat_id']]['data'][$date_key][$item_status]['cost'] -= $pos['default_cost'];							$this->tb[$root_cat_id][$r['cat_id']]['data'][$date_key][$item_status]['amt'] -= $pos['amt'];							$this->tb[$root_cat_id][$r['cat_id']]['data'][$date_key][$item_status]['qty'] -= $pos['qty'];														//$tran_count = $this->tb[$root_cat_id][$r['cat_id']]['data'][$date_key]['tran_count'];														// all zero, unset the array							if(!round($this->tb[$root_cat_id][$r['cat_id']]['data'][$date_key][$item_status]['cost'],2) && !round($this->tb[$root_cat_id][$r['cat_id']]['data'][$date_key][$item_status]['amt'],2) && !round($this->tb[$root_cat_id][$r['cat_id']]['data'][$date_key][$item_status]['qty'],2))    unset($this->tb[$root_cat_id][$r['cat_id']]['data'][$date_key]);														// construct fresh market data							$this->tb[$root_cat_id][$r['cat_id']]['fm_data'][$date_key][$item_status]['qty'] += $pos['qty'];							$this->tb[$root_cat_id][$r['cat_id']]['fm_data'][$date_key][$item_status]['amt'] += $pos['amt'];							$this->tb[$root_cat_id][$r['cat_id']]['fm_data'][$date_key][$item_status]['cost'] += $pos['fresh_market_cost'] ? $pos['fresh_market_cost'] : $pos['default_cost'];														// clone transaction count							/*if($tran_count){								//print_r($fm_data);								//print "fm tran = $tran_count<br />";								$this->tb[$root_cat_id][$r['cat_id']]['fm_data'][$date_key]['tran_count'] = $tran_count;							}*/						}					}				}								//print_r($fm_data);			}		}		$new_si_root_per = isset($_REQUEST['new_si_root_per']) ? mf($_REQUEST['new_si_root_per']) : 100;		$old_si_root_per = isset($_REQUEST['old_si_root_per']) ? mf($_REQUEST['old_si_root_per']) : 100;				$smarty->assign('new_si_root_per', $new_si_root_per);		$smarty->assign('old_si_root_per', $old_si_root_per);		if(!$this->root_cat_info){			$this->root_cat_info = $cat_info;		}					if(isset($_REQUEST['is_fresh_market']) && $config['enable_fresh_market_sku']){			if($_REQUEST['is_fresh_market'])    $smarty->assign('fresh_market_row_only', 1);			else    $smarty->assign('normal_category_row_only', 1);		}    				// get child array		if($cat_id_list){			if($this->tb[$root_cat_id][0]){	// got un-category sales				$this->cat_child_info[$root_cat_id][0] = $this->tb[$root_cat_id][0];	// un-category								// only need master info, sales no need for child info array				unset($this->cat_child_info[$root_cat_id][0]['data']);				unset($this->cat_child_info[$root_cat_id][0]['fm_data']);			}			$q_child = $con_multi->sql_query("select * from category where root_id=$root_cat_id and id in (".join(',',$cat_id_list).")");			while($r = $con_multi->sql_fetchassoc($q_child)){				$this->cat_child_info[$root_cat_id][$r['id']] = $r;			}			$con_multi->sql_freeresult($q_child);						// get sub cat sales			if($cat_lv>=2 && $options['include_sub_cat']){	// at least department						if($this->cat_child_info[$root_cat_id]){					foreach($this->cat_child_info[$root_cat_id] as $cat_id=>$cat){						if(!$cat_id)	continue;						// load sub cat						$this->generate_category_data($cat_id, $options);					}				}								$smarty->assign('included_sub_cat', 1);			}		}				//print_r($this->tb);			}		private function check_have_subcat($id){		global $con, $con_multi;		$con_multi->sql_query("select id from category where root_id=$id limit 1");		$c = $con_multi->sql_fetchrow();		$con_multi->sql_freeresult();		if ($c) return true;		return false;	}		private function generate_header_date_label(){	    global $smarty;	            $d1 = strtotime($this->date_from);		$d2 = strtotime($this->date_to);		$uq_cols = array();		while($d1<=$d2)		{		    $temp = array('y'=>date('Y', $d1), 'm'=>mi(date('m', $d1)));		    if($this->by_monthly){	            $key = date('Ym', $d1);			}else{			    $key = date('Ymd', $d1);	            $temp['d'] = date('d', $d1);			}		    $uq_cols[$key] = $temp;			$d1 += 86400;		}		$this->uq_cols = $uq_cols;		$smarty->assign('uq_cols', $this->uq_cols);	}		function ajax_load_category(){		$this->is_sub_cat = 1;        $this->generate_category_data($this->cat_id);        $this->assign_cat_report_data(true);		unset($this->is_sub_cat);	}		function ajax_load_sku(){	    global $con, $smarty, $sessioninfo, $config, $con_multi;	    	    if(!$this->branch_id_list)  die("No branch selected.");	    	    $this->generate_header_date_label();	    	    $direct_under_cat = mi($_REQUEST['direct_under_cat']);	    		if($_REQUEST['is_itemise_export']){			if($_REQUEST['itemise_cat_id']) $this->cat_id = $_REQUEST['itemise_cat_id'];			if($_REQUEST['itemise_is_fresh_market']) $_REQUEST['is_fresh_market'] = $_REQUEST['itemise_is_fresh_market'];			if($_REQUEST['itemise_direct_under_cat']) $direct_under_cat = $_REQUEST['itemise_direct_under_cat'];		}		        if (!$this->cat_id){    // showing uncategory sku			$cat_info['description'] = 'Uncategorized';   			$filter[] = "p0 is null";   			$common_fm_filter[] = "p0 is null";		}		else{   			$con_multi->sql_query("select id,level,description from category where id=$this->cat_id");			$cat_info = $con_multi->sql_fetchrow();			$con_multi->sql_freeresult();			$pf = "p".($cat_info['level']+1);			$filter[] = "p".$cat_info['level']."=$this->cat_id";			$common_fm_filter[] = "p".$cat_info['level']."=$this->cat_id";						if($sessioninfo['level']<9999){                $filter[] = "p2 in ($sessioninfo[department_ids])";                $common_fm_filter[] = "p2 in ($sessioninfo[department_ids])";			}						if($direct_under_cat){				$filter[] = "sku.category_id=".mi($this->cat_id);			}		}				$filter[] = "tbl.date between ".ms($this->date_from)." and ".ms($this->date_to);		if($this->sku_type){			$filter[] = "sku.sku_type=".ms($this->sku_type);			$common_fm_filter[] = "sku.sku_type=".ms($this->sku_type);		}		$common_fm_filter[] = "(sku.is_fresh_market='yes' or (sku.is_fresh_market='inherit' and cc.is_fresh_market='yes'))";		if(isset($_REQUEST['is_fresh_market']) && $config['enable_fresh_market_sku']){		    if($_REQUEST['is_fresh_market'])    $fm_only = true;		    else    $normal_only = true;		}		// get the specific id that indicate the gate between old/new sku items based on user selected aging of sku items		$con_multi->sql_query("select id from sku_items where added < date_sub(".ms($this->date_from).", interval ".mi($this->item_age)." month) order by id desc limit 1");		$old_si_id = $con_multi->sql_fetchfield(0);		$con_multi->sql_freeresult();				$filter[] = $_REQUEST['exclude_inactive_sku'] ? 'si.active=1' : '1';				if($filter) $filter = "where ".join(' and ', $filter);				$sql = "select %d as bid, tbl.sku_item_id, sum(tbl.qty) as qty, sum(tbl.amount) as amt, sum(tbl.cost) as cost, tbl.date as dt, sku_item_code,description, si.sku_id, sum(fresh_market_cost) as fresh_market_cost, if(sku.is_fresh_market='inherit', cc.is_fresh_market, sku.is_fresh_market) as is_fresh_market,			if(si.id <= ".mi($old_si_id).", 'old', 'new') as item_status			from %s tbl			left join sku_items si on tbl.sku_item_id = si.id			left join sku on si.sku_id = sku.id			left join category_cache cc on sku.category_id = cc.category_id			$filter			group by tbl.sku_item_id, dt";		foreach($this->branch_id_list as $bid){            $query[] = sprintf($sql, $bid, 'sku_items_sales_cache_b'.$bid);		}		$query = join(' union all ', $query)." order by item_status asc, sku_item_code asc";		//print $query;		/*if(!$_REQUEST['use_report_server'])   $con_multi = $con;		else	$con_multi= new mysql_multi();  // use report server*/		$con_multi->sql_query($query);//print "$query<br /><br />";				$count_bid = count($this->branch_id_list);		while($r = $con_multi->sql_fetchrow()){		    if($config['enable_fresh_market_sku']){                if($fm_only && $r['is_fresh_market']!='yes')    continue;   // only fm data		    	if($normal_only && $r['is_fresh_market']=='yes')    continue;   // only normal data			}		    			$date_key = date("Ymd", strtotime($r['dt']));			$tb[$r['sku_item_id']]['info']['sku_item_code'] = $r['sku_item_code'];			$tb[$r['sku_item_id']]['info']['description'] = $r['description'];			$tb[$r['sku_item_id']]['info']['sku_id'] = $r['sku_id'];			$tb[$r['sku_item_id']]['info']['item_status'] = $r['item_status'];			$tb[$r['sku_item_id']]['info']['is_fresh_market'] = $r['is_fresh_market'] == 'yes' ? 1 : 0;	        $tb[$r['sku_item_id']]['data'][$date_key]['qty'] += $r['qty'];	        $tb[$r['sku_item_id']]['data'][$date_key]['amt'] += $r['amt'];	        	        if($config['enable_fresh_market_sku'] && $r['is_fresh_market']=='yes'){                $cost = $r['fresh_market_cost']? $r['fresh_market_cost'] : $r['cost'];                if($count_bid==1){					$tb[$r['sku_item_id']]['data'][$date_key]['cost_indicator'] = $r['fresh_market_cost'] ? 'fresh_market_cost' : 'grn_cost';				}     			}else{                $cost = $r['cost'];			}	        $tb[$r['sku_item_id']]['data'][$date_key]['cost'] += $cost;	        	        $tb[$r['sku_item_id']]['data']['total']['qty'] += $r['qty'];	        $tb[$r['sku_item_id']]['data']['total']['amt'] += $r['amt'];	        $tb[$r['sku_item_id']]['data']['total']['cost'] += $cost;		}		$con_multi->sql_freeresult();		//print_r($tb);exit;				if($tb){			$sid_list = array();			foreach($tb as $sid=>$sku_items){				$sid_list[$sid] = $sid;			    if($sku_items['data']){                    foreach($sku_items['data'] as $date_key=>$r){						if($date_key=='total')  continue;   // skip total row						$item_status = $tb[$sid]['info']['item_status'];						// sub total by old & new items						$tb_total['data'][$date_key][$item_status]['amt'] += $r['amt'];						$tb_total['data'][$date_key][$item_status]['cost'] += $r['cost'];						$tb_total['data'][$date_key][$item_status]['qty'] += $r['qty'];						$tb_total['data']['sub_total'][$item_status]['amt'] += $r['amt'];						$tb_total['data']['sub_total'][$item_status]['cost'] += $r['cost'];						$tb_total['data']['sub_total'][$item_status]['qty'] += $r['qty'];						// grand total						$tb_total['data'][$date_key]['amt'] += $r['amt'];						$tb_total['data'][$date_key]['cost'] += $r['cost'];						$tb_total['data'][$date_key]['qty'] += $r['qty'];						$tb_total['data']['total']['amt'] += $r['amt'];						$tb_total['data']['total']['cost'] += $r['cost'];						$tb_total['data']['total']['qty'] += $r['qty'];					}				}			}			if(count($this->branch_id_list)==1){	// single branch				// find last FM stock take				if($config['enable_fresh_market_sku'] && $fm_only && $sid_list){					// get parent sku item id					$parent_sid_list = array();					foreach($sid_list as $sid){						$sku_id = mi($tb[$sid]['info']['sku_id']);						if(!isset($parent_sid_list[$sku_id])){							$con_multi->sql_query("select id from sku_items where sku_id=$sku_id and is_parent=1 order by id limit 1");							$tmp = $con_multi->sql_fetchassoc();							$con_multi->sql_freeresult();							$parent_sid_list[$sku_id] = mi($tmp['id']);						}					}										$bid = mi($this->branch_id_list[0]);										$sql = "select si.sku_id as sku_id, max(sc.date) as last_fm_sc_date from stock_check sc left join sku_items si on si.sku_item_code=sc.sku_item_codewhere sc.branch_id=$bid and si.id in (".join(',', $parent_sid_list).") and sc.is_fresh_market=1 and sc.date<=".ms($this->date_to)."group by sku_id";					//print $sql;					$q_lsc = $con_multi->sql_query($sql);					$sku_last_fm_sc = array();					while($r = $con_multi->sql_fetchassoc($q_lsc)){						$sku_last_fm_sc[$r['sku_id']]['last_fm_sc_date'] = $r['last_fm_sc_date'];					}					$con_multi->sql_freeresult($q_lsc);										// assign last fm stock take to items					foreach($tb as $sid=>$r){						$sku_id = mi($r['info']['sku_id']);						$tb[$sid]['info']['last_fm_sc_date'] = $sku_last_fm_sc[$sku_id]['last_fm_sc_date'];					}				}			}		}				/*if(!$_REQUEST['use_report_server'])   $con_multi = $con;	    else	$con_multi->close_connection();*/        if($this->by_monthly){  // report group by month			$this->group_sku_data_to_monthly($tb, $tb_total);		}		        $root_id = $this->cat_id;		$root_per = isset($_REQUEST['root_per']) ? mf($_REQUEST['root_per']) : 100;				$smarty->assign('root_per', $root_per);		$smarty->assign('root_id', $root_id);		$smarty->assign('is_fresh_market', $_REQUEST['is_fresh_market']);		$smarty->assign('direct_under_cat', $direct_under_cat);		$smarty->assign('is_itemise_export', $_REQUEST['is_itemise_export']);		//print_r($tb);		$smarty->assign('tb', $tb);		$smarty->assign('tb_total', $tb_total);		$smarty->assign('fm_only', $fm_only);		$smarty->assign('branch_id_list', $this->branch_id_list);				/*		print '<pre>';		print_r($this->branch_id_list);		print '</pre>';		*/				$this->display('report.category_old_vs_new_sku_items.sku_table.tpl');	}		private function group_data_to_monthly(&$tb, &$tb_total){	    //print_r($tb_total);        if($tb){    // group category data        	foreach($tb as $root_cat_id=>$cat_list){				foreach($cat_list as $id=>$cat){					if($cat['data']){					    $new_data = array();	                    foreach($cat['data'] as $date_key=>$item_status_list){ // loop for daily data to convert to monthly data							foreach($item_status_list as $item_status=>$r){								// no need skip, since 0-4, and and 5-6 = total								//if($date_key=='total')  continue;   // skip total row								$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key								//$new_data[$ym]['amt'] += $r['amt'];								//$new_data[$ym]['cost'] += $r['cost'];								//$new_data[$ym]['qty'] += $r['qty'];								$new_data[$ym][$item_status]['amt'] += $r['amt'];								$new_data[$ym][$item_status]['cost'] += $r['cost'];								$new_data[$ym][$item_status]['qty'] += $r['qty'];								//$new_data[$ym]['tran_count'] += $r['tran_count'];																//$new_data['total']['amt'] += $r['amt'];								//$new_data['total']['cost'] += $r['cost'];								//$new_data['total']['qty'] += $r['qty'];							}						}						$tb[$root_cat_id][$id]['data'] = $new_data;  // replace the daily data to monthly data						unset($new_data);					}										// fresh market					if($cat['fm_data']){					    $new_data = array();	                    foreach($cat['fm_data'] as $date_key=>$item_status_list){ // loop for daily data to convert to monthly data							foreach($item_status_list as $item_status=>$r){								// no need skip, since 0-4, and and 5-6 = total								//if($date_key=='total')  continue;   // skip total row								$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key								$new_data[$ym][$item_status]['amt'] += $r['amt'];								$new_data[$ym][$item_status]['cost'] += $r['cost'];								$new_data[$ym][$item_status]['qty'] += $r['qty'];								//$new_data[$ym]['tran_count'] += $r['tran_count'];																//$new_data['total']['amt'] += $r['amt'];								//$new_data['total']['cost'] += $r['cost'];								//$new_data['total']['qty'] += $r['qty'];							}						}						$tb[$root_cat_id][$id]['fm_data'] = $new_data;  // replace the daily data to monthly data						unset($new_data);					}				}			}		}        //$tb_total['total'] = array();        //print_r($tb_total);        if($tb_total){			foreach($tb_total as $root_cat_id=>$tmp_data){				$tb_total[$root_cat_id]['total'] = array();				if($tmp_data['data']){  // group total row data				    $new_data = array();					foreach($tmp_data['data'] as $date_key=>$item_status_list){						foreach($item_status_list as $item_status=>$r){							// no need skip, since 0-4, and and 5-6 = total							$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key							//$new_data[$ym]['amt'] += $r['amt'];							//$new_data[$ym]['cost'] += $r['cost'];							//$new_data[$ym]['qty'] += $r['qty'];							$new_data['total']['amt'] += $r['amt'];							$new_data['total']['cost'] += $r['cost'];							$new_data['total']['qty'] += $r['qty'];							//$new_data[$ym][$item_status]['amt'] += $r['amt'];							//$new_data[$ym][$item_status]['cost'] += $r['cost'];							//$new_data[$ym][$item_status]['qty'] += $r['qty'];							//$new_data[$ym]['tran_count'] += $r['tran_count'];														// sub total							$tb_total[$root_cat_id]['sub_total'][$ym][$item_status]['amt'] += $r['amt'];							$tb_total[$root_cat_id]['sub_total'][$ym][$item_status]['cost'] += $r['cost'];							$tb_total[$root_cat_id]['sub_total'][$ym][$item_status]['qty'] += $r['qty'];														// grand total							$tb_total[$root_cat_id]['total'][$ym]['amt'] += $r['amt'];							$tb_total[$root_cat_id]['total'][$ym]['cost'] += $r['cost'];							$tb_total[$root_cat_id]['total'][$ym]['qty'] += $r['qty'];							if($item_status=='total')  continue;   // skip total row							if(!$this->is_sub_cat){								$tb_total[$root_cat_id]['total']['total']['amt'] += $r['amt'];								$tb_total[$root_cat_id]['total']['total']['cost'] += $r['cost'];								$tb_total[$root_cat_id]['total']['total']['qty'] += $r['qty'];							}else{								$tb_total[$root_cat_id]['total']['total'][$item_status]['amt'] += $r['amt']/2;								$tb_total[$root_cat_id]['total']['total'][$item_status]['cost'] += $r['cost']/2;								$tb_total[$root_cat_id]['total']['total'][$item_status]['qty'] += $r['qty']/2;							}						}					}					$tb_total[$root_cat_id]['data'] = $new_data;					unset($new_data);				}								if($tmp_data['fm_data']){  // group total row data				    $new_data = array();					foreach($tmp_data['fm_data'] as $date_key=>$item_status_list){						foreach($item_status_list as $item_status=>$r){							// no need skip, since 0-4, and and 5-6 = total							$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key							//$new_data[$ym]['amt'] += $r['amt'];							//$new_data[$ym]['cost'] += $r['cost'];							//$new_data[$ym]['qty'] += $r['qty'];							$new_data['total']['amt'] += $r['amt'];							$new_data['total']['cost'] += $r['cost'];							$new_data['total']['qty'] += $r['qty'];							//$new_data[$ym]['tran_count'] += $r['tran_count'];																		$tb_total[$root_cat_id]['sub_total'][$ym][$item_status]['amt'] += $r['amt'];							$tb_total[$root_cat_id]['sub_total'][$ym][$item_status]['cost'] += $r['cost'];							$tb_total[$root_cat_id]['sub_total'][$ym][$item_status]['qty'] += $r['qty'];							$tb_total[$root_cat_id]['total'][$ym]['amt'] += $r['amt'];							$tb_total[$root_cat_id]['total'][$ym]['cost'] += $r['cost'];							$tb_total[$root_cat_id]['total'][$ym]['qty'] += $r['qty'];							if($item_status=='total')  continue;   // skip total row							if(!$this->is_sub_cat){								$tb_total[$root_cat_id]['total']['total']['amt'] += $r['amt'];								$tb_total[$root_cat_id]['total']['total']['cost'] += $r['cost'];								$tb_total[$root_cat_id]['total']['total']['qty'] += $r['qty'];							}else{								$tb_total[$root_cat_id]['total']['total'][$item_status]['amt'] += $r['amt']/2;								$tb_total[$root_cat_id]['total']['total'][$item_status]['cost'] += $r['cost']/2;								$tb_total[$root_cat_id]['total']['total'][$item_status]['qty'] += $r['qty']/2;							}						}					}					$tb_total[$root_cat_id]['fm_data'] = $new_data;					unset($new_data);				}			}		}	}		private function group_sku_data_to_monthly(&$tb, &$tb_total){			$item_status_list = array("new", "old");		if($tb){			foreach($tb as $id=>$cat){				if($cat['data']){				    $new_data = array();					foreach($cat['data'] as $date_key=>$r){ // loop for daily data to convert to monthly data						$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key						$new_data[$ym]['amt'] += $r['amt'];						$new_data[$ym]['cost'] += $r['cost'];						$new_data[$ym]['qty'] += $r['qty'];					}					$tb[$id]['data'] = $new_data;  // replace the daily data to monthly data					unset($new_data);				}								// fresh market				if($cat['fm_data']){				    $new_data = array();	                  foreach($cat['fm_data'] as $date_key=>$r){ // loop for daily data to convert to monthly data	                      // no need skip, since 0-4, and and 5-6 = total	                      //if($date_key=='total')  continue;   // skip total row						$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key						$new_data[$ym]['amt'] += $r['amt'];						$new_data[$ym]['cost'] += $r['cost'];						$new_data[$ym]['qty'] += $r['qty'];					}					$tb[$id]['fm_data'] = $new_data;  // replace the daily data to monthly data					unset($new_data);				}			}		}				if($tb_total['data']){  // group total row data		    $new_data = array();			foreach($tb_total['data'] as $date_key=>$r){				// no need skip, since 0-4, and and 5-6 = total				//if($date_key=='total')  continue;   // skip total row				$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key				$new_data[$ym]['amt'] += $r['amt'];				$new_data[$ym]['cost'] += $r['cost'];				$new_data[$ym]['qty'] += $r['qty'];				$new_data['total'][$ym]['amt'] += $r['amt'];				$new_data['total'][$ym]['cost'] += $r['cost'];				$new_data['total'][$ym]['qty'] += $r['qty'];								//print ($r['item_status'])."<br />";				foreach($item_status_list as $item_status){					if($r[$item_status]){						$new_data[$ym][$item_status]['amt'] += $tb_total['data'][$date_key][$item_status]['amt'];						$new_data[$ym][$item_status]['cost'] += $tb_total['data'][$date_key][$item_status]['cost'];						$new_data[$ym][$item_status]['qty'] += $tb_total['data'][$date_key][$item_status]['qty'];						$new_data['sub_total'][$item_status]['amt'] = $tb_total['data']['sub_total'][$item_status]['amt'];						$new_data['sub_total'][$item_status]['cost'] = $tb_total['data']['sub_total'][$item_status]['cost'];						$new_data['sub_total'][$item_status]['qty'] = $tb_total['data']['sub_total'][$item_status]['qty'];					}				}			}			$tb_total['data'] = $new_data;			unset($new_data);		}				if($tb_total['fm_data']){  // group total row data		    $new_data = array();			foreach($tb_total['fm_data'] as $date_key=>$r){			    // no need skip, since 0-4, and and 5-6 = total			    //if($date_key=='total')  continue;   // skip total row                $ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key                $new_data[$ym]['amt'] += $r['amt'];				$new_data[$ym]['cost'] += $r['cost'];				$new_data[$ym]['qty'] += $r['qty'];								$new_data['total'][$ym]['amt'] += $r['amt'];				$new_data['total'][$ym]['cost'] += $r['cost'];				$new_data['total'][$ym]['qty'] += $r['qty'];								foreach($item_status_list as $item_status){					if($r[$item_status]){						$new_data[$ym][$item_status]['amt'] += $r['amt'];						$new_data[$ym][$item_status]['cost'] += $r['cost'];						$new_data[$ym][$item_status]['qty'] += $r['qty'];						$new_data['sub_total'][$item_status]['amt'] += $r['amt'];						$new_data['sub_total'][$item_status]['cost'] += $r['cost'];						$new_data['sub_total'][$item_status]['qty'] += $r['qty'];					}				}			}			$tb_total['fm_data'] = $new_data;			unset($new_data);		}		//print_r($tb_total);	}		private function get_fresh_market_data($params){	    global $con_multi;	    	    $common_fm_filter = $params['filter'];	    $bid = $params['branch_id'];	    $pf = $params['pf'];	            $fm_data= array();    	$si_id_list = array();        // get all fresh market sales	    $sku_filter = array();		$sku_filter = $common_fm_filter;		$sku_filter[] = "tbl.date between ".ms($this->date_from)." and ".ms($this->date_to);		$sku_filter = join(' and ', $sku_filter);				$sql = "select si.sku_id, date, sum(amount) as amt, sum(qty) as qty, sum(cost) as default_cost, $pf as cat_id, 				sum(fresh_market_cost) as fresh_market_cost, tbl.sku_item_id				from sku_items_sales_cache_b".$bid." tbl				left join sku_items si on si.id=tbl.sku_item_id				left join sku on sku.id=si.sku_id				left join category_cache cc on cc.category_id=sku.category_id				where $sku_filter				group by si.id, date";		        $con_multi->sql_query($sql);		while($r = $con_multi->sql_fetchassoc()){			$date_key = date("Ymd", strtotime($r['date']));            $fm_data[$r['sku_item_id']]['pos'][$date_key]['qty'] += $r['qty'];			$fm_data[$r['sku_item_id']]['pos'][$date_key]['amt'] += $r['amt'];			$fm_data[$r['sku_item_id']]['pos'][$date_key]['default_cost'] += $r['default_cost'];			$fm_data[$r['sku_item_id']]['pos'][$date_key]['fresh_market_cost'] += $r['fresh_market_cost'];			$fm_data[$r['sku_item_id']]['cat_id'] = mi($r['cat_id']);			if(!in_array($r['sku_item_id'], $si_id_list))	$si_id_list[] = $r['sku_id'];		}		$con_multi->sql_freeresult();		//print_r($si_id_list);		if(!$si_id_list)	return false;   // only proceed if got fresh market sku				return $fm_data;	}		function export_itemise_info(){		global $config, $con, $sessioninfo;				$this->ajax_load_sku();		include_once("include/excelwriter.php");		log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Old vs New SKU Items by Category Report To Excel (Itemise)");		Header('Content-Type: application/msexcel');		Header('Content-Disposition: attachment;filename=arms'.time().'.xls');		print ExcelWriter::GetHeader();		$smarty->assign('no_header_footer', 1);	}}function smarty_value_format($value, $fmt,$zero='&nbsp;'){	global $config;	$ret = '';	if ($value==0)	{		if ($value!==0)	// if report is qty, show 0 as zero, space as blank			return $zero;		if ($_REQUEST['report_type']!='qty')			return $zero;	}	if ($value<0)	$ret = '<font color=red>';	if ($fmt == '%d')		$ret .= number_format($value,0);	elseif ($fmt == 'qty')		$ret .= (strpos($value,'.')>0) ? number_format($value, $config['global_qty_decimal_points']) : number_format($value);	elseif ($fmt == '%0.2f%%')		$ret .= number_format($value,2) . "%";	else		$ret .= number_format($value,2);	if ($value<0)		$ret .= '</font>';	//= sprintf($value)	return $ret;}$smarty->register_modifier('value_format', 'smarty_value_format');$SALES_REPORT_CATEGORY = new SALES_REPORT_CATEGORY('Old vs New SKU Items by Category Report');?>