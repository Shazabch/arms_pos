<?php/*3/5/2018 3:32 PM Justin- Bug fixed on sales will double add up if having more than one GRN received with same SKU item.3/9/2018 3:43 PM Justin- Bug fixed Report only shows item sales record on its first finalized sales date (for the selected date range) for each vendor.- Bug fixed If a selected vendor has multiple items, the total shows only sales record from the first row.3/29/2018 6:00 PM Andy- Optimise report speed.2/20/2020 3:48 PM William- Enhanced to change connection "$con" to use report server connection "$con_multi".*/include("include/common.php");include("include/class.report.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");class MONTHLY_GP_REPORT_BY_VENDOR extends Module{    function __construct($title){		global $con, $smarty, $con_multi, $appCore;				if(!$con_multi)	$con_multi = $appCore->reportManager->connectReportServer();		if (!$_REQUEST['date_from']) $_REQUEST['date_from'] = date('Y-m-d', strtotime("-1 month"));		if (!$_REQUEST['date_to']) $_REQUEST['date_to'] = date('Y-m-d');		// load branches		$q1 = $con_multi->sql_query("select * from branch where active=1 and id>0 order by sequence,code");		while($r = $con_multi->sql_fetchassoc($q1)){			$this->branches[$r['id']] = $r;		}		$con_multi->sql_freeresult($q1);		$smarty->assign('branches',$this->branches);				// load branch group		$this->branches_group = $this->load_branch_group();				// load owner list		$q1 = $con_multi->sql_query("select distinct(user.id) as id, user.u from po join user on user_id = user.id group by id");		while($r = $con_multi->sql_fetchassoc($q1)){			$this->owner_list[$r['id']] = $r;		}		$con_multi->sql_freeresult($q1);		$smarty->assign('owner_list',$this->owner_list);		    	parent::__construct($title);    }		function _default(){		$this->display();		exit;	}	function show_report(){		$this->process_form();		$this->generate_report();		$this->display();	}	private function run_report($bid){        global $smarty, $sessioninfo, $con_multi;		//$con_multi = new mysql_multi();		/*if(!$con_multi){	 		die("Error: Fail to connect report server");		}*/				// get vendor id list first		$vendor_id_list = array();		$con_multi->sql_query("select distinct (vendor_id) as vendor_id from po where ".$this->po_filter);		while($r = $con_multi->sql_fetchassoc()){			$vendor_id_list[] = mi($r['vendor_id']);		}		$con_multi->sql_freeresult();				// no vendor = this user never do PO, no need to select from sales		if(!$vendor_id_list)	return;				// construct query to select data based on vendor_id		$sql = "select tbl.sku_item_id, tbl.date, v.id as vendor_id, v.code as vd_code, v.description as vd_desc, tbl.amount, tbl.cost, tbl.qty,				(					select group_concat(gri.id) from grr_items gri 					join po on po.po_no = gri.doc_no					where gri.type = 'PO' and gri.grr_id = grr.id and gri.branch_id = grr.branch_id and ".$this->po_filter."				) as grr_item_id_list				from sku_items_sales_cache_b".$bid." tbl				join grn_items gi on gi.sku_item_id = tbl.sku_item_id and gi.branch_id = ".mi($bid)."				join grn on grn.id = gi.grn_id and grn.branch_id = gi.branch_id				join grr on grr.id = grn.grr_id and grr.branch_id = grn.branch_id				join vendor v on v.id = grn.vendor_id				join vendor_sku_history_b".$bid." vsh on vsh.sku_item_id=tbl.sku_item_id and tbl.date between vsh.from_date and vsh.to_date and vsh.vendor_id=grn.vendor_id and vsh.vendor_id in (".join(',', $vendor_id_list).")				where ".join(" and ", $this->filters)."				having grr_item_id_list<>''				order by grr.rcv_date desc, grr.id desc, v.code, v.description";						// dump data into MySQL Temporary Table to avoid PHP memory issue and save looping time		$tmp_tbl = "tmp_monthly_gp_report_".$sessioninfo['id']."_".$bid;		$con_multi->sql_query("create temporary table $tmp_tbl (			sku_item_id int not null,			date date not null,			vendor_id int not null,			vd_code char(10),			vd_desc char(100),			amount double not null default 0,			cost double not null default 0,			qty double not null default 0,			grr_item_id_list text,			primary key (date, sku_item_id, vendor_id)		) ignore ($sql)");				// select data from temporary table		$q1 = $con_multi->sql_query("select * from $tmp_tbl");				while($r = $con_multi->sql_fetchassoc($q1)){			$this->table['details'][$r['vendor_id']]['vendor_id'] = $r['vendor_id'];			$this->table['details'][$r['vendor_id']]['vd_code'] = $r['vd_code'];			$this->table['details'][$r['vendor_id']]['vd_desc'] = $r['vd_desc'];			$this->table['details'][$r['vendor_id']]['sales_qty'] += $r['qty'];			$this->table['details'][$r['vendor_id']]['sales_amt'] += $r['amount'];			$this->table['details'][$r['vendor_id']]['cost_amt'] += $r['cost'];			$this->table['details'][$r['vendor_id']]['gp'] += round($r['amount'] - $r['cost'], 2);			$this->table['total']['ttl_sales_qty'] += $r['qty'];			$this->table['total']['ttl_sales_amt'] += $r['amount'];			$this->table['total']['ttl_cost_amt'] += $r['cost'];			$this->table['total']['ttl_gp'] += round($r['amount'] - $r['cost'], 2);						if($this->table['details'][$r['vendor_id']]['gp'] > 0){				$this->table['details'][$r['vendor_id']]['gp_perc'] = round($this->table['details'][$r['vendor_id']]['gp'] / $this->table['details'][$r['vendor_id']]['sales_amt'] * 100, 2);				$this->table['total']['ttl_gp_perc'] = round($this->table['total']['ttl_gp'] / $this->table['total']['ttl_sales_amt'] * 100, 2);			}		}		$con_multi->sql_freeresult($q1);		//$con_multi->close_connection();	}	function output_excel(){	    global $smarty, $sessioninfo;				$this->process_form();		$this->generate_report();        include_once("include/excelwriter.php");    	$smarty->assign('no_header_footer', true);    	$filename = "monthly_gp_report_by_vendor_".time().".xls";    	log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Monthly GP Report by PO Owner / Buyer To Excel($filename)");    	Header('Content-Type: application/msexcel');		Header('Content-Disposition: attachment;filename='.$filename);		print ExcelWriter::GetHeader();		$this->display();		print ExcelWriter::GetFooter();	    exit;	}	    function generate_report(){		global $con, $smarty, $sessioninfo;		$this->table = array();		if($this->branch_id_list){			foreach($this->branch_id_list as $bid){				$this->run_report($bid);			}		}				// set report fixed row display		$smarty->assign('report_row', 25);				$this->report_title[] = "Date From ".strtoupper($this->date_from)." to ".strtoupper($this->date_to);		if($this->tgl_po_owner || !$this->po_owner_list){			$owner_code = "All";		}elseif($this->po_owner_list){			foreach($this->po_owner_list as $dummy=>$uid){				$owner_code_list[] = $this->owner_list[$uid]['u'];			}			$owner_code = join(", ", $owner_code_list);		}				if($owner_code) $this->report_title[] = "PO Owner: ".$owner_code;        $smarty->assign('report_title', join('&nbsp;&nbsp;&nbsp;&nbsp;', $this->report_title));		$smarty->assign('table', $this->table);	}		function process_form(){	    global $con, $smarty, $sessioninfo;		if(!$_REQUEST['date_from']){			if($_REQUEST['date_to']) $_REQUEST['date_from'] = date('Y-m-d', strtotime("-1 month",strtotime($_REQUEST['date_to'])));			else{				$_REQUEST['date_from'] = date('Y-m-d', strtotime("-1 month"));				$_REQUEST['date_to'] = date('Y-m-d');			}		}		if(!$_REQUEST['date_to'] || strtotime($_REQUEST['date_from']) > strtotime($_REQUEST['date_to'])){			$_REQUEST['date_to'] = date('Y-m-d', strtotime("+1 month", strtotime($_REQUEST['date_from'])));		}		// check if the date is more than 1 month		$end_date =date("Y-m-d",strtotime("+1 year",strtotime($_REQUEST['date_from'])));    	if(strtotime($_REQUEST['date_to'])>strtotime($end_date)) $_REQUEST['date_to'] = $end_date;		$this->date_from = $_REQUEST['date_from'];		$this->date_to = $_REQUEST['date_to'];		$this->po_owner_list = $_REQUEST['po_owner_list'];		$this->tgl_po_owner = $_REQUEST['tgl_po_owner'];				if(!$this->po_owner_list){			$err[] = "Please select at least one PO Owner.";			$smarty->assign("errm", $err);			$this->display();			exit;		}		if(BRANCH_CODE == 'HQ'){    // HQ mode			$branch_id = mi($_REQUEST['branch_id']);			$bgid = explode(",",$_REQUEST['branch_id']);			if($bgid[1] || $branch_id<0){ // branch group selected				if($this->branches_group){					foreach($this->branches_group['items'][$bgid[1]] as $bid=>$b){						$this->branch_id_list[] = $bid;					}				}				$this->report_title[] = "Branch Group: ".$this->branches_group['header'][$bgid[1]]['code'];			}elseif($branch_id){  // single branch selected			    $this->branch_id_list[] = $branch_id;                $this->report_title[] = "Branch: ".get_branch_code($branch_id);			}   			else{   // all branches selected				foreach($this->branches as $bid=>$b){                    $this->branch_id_list[] = $bid;				}				$this->report_title[] = "Branch: All";			}		}else{  // Branches mode            //$branch_id = mi($sessioninfo['branch_id']);            $this->branch_id_list[] = mi($sessioninfo['branch_id']);            $this->report_title[] = "Branch: ".BRANCH_CODE;		}		$this->po_filter = array();		$this->filters = array();		$this->filters[] = "tbl.date between ".ms($this->date_from)." and ".ms($this->date_to);		$this->filters[] = "grn.active = 1 and grr.active = 1 and grn.status = 1 and grn.approved = 1";		if($this->po_owner_list) $this->po_filter[] = "po.user_id in (".join(",", $this->po_owner_list).")";		$this->po_filter = join(' and ', $this->po_filter);		//parent::process_form();	}	function load_branch_group($id=0){		global $con,$smarty,$con_multi;	    if(isset($this->branch_group))  return $this->branch_group;		$branch_group = array();				// check whether select all or specified group		if($id>0){			$where = "where id=".mi($id);			$where2 = "and bgi.branch_group_id=".mi($id);		}		// load header		$con_multi->sql_query("select * from branch_group $where",false,false);		if($con_multi->sql_numrows()<=0) return;		while($r = $con_multi->sql_fetchrow()){            $branch_group['header'][$r['id']] = $r;		}		$con_multi->sql_freeresult();				// load items		$q1 = $con_multi->sql_query("select bgi.*,branch.code,branch.description from branch_group_items bgi left join branch on bgi.branch_id=branch.id where branch.active=1 $where2 order by branch.sequence, branch.code",false,false);		while($r = $con_multi->sql_fetchassoc($q1)){	        $branch_group['items'][$r['branch_group_id']][$r['branch_id']] = $r;	        $branch_group['have_group'][$r['branch_id']] = $r['branch_id'];		}		$con_multi->sql_freeresult($q1);				$this->branch_group = $branch_group;		//print_r($this->branch_group);		$smarty->assign('branch_group',$branch_group);		$smarty->assign('branches_group',$branch_group);		return $branch_group;	}		function ajax_load_sku_list(){        global $smarty, $sessioninfo, $con_multi;		/*$con_multi = new mysql_multi();		if(!$con_multi){	 		die("Error: Fail to connect report server");		}*/				$form = $_REQUEST;				$branch_id_list = array();		if(BRANCH_CODE == 'HQ'){    // HQ mode			$branch_id = mi($form['branch_id']);			$bgid = explode(",",$form['branch_id']);			if($bgid[1] || $branch_id<0){ // branch group selected				if($this->branches_group){					foreach($this->branches_group['items'][$bgid[1]] as $bid=>$b){						$branch_id_list[] = $bid;					}				}			}elseif($branch_id){  // single branch selected			    $branch_id_list[] = $branch_id;			}   			else{   // all branches selected				foreach($this->branches as $bid=>$b){                    $branch_id_list[] = $bid;				}			}		}else{  // Branches mode            //$branch_id = mi($sessioninfo['branch_id']);            $branch_id_list[] = mi($sessioninfo['branch_id']);		}				$po_filter = "";		$filters = $sales_data = array();		$filters[] = "vsh.vendor_id = ".mi($form['vendor_id']);		$filters[] = "tbl.date between ".ms($form['date_from'])." and ".ms($form['date_to']);		$filters[] = "grn.active = 1 and grr.active = 1 and grn.status = 1 and grn.approved = 1";		if($form['po_owner_list']) $po_filter = " and po.user_id in (".join(",", $form['po_owner_list']).")";				foreach($branch_id_list as $key=>$bid){			$q1 = $con_multi->sql_query($sql="select tbl.*, v.id as vendor_id, v.code as vd_code, v.description as vd_desc, grr.id as grr_id,										si.sku_item_code, si.artno, si.mcode, si.description										from sku_items_sales_cache_b".$bid." tbl										left join sku_items si on si.id = tbl.sku_item_id										left join grn_items gi on gi.sku_item_id = tbl.sku_item_id and gi.branch_id = ".mi($bid)."										left join grn on grn.id = gi.grn_id and grn.branch_id = gi.branch_id										left join grr on grr.id = grn.grr_id and grr.branch_id = grn.branch_id										join vendor_sku_history_b".$bid." vsh on vsh.sku_item_id=tbl.sku_item_id and tbl.date between vsh.from_date and vsh.to_date and vsh.vendor_id=grn.vendor_id										left join vendor v on v.id = grn.vendor_id										where ".join(" and ", $filters)."										order by v.code, v.description");			while($r = $con_multi->sql_fetchassoc($q1)){				$q2 = $con_multi->sql_query("select * 											 from grr											 left join grr_items gi on gi.grr_id = grr.id and gi.branch_id = grr.branch_id											 left join po on po.po_no = gi.doc_no											 where gi.type = 'PO' and grr.id = ".mi($r['grr_id'])." and grr.branch_id = ".mi($bid).$po_filter);											 				if($con_multi->sql_numrows($q2) == 0 || isset($sales_data[$r['sku_item_id']][$r['date']])) continue;				$con_multi->sql_freeresult($q2);				$table[$r['sku_item_id']]['sku_item_code'] = $r['sku_item_code'];				$table[$r['sku_item_id']]['mcode'] = $r['mcode'];				$table[$r['sku_item_id']]['artno'] = $r['artno'];				$table[$r['sku_item_id']]['description'] = $r['description'];				$table[$r['sku_item_id']]['sales_qty'] += $r['qty'];				$table[$r['sku_item_id']]['sales_amt'] += $r['amount'];				$table[$r['sku_item_id']]['cost_amt'] += $r['cost'];				$table[$r['sku_item_id']]['gp'] += round($r['amount'] - $r['cost'], 2);				$sales_data[$r['sku_item_id']][$r['date']] = true;								if($table[$r['sku_item_id']]['gp'] > 0){					$table[$r['sku_item_id']]['gp_perc'] = round($table[$r['sku_item_id']]['gp'] / $table[$r['sku_item_id']]['sales_amt'] * 100, 2);				}			}			$con_multi->sql_freeresult($q1);		}		//$con_multi->close_connection();				$smarty->assign('vendor_id', $form['vendor_id']);		$smarty->assign('table', $table);				$smarty->display("report.monthly_gp_report_by_vendor.sku_list.tpl");	}}$MONTHLY_GP_REPORT_BY_VENDOR = new MONTHLY_GP_REPORT_BY_VENDOR('Monthly GP Report by PO Owner / Buyer');?>