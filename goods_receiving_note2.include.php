<?php/*6/24/2011 4:14:16 PM Andy- Make all branch default sort by sequence, code.7/13/2011 10:47:12 AM Justin- Added copy po items and check grn item's type features for the share with handheld.- Modified to copy po items to handle between insertion into between tmp_grn_items or grn_items.- Modified while copy po items into grn items, use grr's document no instead po ID.7/14/2011 6:26:21 PM Justin- Fixed the bugs where cannot recalculate the total amount and selling for GRN.- Fixed the custom GRN report that cannot display.- Added the ability to store po items between tmp and grn items tables.7/25/2011 9:29:35 AM Justin- Fixed the GRN performance report that cannot print out.7/26/2011 6:06:21 PM Justin- Added Ctn field to compatible with "allow decimal" feature.- Enhanced to have allow decimal points key in for ctn and pcs.- Enhanced the system can have return by Ctn >> added new field as "return_ctn".- Enhanced speed of searching => get_item_details.8/1/2011 2:28:32 PM Justin- Fixed the document no and type wrongly assign when it is not created from GRN Future.- Fixed the wrong calculation for GRR amount between GRN and GRN Future.8/5/2011 10:40:21 AM Justin- Modified the cost to pick up base on current GRR's received date.8/10/2011 1:39:32 PM Justin- Fixed the po cost to round up by 3.8/12/2011 3:04:21 PM Justin- Added the missing functions of repopulate vendor sku history, sku vendor history and sku item cost.- Added the missing updates of these newly added functions while the GRN have been approved.- Added new function "grn_repopulate_po_receiving_count" to re-calculate the delivered qty for po items.9/8/2011 11:05:11 AM Justin- Modified the round up for cost to base on config.- Modified the Ctn and Pcs round up to base on config set.9/9/2011 10:48:32 AM Justin- Added new report printing option "GRN Summary".9/20/2011 3:41:43 PM Justin- Added the missing config assigned from global.- Fixed the system wrongly assign the document type and no.9/22/2011 4:39:11 PM Justin- Updated the repopulate script for vendor sku history can filter by branch.10/5/2011 6:09:34 PM Justin- Fixed the GRN cannot pickup PO items.- Fixed the bugs where system unable to search the correct item group while the PO is from other branches.10/15/2011 2:09:34 PM Justin- Fixed the change item type bugs.10/20/2011 12:37:32 PM Justin- Fixed missing of message alert while do GRN reset11/17/2011 10:28:43 AM Justin- Fixed the GRR date being replaced by PO added date when GRN contains PO.11/29/2011 11:43:43 AM Justin- Fixed the sku_items_cost is not updated due to the sequence align wrongly.- Fixed the sku_items_cost query selection filter.2/22/2012 9:56:43 AM Justin- Fixed the bugs where po count function wrongly capture the document no.3/12/2012 2:35:19 PM Andy- Add checking for config when add grn items. (will ignore IBT GRN if found related config is not set).3/13/2012 10:06:55 AM Andy- Fix add item error.2/24/2012 10:10:32 AM Justin- Added new feature to capture IBT DO items and becomes GRN items.- Added new ability to retrieve do items info.- Modified the approval history also lookup based on approval history id.4/20/2012 5:43:05 PM Alex- add packing uom code =>load_grn_items(), get_items_details()6/28/2012 4:08:23 PM Justin- Added new feature to accept new report "GRN Performa Report" that can print during waiting for approval.7/2/2012 1:49:34 PM Justin- Modified to use print_gra_report instead of print_grn_performa_report.7/4/2012 4:15:43 PM Justin- Added new report "Debit Note Report".7/5/2012 5:27:23 PM Justin- Enhanced to capture DO items while DO is IBT Credit Sales from franchise.7/12/2012 10:20:23 AM Justin- Bug fixed to separate both franchise and skip auto generate GRN checking while import items from DO.7/13/2012 05:20:23 PM Justin- Added to pick up packing UOM fraction.7/25/2012 12:25 PM Justin- Added to pick up packing UOM fraction while printing report.8/3/2012 11:40 AM Justin- Enhanced to order by PO items as if found config grn_future_report_order_sequence_by_po is set.8/24/2012 11:52 AM Justin- Enhanced to pickup related invoice info.8/28/2012 2:57 PM Justin- Bug fixed on picking up related invoice.9/18/2012 10:02 AM Justin- Bug fixed on system that update zero total amount.9/26/2012 2:52 PM Justin- Bug fixed on system does not show out last page content for DN report.9/28/2012 4:42 PM Justin- Fixed bug of PO cancellation date show in template always show as latest date.10/1/2012 4:04 PM Justin- Bug fixed the repopulate data insert into vendor_sku_history to check ctn and pcs must greater than 0.10:17 AM 10/2/2012 Justin- Fixed bug of the unregconized fields from table.10/9/2012 2:13 PM Justin- Bug fixed system will put PO information into child where it suppose to put into parent row.10/12/2012 11:16 AM Justin- Bug fixed on selling price do not divide correctly.10/18/2012 4:27 PM Justin- Enhanced to store and pickup bom information.10/29/2012 12:03 PM Justin- Bug fixed on system unable to get valid sku item id.3/12/2013 4:39 PM Justin- Enhanced to pickup average cost while copy PO items.4/2/2013 11:59 AM Justin- Fixed the rounding error when recalculating total selling and amount for GRN.4/12/2013 2:10 PM Justin- Added new feature to monitor grn items qty must equal or less than po qty if found vendor got turn on this setting.4/19/2013 2:36 PM Justin- Bug fixed on system capturing wrong item group for po item matching.- Enhanced to multiply available PO qty with packing uom fraction.5/10/2013 3:54 PM Andy- Fix grn cannot get po cost if the po is not create from own branch.- Fix the po cost does not include tax & discount.5/15/2013 2:12 PM Justin- Bug fixed on the average cost does not multiply with order uom fraction from PO items.- Bug fixed on the discount and tax should calculate by PO items.5/27/2013 4:47 PM Justin- Bug fixed on system will shows zero available PO qty whenever save from Account Verification.6/25/2013 11:25 AM Justin- Bug fixed on fraction capture as NULL, causing cost become 0.6/27/2013 11:25 AM Justin- Bug fixed on system print out signature area while it is not last page whenever user print 2 reports.7/1/2013 5:42 PM Justin- Enhanced print DN report able to pickup Invoice and DO list.7/3/2013 11:32 AM Fithri- pm notification standardization7/30/2013 3:17 PM Andy- Change module to use get_pm_recipient_list2() and send_pm2() in order to compatible with latest Approval Flow Settings.8/7/2013 4:39 PM Justin- Bug fixed on system wrongly pickup po items from different PO.8/19/2013 2:53 PM Justin- Bug fixed on GRN having SQL query error.10/7/2013 6:14 PM Justin- Enhanced to calculate total qty and cost by multiple branches.12/23/2013 10:23 AM Fithri- new module 'Stucked Documents Approval'3/24/2014 5:56 PM Justin- Modified the wording from "Canceled" to "Cancelled".7/16/2014 4:15 PM Justin- Bug fixed on last approval confirms GRN will cause return qty is not store properly.8/19/2014 3:45 PM Justin- Bug fixed on PO amount will sum up twice if found DO and PO having same document no.9/29/2014 4:27 PM Justin- Bug fixed on when create new GRN and GRR contains only one DO without other documents, system will not able to get GRR info.12/3/2014 12:17 PM Andy- Fix grn cost should not included foc.11/11/2014 3:53 PM Justin- Enhanced to have GST calculation.3/14/2015 9:42 AM Justin- Enhanced to have generate and print DN feature.3/25/2015 1:43 PM Justin- Bug fixed on current selling price does not calculate exclusive/inclusive gst.3/26/2015 5:09 PM Justin- Bug fixed on print DN will redirect user to blank screen.4/3/2015 11:24 AM Justin- Bug fixed on GST info did not trigger when copy over PO items that is not under GST.4/3/2015 6:14 PM Justin- Enhanced to have checking not to insert Account GST info while it is chosen the same as current one.4/7/2015 3:27 PM Justin- Bug fixed on GRN printing will show empty for certain info.- Bug fixed on final amount update wrongly.4/8/2015 1:48 PM Justin- Enhanced to allow user can print returned items under account summary.- Enhanced to always pickup current selling price to calculate GST.- Enhanced to always pickup current selling price when copy PO items.4/9/2015 11:26 AM Justin- Bug fixed on selling price problem with GST when copy PO items over.- Bug fixed on GRN Summary cannot display inv/do no.- Bug fixed on selling price include GST problem.4/13/2015 10:32 AM Justin- Enhanced to capture invoice qty while in GST mode.4/20/2015 12:04 PM Andy / Justin- Fix print performance selling price rounding problem.- Enhanced to pickup ctn, pcs and cost price from account correction while view on approval screen.4/23/2015 10:47 AM Justin- Bug fixed on printing D/N will retrieve the inactive one.- Bug fixed on did not reset all divisions ID while do reject on approval flow.4/23/2015 4:20 PM Justin- Bug fixed on sub total will double up when use 2 times of performance report.4/24/2015 5:30 PM Justin- Bug fixed some times will not able to copy full records while copying PO items.4/28/2015 6:03 PM Justin- Enhanced to check if GRN have generated D/N.5/6/2015 5:56 PM Justin- Enhanced to show document no to skip those duplicated one.5/18/2015 2:36 PM Justin- Bug fixed on nett selling price calculated wrongly while printing performance report.5/29/2015 2:31 PM Justin- Bug fixed the load available PO qty is not working properly.6/1/2015 11:30 AM Justin- Enhanced to show invoice no. list while found the GRR is having PO & invoice.6/24/2015 11:03 AM Justin- Bug fixed on normal and GST selling price sometimes will show as the same.7/15/2015 11:12 AM Justin- Bug fixed selling price some times will deduct twice from GST.7/15/2015 3:19 PM Justin- Bug fixed on can only copy one DO to GRN while GRR contains more than one DO.7/20/2015 2:50 PM Andy- Remove the use of Account Correction figure to replace the original figure.- Bug fixed on returned item list will not capture items not in ARMS.8/14/2015 6:00 PM Justin- Bug fixed selling GST price will get wrongly while copy DO items.8/21/2015 10:10 AM Justin- Bug fixed on GRN performance report will print empty rows if GRR contains PO.9/4/2015 3:47 PM Andy- Change to always generate gra when got config "use_grn_future_allow_generate_gra"- Enhance the generate return gra function. returned item will not deduct from grn, will add as actual item in gra.9/23/2015 9:57 AM DingRen- when enable use_grn_future_allow_generate_gra do not deduct return ctn/pcs.9/28/2015 5:26 PM DingRen- load grn_auto_load_po_items on load_grn_header- load load_grr_item_header on load_grn_header10/13/2015 9:33 AM- added function check_gra.- change load_grn_header to use check_gra function10/23/2015 4:48 PM DingRen- enable to send PM when reject GRN and filter user id to avoid send twice PM11/30/2015 9:43 PM DingRen- when generate gra save amount_gst, gst and amount- amount is change to decimal 212/24/2015 9:55 AM Qiu Ying- SKU Additional Description should show in document printing1/15/2016 2:08 PM Andy- Fix get_items_details cannot get gst info if passing by grn_item_id.02/15/2016 11:55 Edwin- Fixed load PO items sequence when "Load all PO Items" is pressed02/19/2016 13:44 Edwin- Bug fixed on PO items cost does not load correctly when two identical items are present03/01/2016 15:58 Edwin- Enhanced on show GST amount when GRN is under gst03/09/2016 15:30 Edwin- Bug fixed on load received item sequence error03/24/2016 17:15 Edwin- Added privilege to reset GRN although user level is lower than reset level required04/01/2016 10:30 Edwin- Bug fixed on approved or rejected grn without checking whether these actions were executed more than once4/28/2016 11:03 AM Andy- Fix grn item selling price should filter less than rcv_date + 1 day.5/11/2016 11:57 AM Andy- Fix print grn performance, grn items selling price should use output tax, not input tax.- Fix to only recalculate grn performance selling price when gst_selling_price is zero or (branch no gst, but grn have gst).5/30/2016 6:01 PM Andy- Fixed check po delivered qty to compatible to grn future.5/31/2016 5:01 PM Andy- Fix query error on update_po_receiving_count().6/7/2016 10:42 AM Andy- Enhanced to allow owner to reset approved grn.10/5/2016 15:32 AM Kee Kee- Change die() message to Unknow message10/7/2016 11:46 AM Andy- Fixed stucked approval redirect to wrong php.10/18/2016 15:26 Qiu Ying- Bug fixed on "Load all po items" button should only exist when doc type = PO, grn = saved / edit mode, category allow grn to load po = yes11/2/2016 4:45 PM Andy- Fixed print grn report to print item in po first.12/29/2016 12:15 PM Andy- Fixed Return Qty always stuck in get_item_details() function.1/12/2017 4:14 PM Andy- Enhanced to use branch_is_under_gst to check gst selling price.1/13/2017 12:01 PM Andy- Move update_po_receiving_count() to goods_receiving_record.include.php1/17/2017 2:32 PM Andy- Fixed when reset GRN, po delivered qty din't update.2/22/2017 11:59 AM Justin- Enhanced to pickup branch code while getting GRR information.3/23/2017 3:58 PM Justin- Enhanced to have new function "grn_sn_handler".- Enhanced to auto revert all S/N from DO Transfer back to the existing branch while GRN has been reset.3/31/2017 11:33 AM Justin- Bug fixed on S/N list alwyas there even do reset GRN.5/10/2017 3:12 PM Justin- Enhanced to auto delete the duplicated returned items from "SKU not in ARMS" when do grn reset.- Enhanced returned items will become part of the GRA > "Item not in ARMS" after the following GRN have been fully approved.- Bug fixed on gra amount always insert as zero even have cost and qty when grn is confirmed.- Bug fixed on item not in ARMS will always inserted into all GRA when there are more than 1 GRA to be generated.- Enhanced to get document no, date and gst information from GRR while creating GRA.5/15/2017 1:19 PM Justin- Enhanced to have FOC qty and discount calculation feature for Account Verification.5/22/2017 2:04 PM Justin- Enhanced to pickup gst information while owner saved the GRN.6/2/2017 11:19 AM Justin- Bug fixed on gst information for SKU not in ARMS will be missing after GRN is fully approved.7/14/2017 5:21 PM Justin- Bug fixed on non sku items will return error when it is empty.7/21/2017 5:09 PM Justin- Bug fixed on GRA items will still capture GST data even if the following GRN is not under GST.8/1/2017 5:13 PM Justin- Bug fixed on GRN items that unable to get selling price from PO/DO items while first time user added it.9/21/2017 2:56 PM Justin- Bug fixed on returned items should generate into GRA as valid GRA items instead of "Item not in ARMS SKU".11/24/2017 5:20 PM Justin- Enhanced GRR not sum up OTHER amount when found having PO document.4/19/2018 3:14 PM Justin- Enhanced to have foreign currency feature.7/5/2018 2:51 PM Justin- Bug fixed on generated GRA will not capture foreign currency info.- Bug fixed on generated GRA items did not capture foreign currency info.- Bug fixed on showing mysql error while generating GRA.8/9/2018 5:36 PM Justin- Enhanced to show images attached from GRR.8/27/2018 2:35 PM Justin- Enhanced to bring back the GRN Tax.- Enhanced to calculate GRN Tax amount base on total GRN amount instead of calculate it base on itemise.- Add SST feature.9/24/2018 5:50 PM Justin- Enhanced to always check if GRN has D/N generated.10/23/2018 11:07 AM Justin- Enhanced to load SKU Type list from database instead of hardcoded it.11/27/2018 4:38 PM Justin- Enhanced to load Quotation cost when getting item detail.- Enhanced to show Invoice Date beside of Invoice No.12/21/2018 11:13 AM Justin- Bug fixed on showing PHP warning errors.5/17/2019 2:17 PM William- Pickup report_prefix for enhance "GRN".1/15/2020 10:35 AM Justin- Enhanced to insert ID manually for some tables that uses auto increment.1/16/2020 3:36 PM William- Move function "update_sku_item_cost", "update_total_selling", "update_sku_vendor_history", "items_return_handler", "update_total_amount" to grnManager.3/30/2020 4:50 PM Justin- Bug fixed on the cost calculation while the GRR contains PO and it was HQ purchase.5/5/2020 3:41 PM Justin- Enhanced to remove the owner from able to reset the approved GRN.*//*item_group = 1 = item matched with po	0 = item in po, but no scan	2 = match po parent/child	3 = item not in po*/require_once("vendor_sku.include.php");require_once("dnote.include.php");require_once("goods_receiving_record.include.php");if($config['po_enable_ibt']){    include_once("masterfile_sku_monitoring_group.include.php");}construct_gst_list("purchase");function load_grn_header($grn_id, $branch_id){	global $con, $smarty, $sessioninfo, $config, $appCore;		$q1=$con->sql_query("select grn.*, bah.approvals, vendor.description as vendor, category.description as department, category.grn_auto_load_po_items,						user.u, user2.u as acc_u, b.code as branch_code,b.report_prefix , vendor.code as vd_code, vendor.address as vd_address						from grn 						left join branch_approval_history bah on bah.id = grn.approval_history_id and bah.branch_id = grn.branch_id						left join branch b on b.id = grn.branch_id						left join user on user_id = user.id 						left join user user2 on by_account = user2.id 						left join vendor on vendor_id = vendor.id 						left join category on grn.department_id = category.id 						where grn.id=$grn_id and grn.branch_id=$branch_id");	$grn = $con->sql_fetchassoc($q1);	$con->sql_freeresult($q1);	$grr=load_grr_item_header($grn['grr_id'], $branch_id, $grn['grr_item_id'], $grn['is_future']);	$grn['type'] = $grr['type'];	if ($grr['grp_do_no'] && $grr['type'] == "DO") $grn['po_items']=load_do_items($grr['grp_do_no']);	elseif ($grr['grp_po_no'] && $grr['type'] == "PO") $grn['po_items']=load_po_items($grr['grp_po_no']);	if(unserialize($grn['non_sku_items'])) $grn['non_sku_items'] = unserialize($grn['non_sku_items']);	$smarty->assign("grr", $grr);		if($grn['approval_history_id']>0){		$q2=$con->sql_query("select i.timestamp, i.log, i.status, user.u from branch_approval_history_items i left join branch_approval_history h on i.approval_history_id=h.id and i.branch_id=h.branch_id left join user on i.user_id = user.id where h.ref_table = 'grn' and i.branch_id=".mi($branch_id)." and (h.ref_id=".mi($grn_id)." or h.id = ".mi($grn['approval_history_id']).")order by i.timestamp");		$smarty->assign("approval_history", $con->sql_fetchrowset($q2));		}		if(preg_match("/^\|$sessioninfo[id]\|/", $grn['approvals'])) 		$grn['is_approval'] = 1;	// search if this GRN have D/N generated	$q1 = $con->sql_query("select * from dnote where ref_table = 'grn' and ref_id = ".mi($grn_id)." and branch_id = ".mi($branch_id)." and active=1");	$dn_is_generated = $con->sql_numrows($q1);	$con->sql_freeresult($q1);	$smarty->assign("dn_is_generated", $dn_is_generated);	    check_gra($grn,$branch_id);		if($config['enable_gst']){		$prms = array();		$prms['branch_id'] = $branch_id;		$prms['date'] = date("Y-m-d");		$grn['branch_is_under_gst'] = check_gst_status($prms);	}		// load GRR attachment while it is under account verification or view page	if(!$_REQUEST['action']){		$prms = array();		$prms['is_grn'] = true;		$prms['grr_id'] = $grn['grr_id'];		$prms['branch_id'] = $branch_id;		$appCore->grnManager->load_grr_images($prms);	}		//print_r($grn);		return $grn;}function load_grn_items($grn_id, $branch_id, $po_items, $use_tmp = false){	global $con, $smarty, $sessioninfo, $config; 	$form=$_REQUEST;	$owner_filter='';	if($use_tmp){		$table="tmp_grn_items";		$owner_filter=" and tgi.user_id=$sessioninfo[id] ";	}else $table="grn_items";	if($form['is_grn_future_report']) $order_by = "if(tgi.item_group <= 2, sku_items.sku_id, 1=1),";	if(($form['print_grn_var_report'] || $form['print_grn_perform_report']) && $config['grn_future_report_order_sequence_by_po']) $order_by = "if(tgi.po_item_id > 0, tgi.po_item_id, 100000000+tgi.id), tgi.item_group,";		$q1=$con->sql_query("select tgi.*, ifnull(sip.price, sku_items.selling_price) as curr_selling_price,  tgi.selling_price, sku_items.sku_id, sku_items.mcode, 						 sku_items.link_code, sku_items.sku_item_code, sku_items.description, sku_items.additional_description, u1.code as rcv_uom, 						 u1.fraction as uom_fraction, sku_items.artno, sku_items.packing_uom_id as master_uom_id, grn.non_sku_items, tgi.item_group, tgi.item_check, 						 u1.code as uom_code, sku_items.doc_allow_decimal, u1.code as order_uom, u2.code as selling_uom, u2.fraction as selling_uomf, 						 puom.code as packing_uom_code, puom.fraction as packing_uom_fraction, grn.approved						 from $table tgi						 left join grn on grn.id = tgi.grn_id and grn.branch_id = tgi.branch_id						 left join sku_items on tgi.sku_item_id = sku_items.id						 left join sku on sku.id = sku_items.sku_id 						 left join sku_items_price sip on sip.sku_item_id = sku_items.id and sip.branch_id = tgi.branch_id						 left join uom puom on puom.id=sku_items.packing_uom_id						 left join uom u1 on tgi.uom_id = u1.id						 left join uom u2 on tgi.selling_uom_id = u2.id						 where tgi.grn_id=$grn_id						 and tgi.branch_id=$branch_id $owner_filter 						 order by $order_by tgi.po_item_id, tgi.id") or die(mysql_error());	$items = array();	// check if it is loading items from approval screen then show account correction data	//$approval_screen = $smarty->get_template_vars('approval_screen');	//$readonly = $smarty->get_template_vars('readonly');	if($con->sql_numrows()!=0){		while($r=$con->sql_fetchassoc($q1)){			if($config['use_grn_future_allow_generate_gra'] && !$r['approved'] && $r['item_check']) $smarty->assign("have_grn_returned_items", 1);						if ($po_items){		        foreach($po_items as $k=>$pi){		            if ($pi['id'] == $r['po_item_id'] && $r['item_group'] <= 1){						$po_no = $pi['po_no'];						if ($pi['compared']){							continue; // skip compared rows						}		                $r['po_disc_remark'] = $pi['disc_remark'];		                $r['po_no'] = $pi['po_no'];		                $r['po_date'] = $pi['po_date'];		                $r['po_tax'] = $pi['tax'];		                $r['po_order_ctn'] = $pi['qty'];		                $r['po_order_pcs'] = $pi['qty_loose'];		                $r['po_foc_ctn'] = $pi['foc'];		                $r['po_foc_pcs'] = $pi['foc_loose'];		                $r['po_pcs'] = $pi['qty_loose'] + $pi['foc_loose'];		                $r['po_ctn'] = $pi['qty'] + $pi['foc'];		                $r['po_uom'] = $pi['order_uom'];		                $r['po_uomf'] = $pi['uomf'];		                $r['po_gst_id'] = $pi['cost_gst_id'];		                $r['po_gst_code'] = $pi['cost_gst_code'];		                $r['po_gst_rate'] = $pi['cost_gst_rate'];		                if ($r['po_uomf']==0){						    $r['po_uom'] = 'EACH';							$r['po_uomf'] = 1;						}						if ($r['po_item_id']==0){							$r['po_item_id'] = $pi['id'];						}												//set if the item is foc.						if ($foc_item)						{							foreach($foc_item as $k_foc=>$v_foc){								if($r['sku_item_id']==$k_foc){									$r['is_foc']=1;									$r['foc_id']=$v_foc;								}							}       			            	}						$po_items[$k]['compared'] = 1; // mark as compared		            	break;					}				}			}						if($r['po_item_id'] && $r['po_qty']){				$prms = array();				$prms['po_item_id'] = $r['po_item_id'];				$prms['branch_id'] = $branch_id;				$prms['po_no'] = $r['po_no'];				$prms['po_qty'] = $r['po_qty'] * $r['packing_uom_fraction'];				$r['available_po_qty'] = load_available_po_qty($prms);			}						// gst			if($r['gst_id'] > 0){				check_and_extend_gst_list($r);			}						// get current nett selling price			if(!$r['selling_gst_id']){ // check to get selling GST info				$output_gst = get_sku_gst("output_tax", $r['sku_item_id']);				if($output_gst){					$r['selling_gst_id'] = $output_gst['id'];					$r['selling_gst_code'] = $output_gst['code'];					$r['selling_gst_rate'] = $output_gst['rate'];				}			}						$prms = array();			$r['inclusive_tax'] = get_sku_gst("inclusive_tax", $r['sku_item_id']);			$prms['selling_price'] = $r['selling_price'];			$prms['inclusive_tax'] = $r['inclusive_tax'];			$prms['gst_rate'] = $r['selling_gst_rate'];			$gst_sp_info = calculate_gst_sp($prms);			/*if($approval_screen && $readonly){ // if view from approval screen, need to show the actual qty				if($r['acc_pcs'] != "" || $r['acc_ctn'] != ""){					$r['ctn'] = $r['acc_ctn'];					$r['pcs'] = $r['acc_pcs'];				}								if($r['acc_cost']) $r['cost'] = $r['acc_cost'];								if($r['acc_gst_id']){					$r['gst_id'] = $r['acc_gst_id'];					$r['gst_code'] = $r['acc_gst_code'];					$r['gst_rate'] = $r['acc_gst_rate'];				}			}*/						$items[$r['id']] = $r;		}	}	return $items;}function copy_to_tmp($grn_id, $branch_id){	global $con, $sessioninfo, $appCore;	//delete ownself GRN items in tmp table	$con->sql_query("delete from tmp_grn_items where grn_id=$grn_id and branch_id=$branch_id and user_id=$sessioninfo[id]");		// select all grn items	$q1 = $con->sql_query("select 						   grn_id, branch_id, sku_item_id, artno_mcode, uom_id, cost, selling_uom_id, selling_price, po_qty, po_cost, po_item_id, weight, ctn, pcs, return_ctn, return_pcs, acc_ctn, acc_pcs, acc_cost, original_cost, item_group, item_check, from_isi, reason, bom_ref_num, bom_qty_ratio, available_po_qty, gst_id, gst_code, gst_rate, acc_gst_id, acc_gst_code, acc_gst_rate, selling_gst_id, selling_gst_code, selling_gst_rate, gst_selling_price, inv_qty, inv_cost, acc_foc_ctn, acc_foc_pcs, acc_foc_amt, acc_disc, acc_disc_amt						   from grn_items 						   where grn_id=".mi($grn_id)." and branch_id=".mi($branch_id)."						   order by id");	while($r = $con->sql_fetchassoc($q1)){		// call appCore to generate new ID		unset($new_id);		$new_id = $appCore->generateNewID("tmp_grn_items", "branch_id = ".mi($r['branch_id']));				if(!$new_id) die("Unable to generate new ID from appCore!");		$r['id'] = $new_id;		$r['user_id'] = $sessioninfo['id'];				if($r['acc_ctn'] == '' && $r['acc_pcs'] == ''){			unset($r['acc_ctn'], $r['acc_pcs']);		}				if($r['acc_foc_ctn'] == '' && $r['acc_foc_amt'] == ''){			unset($r['acc_foc_ctn'], $r['acc_foc_amt']);		}				if($r['acc_cost'] == '') unset($r['acc_cost']);		if(!$r['acc_gst_id']) unset($r['acc_gst_id']);		if(!$r['acc_gst_code']) unset($r['acc_gst_code']);		if(!$r['acc_gst_rate']) unset($r['acc_gst_rate']);		if($r['inv_qty'] == '') unset($r['inv_qty']);		if($r['inv_cost'] == '') unset($r['inv_cost']);		if($r['acc_foc_amt'] == '') unset($r['acc_foc_amt']);		if($r['acc_disc'] == '') unset($r['acc_disc']);		if($r['acc_disc_amt'] == '') unset($r['acc_disc_amt']);		$con->sql_query("insert into tmp_grn_items ".mysql_insert_by_field($r));	}	$con->sql_freeresult($q1);}function add_temp_item(&$r, $grn_id){	global $con, $branch_id, $sessioninfo, $appCore;		// call appCore to generate new ID	$new_id = $appCore->generateNewID("tmp_grn_items", "branch_id = ".mi($branch_id));		if(!$new_id) die("Unable to generate new ID from appCore!");	$r['id'] = $new_id;	$r['grn_id']=$grn_id;	$r['branch_id']=$branch_id;	$r['user_id']=mi($sessioninfo['id']);	$r['sku_item_id']=mi($r['sku_item_id']);    if ($r['artno'] != '') $r['artno_mcode'] = $r['artno'];		else $r['artno_mcode'] = $r['mcode'];		$r['selling_uom_id'] = '1';		$con->sql_query("insert into tmp_grn_items ".mysql_insert_by_field($r, array("id", "grn_id", "branch_id", "user_id", "sku_item_id", "artno_mcode", "uom_id", "cost", "selling_uom_id", "po_qty", "po_cost", "po_item_id", "selling_price", "pcs", "item_group", "from_isi", "bom_ref_num", "bom_qty_ratio","selling_gst_id","selling_gst_code","selling_gst_rate","gst_selling_price"))); 	//$r['id'] = $con->sql_nextid(); 		return $new_id;}function get_items_details($id, $grn_item_id){ //Get item details base on sku_item id	global $con, $sessioninfo, $config, $vendor_gst_list;		$form = $_REQUEST;    // $branch_chk = "";	//print_r($form);	//if (BRANCH_CODE!='HQ')	//	$branch_chk = " grn_items.branch_id=$sessioninfo[branch_id] and ";	if($grn_item_id){		$tbl = "tmp_grn_items";		$filter = "tgi.branch_id = ".mi($sessioninfo['branch_id'])." and tgi.id = ".mi($grn_item_id);	}elseif($id){		$tbl = "grn_items";		$filter = "tgi.branch_id = ".mi($sessioninfo['branch_id'])." and grn.approved=1 and tgi.sku_item_id = ".mi($id)." and grr.rcv_date <= ".ms($form['rcv_date']);		$having = "having cost > 0";	}else{		return;	}  		if(!$grn_item_id){		$filter_grn = array();		if(BRANCH_CODE == 'HQ'){			if(!$config['grn_do_branch2hq_update_cost']){				$filter_grn[] = "gri.type<>'DO'";	// exclude DO			}		}else{			if(!$config['grn_do_hq2branch_update_cost']){				$filter_grn[] = "not (gri.type='DO' and do.branch_id=1)";			}			if(!$config['grn_do_branch2branch_update_cost']){				$filter_grn[] = "not (gri.type='DO' and do.branch_id>1)";			}		}		if($filter_grn)	$filter_grn = "and ".join(' and ', $filter_grn);		else $filter_grn = "";	}		// get quotation cost when it is not matched with PO/DO	$qc_info = array();	if(!$grn_item_id){		$qc_filters = array();		$qc_filters[] = "sivqch.branch_id = ".mi($sessioninfo['branch_id']);		$qc_filters[] = "sivqch.vendor_id = ".mi($form['vendor_id']);		$qc_filters[] = "sivqch.sku_item_id = ".mi($id);		$qc_filters[] = "sivqch.added <= ".ms($form['rcv_date']." 23:59:59");				// get quotation cost		$q1 = $con->sql_query("select sivqch.*							   from sku_items_vendor_quotation_cost_history sivqch							   join sku_items si on sivqch.sku_item_id=si.id							   where ".join(" and ", $qc_filters)."							   order by sivqch.added desc 							   limit 1");		$qc_info = $con->sql_fetchassoc($q1);		$con->sql_freeresult($q1);	}		// get last grn cost	$items=$con->sql_query("select si.*, tgi.*, si.packing_uom_id as master_uom_id, if (tgi.acc_cost is null, tgi.cost, tgi.acc_cost) as cost, 							tgi.uom_id as uom_id, uom.fraction as uom_fraction, uom.code as uom_code, sku.is_bom,							ifnull(sip.price, si.selling_price) as curr_selling_price, tgi.selling_price, puom.code as packing_uom_code, puom.fraction as packing_uom_fraction, tgi.id as grn_item_id, sku.mst_input_tax, sku.category_id, si.id as sku_item_id, grn.is_under_gst as history_is_under_gst							from $tbl tgi							left join sku_items si on tgi.sku_item_id=si.id							left join sku_items_price sip on sip.sku_item_id = si.id and sip.branch_id = tgi.branch_id							left join sku on sku.id = si.sku_id							left join uom on uom.id = tgi.uom_id							left join uom puom on puom.id=si.packing_uom_id							left join grn on tgi.grn_id=grn.id and tgi.branch_id=grn.branch_id							left join grr on grr_id=grr.id and grn.branch_id=grr.branch_id							left join grr_items gri on gri.branch_id=grn.branch_id and gri.id=grn.grr_item_id							left join do on do.do_no=gri.doc_no and gri.type='DO' and do.do_type='transfer' and do.do_branch_id=gri.branch_id							where $filter $filter_grn							$having							order by grr.rcv_date desc limit 1");	if($con->sql_numrows()==0){	    //get from po			$items=$con->sql_query("select si.*, po_items.*, po_items.id as po_item_id, po.po_no,								round(po_items.order_price, ".mi($config['global_cost_decimal_points']).") as cost, 								ifnull(sip.price, si.selling_price) as curr_selling_price, po_items.selling_price, 								uom2.id as uom_id, po_items.selling_uom_id as selling_uom_id, uom2.fraction as uom_fraction,								si.packing_uom_id as master_uom_id, uom2.code as uom_code, puom.code as packing_uom_code, puom.fraction as packing_uom_fraction, sku.is_bom, sku.mst_input_tax, sku.category_id, po.is_under_gst as history_is_under_gst								from po_items								left join sku_items si on po_items.sku_item_id = si.id								left join sku_items_price sip on sip.sku_item_id = si.id and sip.branch_id = po_items.branch_id								left join sku on sku.id = si.sku_id								left join uom puom on puom.id=si.packing_uom_id								left join uom uom2 on uom2.id = po_items.order_uom_id								left join po on po_items.po_id = po.id and po.branch_id = po_items.branch_id								where po.branch_id = ".mi($sessioninfo['branch_id'])." and po.active and po.approved and po_items.sku_item_id = ".mi($id)." and po.po_date <= ".ms($form['rcv_date'])."								having cost >0 								order by po.po_date desc limit 1");	}	if($con->sql_numrows()==0){	    //get from master		$items=$con->sql_query("select si.*, si.id as sku_item_id, si.cost_price as cost, 								ifnull(sip.price, si.selling_price) as selling_price, uom.id as uom_id,								si.packing_uom_id as master_uom_id, uom.fraction as uom_fraction, uom.code as uom_code,								ifnull(si.artno,si.mcode) as artno_mcode, puom.code as packing_uom_code, puom.fraction as packing_uom_fraction, sku.is_bom, sku.mst_input_tax, sku.category_id								from sku_items si								left join sku_items_price sip on sip.sku_item_id = si.id and sip.branch_id = ".mi($sessioninfo['branch_id'])."								left join sku on sku_id = sku.id								left join uom on uom.id = si.packing_uom_id								left join uom puom on puom.id=si.packing_uom_id								where si.id = ".mi($id));	}	$get = $con->sql_fetchassoc($items);		// check if have quotation cost, need to use it	if($qc_info['cost']>0){		$get['cost'] = $qc_info['cost'];	}	unset($qc_info, $qc_filters);	if($id && !$grn_item_id){		// get selling price from history		$price_date = date("Y-m-d",strtotime("+1 day",strtotime($form['rcv_date'])));		$r1 = $con->sql_query("select * from sku_items_price_history where added <= ".ms($price_date)." and sku_item_id = ".mi($id)." and branch_id = ".mi($sessioninfo['branch_id'])." order by added desc limit 1");		$siph = $con->sql_fetchassoc($r1);			if($siph['price']){			$get['selling_price']=$siph['price'];		}	}else{		$id = mi($get['sku_item_id']);	}	if($get['po_item_id'] && $get['po_qty'] && !$get['available_po_qty']){		$prms = array();		$prms['po_item_id'] = $get['po_item_id'];		$prms['branch_id'] = $sessioninfo['branch_id'];		$prms['po_no'] = $get['po_no'];		$prms['po_qty'] = $get['po_qty'] * $get['packing_uom_fraction'];		$get['available_po_qty'] = load_available_po_qty($prms);	}			if($form['is_under_gst']){		if(!$input_gst_list) $input_gst_list = construct_gst_list('purchase');				// if found got set special vendor gst code, then all items must default choose it		if($vendor_gst_list[$form['vendor_id']]['gst_register'] > 0){			$vd_gst = $vendor_gst_list[$form['vendor_id']]['gst_register'];			foreach($input_gst_list as $tmp_gst_info){				if($tmp_gst_info['id'] == $vd_gst){					$get['gst_id'] = $tmp_gst_info['id'];					$get['gst_code'] = $tmp_gst_info['code'];					$get['gst_rate'] = $tmp_gst_info['rate'];					break;				}			}		}		// if found got turn on use GST and no gst id found		if(!$get['gst_id'] || !$config['enable_get_last_gst_info']){						$input_gst = get_sku_gst("input_tax", $id);			if($input_gst){				$get['gst_id'] = $input_gst['id'];				$get['gst_code'] = $input_gst['code'];				$get['gst_rate'] = $input_gst['rate'];			}else{				$get['gst_id'] = $input_gst_list[0]['id'];				$get['gst_code'] = $input_gst_list[0]['code'];				$get['gst_rate'] = $input_gst_list[0]['rate'];			}		}	}		if($form['branch_is_under_gst']){		if(!$output_gst_list) $output_gst_list = construct_gst_list('supply');				if(!$get['selling_gst_id'] || !$config['enable_get_last_gst_info']){ // check to get selling GST info			$output_gst = get_sku_gst("output_tax", $id);			if($output_gst){				$get['selling_gst_id'] = $output_gst['id'];				$get['selling_gst_code'] = $output_gst['code'];				$get['selling_gst_rate'] = $output_gst['rate'];			}else{				$get['selling_gst_id'] = $output_gst_list[0]['id'];				$get['selling_gst_code'] = $output_gst_list[0]['code'];				$get['selling_gst_rate'] = $output_gst_list[0]['rate'];			}		}			// if found records from GRN or PO, always pickup latest selling price to calculate GST		if($get['curr_selling_price'] > 0 && !$grn_item_id) $get['selling_price'] = $get['curr_selling_price'];			$prms = array();		$get['inclusive_tax'] = get_sku_gst("inclusive_tax", $id);		$prms['selling_price'] = $get['selling_price'];		$prms['inclusive_tax'] = $get['inclusive_tax'];		$prms['gst_rate'] = $get['selling_gst_rate'];		$gst_sp_info = calculate_gst_sp($prms);		//$r['gst_amt'] = $gst_sp_info['gst_amt'];				if($get['inclusive_tax'] == "yes"){			$get['gst_selling_price'] = $get['selling_price'];			if($gst_sp_info['gst_selling_price']) $get['selling_price'] = $gst_sp_info['gst_selling_price'];		}else{			$get['gst_selling_price'] = $gst_sp_info['gst_selling_price'];		}	}	/*	// due to those grn that without po all must set become EACH	if(!$grn_item_id){		$get['uom_id'] = 1;		$get['uom_fraction'] = 1;	}*/		if($get['return_ctn'])	$get['return_ctn'] = '';	if($get['return_pcs'])	$get['return_pcs'] = '';	return $get;}function grn_approval($grn_id, $branch_id, $status, $auto_approve=false){    global $con, $sessioninfo, $smarty, $config, $LANG, $approval_on_behalf;	 	$form=$_REQUEST;	$upd = array();    $to = array();	$q1 = $con->sql_query("select * from grn where grn.id = ".ms($grn_id)." and grn.branch_id = ".ms($branch_id));	$grn = $con->sql_fetchassoc($q1);	$con->sql_freeresult($q1);    //check whether it is duplicate approve, reject or cancel    check_allow_approval($branch_id, $grn_id);     	$approved=0; 	//$form=load_grn_header($grn_id, $branch_id);	$aid=$form['approval_history_id'];	$approvals=$form['approvals'];		if(!$err){		if($status==1){			$con->sql_query("select report_prefix from branch where id=$branch_id") or die(mysql_error());			$report_prefix = $con->sql_fetchfield(0);			$con->sql_freeresult();			$id_no = $report_prefix.sprintf('%05d', $grn_id);			$comment = "Approved from GRN <a href=\"goods_receiving_note.php?a=view&id=".mi($grn_id)."&branch_id=".mi($branch_id)."\">".$id_no."</a>";			$params = array();			$params['approve'] = 1;			$params['user_id'] = $sessioninfo['id'];			$params['id'] = $aid;			$params['branch_id'] = $branch_id;			$params['update_approval_flow'] = true;			if($auto_approve) $params['auto_approve'] = true;	    	$is_last = check_is_last_approval_by_id($params, $con);	    	if($is_last){				$approved = 1;			}		}else{		  	if($status==2){ // is reject				$to = array();				$inc_comment = array();				if($form['confirm_grn']){					$upd['authorized'] = 0;					$upd['div1_approved_by'] = $upd['div2_approved_by'] = $upd['div3_approved_by'] = $upd['div4_approved_by'] = 0;					$inc_comment[] = "all Divisions";					$to[$grn['div1_approved_by']] = $grn['div1_approved_by'];					$to[$grn['div2_approved_by']] = $grn['div2_approved_by'];					$to[$grn['div3_approved_by']] = $grn['div3_approved_by'];					$to[$grn['div4_approved_by']] = $grn['div4_approved_by'];				}else{					if($form['div1']){						$upd['div1_approved_by'] = 0;						$to[$grn['div1_approved_by']] = $grn['div1_approved_by'];						$inc_comment[] = "PO Variance";					}					if($form['div2']){						$upd['div2_approved_by'] = 0;						$to[$grn['div2_approved_by']] = $grn['div2_approved_by'];						$inc_comment[] = "SKU Apply";					}					if($form['div3']){						$upd['div3_approved_by'] = 0;						$to[$grn['div3_approved_by']] = $grn['div3_approved_by'];						$inc_comment[] = "Price Change";					}					if($form['div1'] || $form['div2'] || $form['div4']){						$upd['div4_approved_by'] = 0;						$to[$grn['div4_approved_by']] = $grn['div4_approved_by'];						$inc_comment[] = "Account Verification";					}				}				$upd['status'] = 0;				$comment = "Rejected for ".join(", ", $inc_comment);			}else{ // is cancel				$comment = "Cancelled";				$upd['active'] = 0;			}	    	$con->sql_query("update branch_approval_history set status = ".mi($status).", approvals = ".ms($approvals)." where id = ".mi($aid)." and branch_id = ".mi($branch_id)) or die(mysql_error());	  	}		$ins = array();		$ins['approval_history_id'] = $aid;		$ins['branch_id'] = $branch_id;		$ins['user_id'] = $sessioninfo['id'];		$ins['status'] = $status;				if ($approval_on_behalf) {			$comment .= " (by ".$approval_on_behalf['on_behalf_by_u']." on behalf of ".$approval_on_behalf['on_behalf_of_u'].")";		}				$ins['log'] = $comment;		$con->sql_query("insert into branch_approval_history_items ".mysql_insert_by_field($ins)) or die(mysql_error());					// all invalid items become GRN checkout list		if($approved){			$upd['approval_history_id'] = mi($form['approval_history_id']);				    			$con->sql_query("update branch_approval_history set ref_id=".mi($grn_id)." where id=".mi($form['approval_history_id'])." and branch_id=".mi($branch_id));						// send pm to user			$recipients=$astat[2];			$recipients=str_replace("|$sessioninfo[id]|", "|", $recipients);			items_return_handler($grn_id, $branch_id);						// if found got turn on skip auto generate grn, need to check do transfer whether got s/n and transfer it to current branch			/*if($config['single_server_mode'] && $config['enable_sn_bn']){				$prms = array();				$prms['grn_id'] = $grn_id;				$prms['branch_id'] = $branch_id;				$prms['process_type'] = "transfer";				grn_sn_handler($prms);			}*/		}	}else{		list_approval_all($err);		exit;	}	$upd['approved'] = mi($approved);	if(!$grn['acc_adjustment']) $upd['acc_adjustment'] = $grn['amount'];	$con->sql_query("update grn set ".mysql_update_by_field($upd)." where id=".mi($grn_id)." and branch_id=".mi($branch_id));	if($approved){		//update sku item cost and sku_vendor tables		update_sku_item_cost($grn_id, $branch_id);		update_sku_vendor_history($grn_id, $branch_id);		//update PO receiving count		if ($form['type']=='PO' && $form['doc_no']){						// update sku monitoring group items			$exp_po_no = explode(",", $form['doc_no']);			foreach($exp_po_no as $r=>$po_no){				$p_no = trim($po_no);				update_po_receiving_count($p_no);				if($config['po_enable_ibt']) update_sku_monitoring_group_items_changed($p_no, $branch_id, $grn_id);			}		}	}		if($status == 2){ // this is special made for reject option		send_pm($to, sprintf("GRN (Approval Flow) Rejected ".$report_prefix."%05d",$grn_id), "/goods_receiving_note.php?a=view&id=$grn_id&branch_id=$branch_id");		// capture the log where this GRN being rejected		log_br($sessioninfo['id'], 'GRN', $grn_id, "Goods Receiving Note (Approval Flow) rejected by $sessioninfo[u] for (ID#$grn_id)");	}		send_pm_to_user($grn_id, $branch_id, $aid, $status, $to);	if($approved)		$status_msg="Fully Approved";	elseif ($status==1)		$status_msg="Approved";	elseif ($status==2)		$status_msg="Rejected";	elseif ($status==5)		$status_msg="Cancelled/Terminated";	else	    die("Unknow Error");	log_br($sessioninfo['id'], 'GRN', $grn_id, "Goods Receiving Note $status_msg by $sessioninfo[u] (ID#$grn_id)");		if ($approval_on_behalf) {		header("Location: /stucked_document_approvals.php?m=grn");		exit;	}		header("Location: /goods_receiving_note_approval.php?t=$form[a]&id=$grn_id".$on_behalf_redir);	exit;}function send_pm_to_user($grn_id, $branch_id, $aid, $status, $pm_to=array()){	global $con, $sessioninfo, $smarty;	// get the PM list	$approval_status = array();	$approval_status[1] = "Approved";	$approval_status[2] = "Rejected";	$approval_status[5] = "Cancelled/Terminated";		/*$con->sql_query("select notify_users from branch_approval_history where id=$aid and branch_id = $branch_id");	$r = $con->sql_fetchrow();	$recipients = $r[0];	$recipients = str_replace("|$sessioninfo[id]|", "|", $recipients);	$to = preg_split("/\|/", $recipients);*/	// send pm	$to = get_pm_recipient_list2($grn_id,$aid,$status,'approval',$branch_id,'grn');    if($status == 2 && !empty($pm_to)){        foreach($pm_to as $k=>$v){            unset($to[$k]);        }    }	send_pm2($to, "GRN Approval (ID#$grn_id) $approval_status[$status]", "goods_receiving_note.php?a=view&id=$grn_id&branch_id=$branch_id", array('module_name'=>'grn'));}function load_grr_item_header($grr_id, $branch_id, $grr_item_id=0, $is_future=0){	global $con, $config, $sessioninfo;	$grr_amt_by_type = array();	if(!$is_future && $grr_item_id) $filter = " and grr_items.id = ".mi($grr_item_id);	$q1=$con->sql_query("select grr_items.*, grr.*, vendor.*, grr.id as grr_id, grr_items.id as grr_item_id, 						 vendor.description as vendor, vendor.allow_grn_without_po, dept.grn_get_weight, 						 dept.description as department, dept.grn_auto_load_po_items, user.u, rcv.u as rcv_u, vendor.code as vendor_code,						 if(bv.account_id = '' or bv.account_id is null, vendor.account_id, bv.account_id) as account_id, b.code as branch_code,b.report_prefix,						 grr.tax_percent, grr.tax_register, grr.grr_tax						 from grr_items						 left join grr on grr_items.grr_id = grr.id and grr_items.branch_id = grr.branch_id						 left join user on grr.user_id = user.id						 left join user rcv on grr.rcv_by = rcv.id						 left join vendor on grr.vendor_id = vendor.id						 left join branch_vendor bv on bv.vendor_id = vendor.id and bv.branch_id = grr_items.branch_id						 left join category dept on grr.department_id = dept.id						 left join branch b on b.id = grr.branch_id						 where grr.branch_id=$branch_id and grr.id = ".mi($grr_id).$filter."						 order by grr_items.type, grr_items.id");	//$grr = $con->sql_fetchrow($q1);	$is_from_do = false;	$doc_no_list = $doc_type_list = array();	while($r1=$con->sql_fetchassoc($q1)){		$grr_amt_by_type[$r1['type']] += $r1['amount'];		if(!$doc_no_list[$r1['type']][$r1['doc_no']]){			if($r1['type'] == "INVOICE" && $r1['doc_date']) $doc_no = $r1['doc_no']." (".$r1['doc_date'].")";			else $doc_no = $r1['doc_no'];			$doc_no_list[$r1['type']][$r1['doc_no']] = $doc_no;		}		if(!in_array($r1['type'], $doc_type_list)){			$doc_type_list[] = $r1['type'];		}		if (($r1['type']=='DO' || $r1['type']=='PO') && $r1['doc_no']!=''){		//if ($r1['type']=='PO' && $r1['doc_no']!=''){			if($r1['type'] == "DO" && ($config['do_skip_generate_grn'] || $sessioninfo['branch_type'] == "franchise")){				if($sessioninfo['branch_type'] == "franchise") $filter = "debtor_id = ".mi($sessioninfo['debtor_id'])." and do_type = 'credit_sales'";				else $filter = "do_branch_id = ".mi($branch_id)." and do_type = 'transfer'";				$q3 = $con->sql_query("select *, id as do_id from do where do_no = ".ms($r1['doc_no'])." and ".$filter);				if($con->sql_numrows($q3) > 0){  // means it is IBT DO					while($grr_do = $con->sql_fetchassoc($q3)){						if($grr_do['do_no']) $grp_do_no[] = ms($grr_do['do_no']);						$is_from_do = true;					}				}				$con->sql_freeresult($q3);			}						if(!$is_from_do && $r1['type']=='PO'){				// get additional PO information if po is not empty				$q2=$con->sql_query('select po.*, po.remark as po_remark1, po.remark2 as po_remark2, 									 branch_approval_history.flow_approvals,user.u as po_u 									 from po 									 left join user on po.user_id = user.id 									 left join branch_approval_history on po.approval_history_id = branch_approval_history.id and branch_approval_history.branch_id = po.branch_id									 where po_no = '.ms($r1['doc_no']));				$grr_po = $con->sql_fetchassoc($q2);				$con->sql_freeresult($q2);				unset($grr_po['added']);				if($grr_po['po_no']) $grp_po_no[] = ms($grr_po['po_no']);								if(!$grr_po['partial_delivery']) $non_pd_po[] = $grr_po['po_no']; 				$grr_po['sdiscount']=unserialize($grr_po['sdiscount']);				$grr_po['rdiscount']=unserialize($grr_po['rdiscount']);				$grr_po['po_remark1']=unserialize($grr_po['po_remark1']);				$grr_po['po_remark2']=unserialize($grr_po['po_remark2']);				$grr_po['cancel_date']=dmy_to_sqldate($grr_po['cancel_date']);				$grr_po['po_is_under_gst']=$grr_po['is_under_gst'];				$ttl_po_amt += $grr_po['po_amount'];			}					}else{			$grr = $r1;		}				if(!$grr) $grr = $r1;	}	$con->sql_freeresult($q1);			if($grr_po) $grr = array_merge($grr, $grr_po);	if($ttl_po_amt) $grr['po_amount'] = $ttl_po_amt;	if($non_pd_po) $grr['pd_po'] = join(", ", $non_pd_po);	$grr['doc_no'] = '';	$grr['type'] = '';	if($is_from_do){		$grr['type'] = "DO";		$grr['doc_no'] = join(", ", $doc_no_list['DO']);		$grr['is_ibt_do'] = true;	}elseif(in_array("PO", $doc_type_list)){		$grr['type'] = "PO";		$grr['doc_no'] = join(", ", $doc_no_list['PO']);	}elseif(!$grr['doc_no'] && in_array("INVOICE", $doc_type_list)){		$grr['type'] = "INVOICE";		$grr['doc_no'] = join(", ", $doc_no_list['INVOICE']);	}elseif(!$grr['doc_no'] && in_array("DO", $doc_type_list)){		$grr['type'] = "DO";		$grr['doc_no'] = join(", ", $doc_no_list['DO']);	}else{		$grr['type'] = "OTHER";		$grr['doc_no'] = join(", ", $doc_no_list['OTHER']);	}		if($is_from_do || $grr['type'] == "PO"){		if($doc_no_list['INVOICE']) $grr['invoice_no'] = join(", ", $doc_no_list['INVOICE']);	}		if($doc_no_list['INVOICE'] && $config['grn_summary_show_related_invoice'] && $grr['type'] == "PO"){		//$q1 = $con->sql_query("select group_concat(gi.doc_no order by 1 separator ', ') as related_invoice from grr_items gi where gi.type='INVOICE' and gi.grr_id=".mi($grr['grr_id'])." and gi.branch_id=".mi($branch_id));			//$tmp = $con->sql_fetchassoc($q1);		//$con->sql_freeresult($q1);		$grr['related_invoice'] = join(", ", $doc_no_list['INVOICE']);	}	if(count($grr_amt_by_type) > 0){		$grr['grr_amount'] = 0;		if($grr['type'] == "INVOICE" || $grr['type'] == "PO"){			$grr['grr_amount'] += $grr_amt_by_type['INVOICE'];		}elseif($grr['type'] == "DO") $grr['grr_amount'] += $grr_amt_by_type['DO'];		if($grr['type'] != "PO") $grr['grr_amount'] += $grr_amt_by_type['OTHER'];		unset($grr_amt_by_type);	}		if(is_array($grp_do_no)) $grr['grp_do_no'] = join(",", $grp_do_no);	elseif(is_array($grp_po_no)) $grr['grp_po_no'] = join(",", $grp_po_no);	$grr['query'] = "select grr_items.*, grr.*, vendor.*, grr.id as grr_id, grr_items.id as grr_item_id, 						 vendor.description as vendor, vendor.allow_grn_without_po, dept.grn_get_weight, 						 dept.description as department, dept.grn_auto_load_po_items, user.u, rcv.u as rcv_u, vendor.code as vendor_code,						 if(bv.account_id = '' or bv.account_id is null, vendor.account_id, bv.account_id) as account_id						 from grr_items						 left join grr on grr_items.grr_id = grr.id and grr_items.branch_id = grr.branch_id						 left join user on grr.user_id = user.id						 left join user rcv on grr.rcv_by = rcv.id						 left join vendor on grr.vendor_id = vendor.id						 left join branch_vendor bv on bv.vendor_id = vendor.id and bv.branch_id = grr_items.branch_id						 left join category dept on grr.department_id = dept.id						 where grr.branch_id=$branch_id and grr.id = ".mi($grr_id).$filter."						 order by grr_items.type, grr_items.id";	return $grr;}function copy_po_items($grp_po_no, $grn_id, $branch_id, $use_tmp=true){	global $con, $config, $sessioninfo, $smarty, $appCore;	if($use_tmp) $gi_table="tmp_grn_items";	else $gi_table="grn_items";	$q1 = $con->sql_query("select pi.id as po_item_id, pi.selling_price, pi.qty_loose as po_pcs, pi.delivered,							pi.qty as po_ctn, pi.discount, pi.tax, pi.disc_remark, po.po_no, pi.branch_id as po_branch_id,							(pi.qty + pi.foc) as ctn, (pi.qty_loose + pi.foc_loose) as pcs, 							pi.sku_item_id, pi.artno_mcode, pi.order_price as po_cost, u1.id as uom_id,							u2.id as selling_uom_id, u2.fraction as selling_uom_fraction, sku.id as sku_id,							pi.order_uom_fraction as order_uom_fraction, pi.is_foc, po.id as po_id, 							po.branch_id, u3.fraction as packing_uom_fraction, u1.fraction as order_uom_fraction, 							po.deliver_to, po.po_option, pi.qty_allocation, pi.qty_loose_allocation, pi.foc_allocation,							pi.foc_loose_allocation, pi.cost_gst_id as gst_id, pi.cost_gst_code as gst_code, pi.cost_gst_rate as gst_rate,							pi.selling_gst_id, pi.selling_gst_rate, pi.selling_gst_code, pi.gst_selling_price, po.is_under_gst as po_is_under_gst							from po							left join po_items pi on (po.id = pi.po_id and po.branch_id = pi.branch_id)							left join sku_items on sku_item_id = sku_items.id							left join sku on sku.id = sku_items.sku_id							left join uom u1 on pi.order_uom_id = u1.id							left join uom u2 on pi.selling_uom_id = u2.id							left join uom u3 on sku_items.packing_uom_id = u3.id							where po.po_no in ($grp_po_no)							order by sku_items.sku_item_code");	$insert_field = array("id", "branch_id", "grn_id", "sku_item_id", "artno_mcode", "uom_id", "cost", "selling_uom_id", "selling_price", "po_qty", "po_cost","po_item_id", "weight", "available_po_qty");	if($use_tmp) $insert_field[] = "user_id";	$grr = $smarty->get_template_vars('grr');		if($config['enable_gst']){		// check to see if this GRN is under GST		$prms = array();		$prms['vendor_id'] = $grr['vendor_id'];		$prms['date'] = $grr['rcv_date'];		$is_under_gst = check_gst_status($prms);			if($is_under_gst){			$insert_field[] = "gst_id";			$insert_field[] = "gst_code";			$insert_field[] = "gst_rate";					}				if($config['enable_gst']){			$prms = array();			$prms['branch_id'] = $branch_id;			$prms['date'] = date("Y-m-d");			$branch_is_under_gst = check_gst_status($prms);						if($branch_is_under_gst){				$insert_field[] = "selling_gst_id";				$insert_field[] = "selling_gst_code";				$insert_field[] = "selling_gst_rate";				$insert_field[] = "gst_selling_price";			}		}	}	while($r = $con->sql_fetchassoc($q1)){		if($r['po_option'] == 3 && is_array(unserialize($r['deliver_to']))){			$r['selling_price'] = $r['ctn'] = $r['pcs'] = $r['po_ctn'] = $r['po_pcs'] = 0;			$deliver_to = unserialize($r['deliver_to']);			$ctn_list = unserialize($r['qty_allocation']);			$pcs_list = unserialize($r['qty_loose_allocation']);			$foc_ctn_list = unserialize($r['foc_allocation']);			$foc_pcs_list = unserialize($r['foc_loose_allocation']);				foreach($deliver_to as $dummy=>$bid){				$r['po_ctn'] += $ctn_list[$bid];				$r['po_pcs'] += $pcs_list[$bid];				$r['ctn'] += $ctn_list[$bid] + $foc_ctn_list[$bid];				$r['pcs'] += $pcs_list[$bid] + $foc_pcs_list[$bid];			}						// get HQ selling price			$prms['selling'] = true;			$tmp_data = get_sku_item_cost_selling(1, $r['sku_item_id'], $grr['rcv_date'], $prms);			$r['selling_price'] = $tmp_data['selling'];		}				if($is_under_gst){			if(!$r['gst_id']){ // check to get cost GST info				$input_gst = get_sku_gst("input_tax", $r['sku_item_id']);				if($input_gst){					$r['gst_id'] = $input_gst['id'];					$r['gst_code'] = $input_gst['code'];					$r['gst_rate'] = $input_gst['rate'];				}			}		}				if($branch_is_under_gst){			if(!$r['selling_gst_id']){ // check to get selling GST info				$output_gst = get_sku_gst("output_tax", $r['sku_item_id']);				if($output_gst){					$r['selling_gst_id'] = $output_gst['id'];					$r['selling_gst_code'] = $output_gst['code'];					$r['selling_gst_rate'] = $output_gst['rate'];				}			}						$r['inclusive_tax'] = get_sku_gst("inclusive_tax", $r['sku_item_id']);						// if found PO gst selling price not set			if(!$r['gst_selling_price']){				$prms = array();				$prms['selling_price'] = $r['selling_price'];				$prms['inclusive_tax'] = $r['inclusive_tax'];				$prms['gst_rate'] = $r['selling_gst_rate'];				$gst_sp_info = calculate_gst_sp($prms);				$r['gst_selling_price'] = $gst_sp_info['gst_selling_price'];				//$r['gst_amt'] = $gst_sp_info['gst_amt'];								if($r['inclusive_tax'] == "yes"){					$r['gst_selling_price'] = $r['selling_price'];					$r['selling_price'] = $gst_sp_info['gst_selling_price'];				}			}		}		$r['branch_id']=$branch_id;		$r['grn_id']=$grn_id;		if ($config['grn_group_same_item']){			if(!$item_used[$r['sku_item_id']]) 				$item_used[$r['sku_item_id']]=1;			else{				$q2=$con->sql_query("select id, po_qty, selling_price from $gi_table where sku_item_id = ".mi($r['sku_item_id'])." and grn_id = ".mi($r['grn_id'])." and branch_id = ".mi($r['branch_id']));				$r1 = $con->sql_fetchassoc($q2);				$con->sql_freeresult($q2);				if($r1){					$tmp_id=$r1['id'];					$po_qty=($r['ctn'] * $r['order_uom_fraction'] + $r['pcs'])+$r1['po_qty'];										if(!$r1['selling_price'])		    			$con->sql_query("update $gi_table set po_qty='$po_qty', selling_price='$r[selling_price]' where id=$tmp_id");					else		    			$con->sql_query("update $gi_table set po_qty='$po_qty' where id=$tmp_id");					continue;				}			}		}			    $r['user_id']=$sessioninfo['id'];					if ($r['order_uom_fraction']==0) 			$r['order_uom_fraction'] = 1;		if ($r['uom_id']==0) 			$r['uom_id']=1;		if ($r['selling_uom_id']==0) 			$r['selling_uom_id']=1;		$r['po_qty']=($r['ctn']*$r['order_uom_fraction']+$r['pcs']);		if ($r['po_qty']<=$r['delivered']) continue;			// lookup for available po qty		$po_qty = $r['po_qty'] * $r['packing_uom_fraction'];		$prms = array();		$prms['po_item_id'] = $r['po_item_id'];		$prms['branch_id'] = $branch_id;		$prms['po_no'] = $r['po_no'];		$prms['po_qty'] = $po_qty;		$available_po_qty = load_available_po_qty($prms);				if($available_po_qty <= 0) continue;		$r['available_po_qty'] = $available_po_qty;		$amt=$r['po_cost']*($r['po_ctn']+$r['po_pcs']/$r['order_uom_fraction']);		$amt*=(100+$r['tax'])/100;		$amt=parse_formula($amt,$r['discount']);			$r['cost']=$amt/($r['ctn'] + $r['pcs']/$r['order_uom_fraction']);		if(!isset($unit_cost[$r['sku_id']."_".$r['po_item_id']])){			$branch_filter = " and case when po.po_branch_id > 0 and po.po_branch_id is not null then po.po_branch_id = ".mi($r['branch_id'])." else po.branch_id = ".mi($r['branch_id'])." end";					$q3 = $con->sql_query("select pi.*, ((pi.qty + (pi.qty_loose / ifnull(u1.fraction,1))) * if(pi.is_foc, 0, pi.order_price)) as ttl_cost, 								 ((((pi.qty + pi.foc) * ifnull(u1.fraction,1)) + pi.qty_loose + pi.foc_loose) * ifnull(u2.fraction,1)) as ttl_qty, 								 po.po_option, po.deliver_to, if(pi.is_foc, 0, pi.order_price) as cost, ifnull(u1.fraction,1) as fraction								 from po_items pi								 left join po on po.branch_id=pi.branch_id and po.id=pi.po_id								 left join sku_items si on si.id = pi.sku_item_id								 left join uom u1 on u1.id = pi.order_uom_id								 left join uom u2 on u2.id = si.packing_uom_id								 where pi.po_id = ".mi($r['po_id'])." $branch_filter and si.sku_id = ".mi($r['sku_id'])." and po.po_no = ".ms($r['po_no']));			//$tmp_info = $con->sql_fetchassoc($q3);						$ttl_qty = $ttl_cost = 0;			while($tmp_info = $con->sql_fetchassoc($q3)){				//print_r($tmp_info);								if($tmp_info['po_option'] == 3 && is_array(unserialize($tmp_info['deliver_to']))){					$tmp_info['ttl_qty'] = $tmp_info['ttl_qty_wo_foc'] = $tmp_info['ttl_cost'] = 0;					$deliver_to = unserialize($tmp_info['deliver_to']);					$ctn_list = unserialize($tmp_info['qty_allocation']);					$pcs_list = unserialize($tmp_info['qty_loose_allocation']);					$foc_ctn_list = unserialize($tmp_info['foc_allocation']);					$foc_pcs_list = unserialize($tmp_info['foc_loose_allocation']);						foreach($deliver_to as $dummy=>$bid){						$ctn = $ctn_list[$bid] + $foc_ctn_list[$bid];						$pcs = $pcs_list[$bid] + $foc_pcs_list[$bid];												$tmp_info['ttl_qty'] += (($ctn * $tmp_info['fraction']) + $pcs) * $r['packing_uom_fraction'];						$tmp_info['ttl_qty_wo_foc'] += (($ctn_list[$bid] * $tmp_info['fraction']) + $pcs_list[$bid]) * $r['packing_uom_fraction'];					}					$tmp_info['ttl_cost'] += ($tmp_info['ttl_qty_wo_foc'] / $tmp_info['fraction']) * $tmp_info['cost'] / $r['packing_uom_fraction'];				}				$tmp_info['ttl_cost']*=(100+$tmp_info['tax'])/100;				$tmp_info['ttl_cost']=parse_formula($tmp_info['ttl_cost'], $tmp_info['discount']);				$ttl_qty += $tmp_info['ttl_qty'];				$ttl_cost += $tmp_info['ttl_cost'];			}			$con->sql_freeresult($q3);			$unit_cost[$r['sku_id']."_".$r['po_item_id']] = $ttl_cost / $ttl_qty;		}		$new_cost = round($unit_cost[$r['sku_id']."_".$r['po_item_id']] * $r['packing_uom_fraction'] * $r['order_uom_fraction'], $config['global_cost_decimal_points']);			$r['cost'] = $r['po_cost'] = $new_cost;				// call appCore to generate new ID		unset($new_id);		$new_id = $appCore->generateNewID($gi_table, "branch_id = ".mi($r['branch_id']));				if(!$new_id) die("Unable to generate new ID from appCore!");		$r['id'] = $new_id;				$con->sql_query("insert into $gi_table ".mysql_insert_by_field($r, $insert_field));	}	$con->sql_freeresult($q1);}function copy_do_items($grp_po_no, $grn_id, $branch_id, $use_tmp=true){	global $con, $config, $sessioninfo, $smarty, $appCore;	if($use_tmp) $gi_table="tmp_grn_items";	else $gi_table="grn_items";		$insert_field = $item_used = array();	$res1 = $con->sql_query("select di.id as po_item_id, di.cost_price, di.selling_price, di.ctn, di.pcs, di.sku_item_id,							 di.artno_mcode, di.cost_price as po_cost, u.id as uom_id, 1 as selling_uom_id, 							 u.fraction as uom_fraction, do.do_markup, do.markup_type, di.gst_id, di.gst_code, di.gst_rate, do.is_under_gst as do_is_under_gst							 from do							 left join do_items di on do.id = di.do_id and do.branch_id = di.branch_id							 left join sku_items on sku_item_id = sku_items.id							 left join uom u on di.uom_id = u.id							 where do_no in ($grp_po_no) and do.checkout=1 and do.approved=1 and do.active=1 							 having di.ctn > 0 or di.pcs > 0							 order by di.id");	$insert_field = array("branch_id", "grn_id", "sku_item_id", "artno_mcode", "uom_id", "cost", "selling_uom_id", "selling_price", "po_qty", "po_cost","po_item_id", "weight");	if($use_tmp) $insert_field[] = "user_id";	$grr = $smarty->get_template_vars('grr');		if($config['enable_gst']){		// check to see if this GRN is under GST		$prms = array();		$prms['vendor_id'] = $grr['vendor_id'];		$prms['date'] = $grr['rcv_date'];		$is_under_gst = check_gst_status($prms);			if($is_under_gst){			$insert_field[] = "gst_id";			$insert_field[] = "gst_code";			$insert_field[] = "gst_rate";		}				if($config['enable_gst']){			$prms = array();			$prms['branch_id'] = $branch_id;			$prms['date'] = date("Y-m-d");			$branch_is_under_gst = check_gst_status($prms);						if($branch_is_under_gst){				$insert_field[] = "selling_gst_id";				$insert_field[] = "selling_gst_code";				$insert_field[] = "selling_gst_rate";				$insert_field[] = "gst_selling_price";			}		}	}	while($r = $con->sql_fetchassoc($res1)){		// call appCore to generate new ID		unset($new_id);		$new_id = $appCore->generateNewID($gi_table, "branch_id = ".mi($r['branch_id']));				if(!$new_id) die("Unable to generate new ID from appCore!");				$r['id']=$new_id;		$r['branch_id']=$branch_id;		$r['grn_id']=$grn_id;		if ($config['grn_group_same_item']){			if(!$item_used[$r['sku_item_id']]) 				$item_used[$r['sku_item_id']]=1;			else{				$q1=$con->sql_query("select id, po_qty, selling_price from $gi_table where sku_item_id = ".mi($r['sku_item_id'])." and grn_id = ".mi($r['grn_id'])." and branch_id = ".mi($r['branch_id']));				$r1 = $con->sql_fetchrow($q1);				if($r1){					$tmp_id=$r1['id'];					$po_qty=($r['ctn'] * $r['uom_fraction'] + $r['pcs'])+$r1['po_qty'];										if(!$r1['selling_price'])		    			$con->sql_query("update $gi_table set po_qty='$po_qty', selling_price='$r[selling_price]' where id=$tmp_id");					else		    			$con->sql_query("update $gi_table set po_qty='$po_qty' where id=$tmp_id");					continue;										}						}		}					    $r['user_id']=$sessioninfo['id'];		if ($r['uom_fraction']==0)			$r['uom_fraction'] = 1;		if ($r['uom_id']==0) 			$r['uom_id']=1;		if ($r['selling_uom_id']==0) 			$r['selling_uom_id']=1;		$r['po_qty']=($r['ctn']*$r['uom_fraction']+$r['pcs']);		if($r['do_markup']){			$temp = array();			$temp['do_markup_arr'] = explode("+", $r['do_markup']);			if($r['markup_type']=='down'){				$temp['do_markup_arr'][0] *= -1;				$temp['do_markup_arr'][1] *= -1;			}			if($temp['do_markup_arr'][0]){				$r['cost_price'] = $r['cost_price'] * (1+($temp['do_markup_arr'][0]/100));			}			if($temp['do_markup_arr'][1]){				$r['cost_price'] = $r['cost_price'] * (1+($temp['do_markup_arr'][1]/100));			}		}				$amt=$r['cost_price']*($r['ctn']+$r['pcs']/$r['uom_fraction']);		//$amt*=(100+$r['tax'])/100;		//$amt=parse_formula($amt,$r['discount']);			$r['cost']=$amt/($r['ctn'] + $r['pcs']/$r['uom_fraction']);				if($is_under_gst){			if(!$r['gst_id']){ // check to get cost GST info				$input_gst = get_sku_gst("input_tax", $r['sku_item_id']);				if($input_gst){					$r['gst_id'] = $input_gst['id'];					$r['gst_code'] = $input_gst['code'];					$r['gst_rate'] = $input_gst['rate'];				}			}		}				if($branch_is_under_gst){			if(!$r['selling_gst_id']){ // check to get selling GST info				$output_gst = get_sku_gst("output_tax", $r['sku_item_id']);				if($output_gst){					$r['selling_gst_id'] = $output_gst['id'];					$r['selling_gst_code'] = $output_gst['code'];					$r['selling_gst_rate'] = $output_gst['rate'];				}			}						$r['inclusive_tax'] = get_sku_gst("inclusive_tax", $r['sku_item_id']);						$prms = array();			$prms['selling_price'] = $r['selling_price'];			$prms['inclusive_tax'] = $r['inclusive_tax'];			$prms['gst_rate'] = $r['selling_gst_rate'];			$gst_sp_info = calculate_gst_sp($prms);			$r['gst_selling_price'] = $gst_sp_info['gst_selling_price'];			//$r['gst_amt'] = $gst_sp_info['gst_amt'];						if($r['inclusive_tax'] == "yes"){				$r['gst_selling_price'] = $r['selling_price'];				$r['selling_price'] = $gst_sp_info['gst_selling_price'];			}		}				$con->sql_query("insert into $gi_table ".mysql_insert_by_field($r, $insert_field));	}	$con->sql_freeresult($res1);}if (!function_exists('load_po_items')){	function load_po_items($doc_no){		global $con, $smarty;				if(strpos($doc_no, ",") == true){			$splt_doc_no = explode(", ", $doc_no);			$doc_no = join("','",$splt_doc_no);		}				$q1=$con->sql_query("select pi.*, 0 as compared, u1.code as order_uom, 							 u2.code as sell_uom, u1.fraction as uomf, u2.fraction as selling_uomf, 							 po.po_no, po.po_date, po.po_option, po.deliver_to, po.is_under_gst							 from po 							 left join po_items pi on (po.id = pi.po_id and po.branch_id = pi.branch_id)							 left join uom u1 on pi.order_uom_id = u1.id							 left join uom u2 on pi.selling_uom_id = u2.id							 where po_no in ($doc_no)							 order by pi.id") or die(mysql_error());	    $foc_annotations = array();	    $foc_id = 0;		while($r1=$con->sql_fetchassoc($q1)){			if ($r1['is_foc']){				$foc_id++;				$r1['foc_id'] = $foc_id;				$foc_item[$r1['sku_item_id']]=$r1['foc_id'];			}						if($r1['po_option'] == 3 && is_array(unserialize($r1['deliver_to']))){				$r1['qty'] = $r1['qty_loose'] = $r1['foc'] = $r1['foc_loose'] = 0;				$deliver_to = unserialize($r1['deliver_to']);				$ctn_list = unserialize($r1['qty_allocation']);				$pcs_list = unserialize($r1['qty_loose_allocation']);				$foc_ctn_list = unserialize($r1['foc_allocation']);				$foc_pcs_list = unserialize($r1['foc_loose_allocation']);					foreach($deliver_to as $dummy=>$bid){					$r1['qty'] += $ctn_list[$bid];					$r1['qty_loose'] += $pcs_list[$bid];					$r1['foc'] += $foc_ctn_list[$bid];					$r1['foc_loose'] += $foc_pcs_list[$bid];				}			}					    $r1['foc_share_cost'] = unserialize($r1['foc_share_cost']);		    if ($r1['foc_share_cost']){				foreach($r1['foc_share_cost'] as $i => $dummy){				    if ($foc_annotations[$i] != '') $foc_annotations[$i] .= "/";					$foc_annotations[$i] .= "$foc_id";				}					}					$po_items[]=$r1;						// check if this po is under gst			if(!$po_under_gst && $r1['is_under_gst']) $po_under_gst = 1;		}		$smarty->assign("foc_annotations", $foc_annotations);		$smarty->assign("po_under_gst", $po_under_gst);		return $po_items;	}}if (!function_exists('load_do_items')){	function load_do_items($doc_no){		global $con, $smarty;		if(strpos($doc_no, ",") == true){			$splt_doc_no = explode(", ", $doc_no);			$doc_no = join("','",$splt_doc_no);		}		$do_items = array();		$q1=$con->sql_query("select di.id, 0 as compared, di.sku_item_id, di.ctn as qty, di.pcs as qty_loose, 							 u.id as order_uom_id, u.code as order_uom, u.code as sell_uom, u.fraction as uomf							 from do 							 left join do_items di on (do.id = di.do_id and do.branch_id = di.branch_id)							 left join uom u on di.uom_id = u.id							 where do.do_no in ($doc_no) order by di.id");	    //$foc_annotations = array();	    //$foc_id = 0;		while($r1=$con->sql_fetchrow($q1)){			$do_items[]=$r1;		}		//$smarty->assign("foc_annotations", $foc_annotations);		return $do_items;	}}//print all grn type documents.function grn_print($grn_id, $branch_id, $tpl, $only_variance=false){	global $con, $smarty, $config, $sessioninfo, $appCore;	$form=$_REQUEST;	$con->sql_query("select * from branch where id=$branch_id");	$smarty->assign("branch", $con->sql_fetchrow());	$grn=load_grn_header($grn_id, $branch_id);	if($form['print_grn_summary']){ // GRN Summary		//get PO Qty		if(!$grn['is_future']) $filter = "and id=".($grn['grr_item_id']);		$tmp = $con->sql_query("select doc_no, type from grr_items where type in ('PO', 'INVOICE', 'DO') and grr_id=$grn[grr_id] $filter and branch_id=$grn[branch_id]");		$inv_list = $do_list = array();		while($r=$con->sql_fetchassoc($tmp)){			if($r['type'] == "PO"){				$r1 = $con->sql_query("select sum(qty_loose+foc_loose) as pcs, sum(qty+foc) as ctn from po_items 									   left join po on po_items.branch_id=po.branch_id and po_items.po_id=po.id 									   where po_no=".ms($r['doc_no']));				$tpo = $con->sql_fetchassoc($r1);				$con->sql_freeresult($r1);								$ttl_po['ctn'] += $tpo['ctn'];				$ttl_po['pcs'] += $tpo['pcs'];				$total_po++;			}elseif($r['type'] == "INVOICE"){				$inv_list[] = $r['doc_no'];			}else{				$do_list[] = $r['doc_no'];			}		}		$con->sql_freeresult($tmp);		$smarty->assign("total_po", $total_po);		$smarty->assign("po_qty", "Ctn: $ttl_po[ctn] / Pcs: $ttl_po[pcs]");				if($inv_list) $grn['account_doc_no'] = join(",", $inv_list);		elseif($do_list) $grn['account_doc_no'] = join(",", $do_list);		// get GRN Qty		$q1 = $con->sql_query("select sum(if(acc_ctn>0,acc_ctn,ctn)) as ctn, sum(if(acc_pcs>0,acc_pcs,pcs)) as pcs from grn_items where grn_id=$grn_id and branch_id=$grn[branch_id]");		$grnqty = $con->sql_fetchassoc($q1);		$con->sql_freeresult($q1);		$smarty->assign("grn_qty", "Ctn: $grnqty[ctn] / Pcs: $grnqty[pcs]");		// update print counter		$con->sql_query("update grn set print_counter=print_counter+1, last_update=last_update where id=$grn_id and branch_id=$branch_id");		$grr = load_grr_item_header($grn['grr_id'], $grn['branch_id'], $grn['grr_item_id'], $grn['is_future']);		$smarty->assign("grr", $grr);		$smarty->assign("print_returned_items", $form['print_returned_items']);                // get gst amount if under gst        if($grn['is_under_gst'])            $grn['gst_amount'] = $grn['final_amount'] - $grn['amount'];	}		$smarty->assign("grn", $grn);    if($form['print_grn_var_report'] || $form['print_grn_summary']){ // GRN Summary or Variance Report		$items=load_grn_items($grn_id, $branch_id, $grn['po_items']);		for($j=0; $j<count($tpl); $j++){			if(preg_match("/^\b".str_replace("/","\/",$tpl[$j])."\b/", "goods_receiving_note_approval.report.print.tpl")) $only_variance = true;			else $only_variance = false;			if ($only_variance){				$items2 = $items;				$grn_items = array();				if ($grn['have_variance'] || $grn['account_amount'] != $grn['final_amount'])				{					foreach ($items2 as $i)					{						$po_qty = $i['po_ctn']*$i['po_uomf']+$i['po_pcs'];						$grn_qty = $i['ctn']*$i['uom_fraction']+$i['pcs'];						$var1 = $grn_qty - $po_qty;												if ($i['acc_ctn']!=''|| $i['acc_pcs']!='')							$var2 = $i['acc_ctn']*$i['uom_fraction']+$i['acc_pcs'];						else							$var2=0;													if ($var1!=0 or $var2!=0) {							$grn_items[] = $i;						}					}				}							// if the result is empty, insert one item so that we can print				if (count($grn_items)<= 0) $grn_items[] = array_pop($items2);			}else $grn_items = $items;			// It is A4 paper and landscape			if(preg_match("/^\b".str_replace("/","\/",$tpl[$j])."\b/", "goods_receiving_note_approval.correction.print.tpl")){				$item_per_page= $config['grn_print_item_per_page']?$config['grn_print_item_per_page']:18;				$item_per_lastpage = $config['grn_print_item_last_page']>0 ? $config['grn_print_item_last_page'] : $item_per_page-3;			}else{				if ($config['grn_var_report_print_item_per_page'] && $config['grn_var_report_print_item_last_page']) {					$item_per_page= $config['grn_var_report_print_item_per_page'];					$item_per_lastpage = $config['grn_var_report_print_item_last_page'];				}				else {					$item_per_page= $config['grn_report_print_item_per_page']?$config['grn_report_print_item_per_page']:23;					$item_per_lastpage = $config['grn_report_print_item_last_page']>0 ? $config['grn_report_print_item_last_page'] : $item_per_page-5;				}			}			$totalpage = 1 + ceil((count($grn_items)-$item_per_lastpage)/$item_per_page);					$item_index = -1;			$item_no = -1;			$page = 1;						$page_item_list = array();			$page_item_info = array();						foreach($grn_items as $r){	// loop for each item				if($item_index+1>=$item_per_page){					$page++;					$item_index = -1;				}								$item_no++;				$item_index++;				$r['item_no'] = $item_no;								$page_item_list[$page][$item_index] = $r;	// add item to this page								if($config['sku_enable_additional_description'] && $r['additional_description']){					$r['additional_description'] = unserialize($r['additional_description']);					foreach($r['additional_description'] as $desc){						if($item_index+1>=$item_per_page){							$page++;							$item_index = -1;						}										$item_index++;						$desc_row = array();						$desc_row['description'] = $desc;						$desc_row['po_ctn'] = $r["po_ctn"];						$desc_row['po_uomf'] = $r["po_uomf"];						$desc_row['uom_fraction'] = $r["uom_fraction"];						$desc_row['ctn'] = $r["ctn"];						$desc_row['pcs'] = $r["pcs"];						$desc_row['acc_ctn'] = $r["acc_ctn"];						$desc_row['acc_pcs'] = $r["acc_pcs"];						$page_item_list[$page][$item_index] = $desc_row;						$page_item_info[$page][$item_index]['not_item'] = 1;					}				}			}					if(count($page_item_list[$page]) > $item_per_lastpage){				$page++;				$page_item_list[$page] = array();			}						$totalpage = count($page_item_list);			foreach($page_item_list as $page => $item_list){				$this_page_num = ($page < $totalpage) ? $item_per_page : $item_per_lastpage;				$smarty->assign("PAGE_SIZE", $this_page_num);				$smarty->assign("is_last_page", ($page >= $totalpage));				$smarty->assign("page", "Page $page of $totalpage");				$smarty->assign("start_counter",$item_list[0]['item_no']);				$smarty->assign("grn_items", $item_list);				$smarty->assign("page_item_info", $page_item_info[$page]);				$smarty->display($tpl[$j]);				$smarty->assign("skip_header",1);			}		}    }	if($form['print_grn_future_report']){ // print GRN report		$_REQUEST['is_grn_future_report'] = true;		$items=load_grn_items($grn_id, $branch_id, $grn['po_items']);		unset($_REQUEST['is_grn_future_report']);		$item_per_page= $config['grn_print_item_per_page']?$config['grn_print_item_per_page']:100;		$totalpage = ceil(count($items)/$item_per_page);				$item_index = -1;		$item_no = -1;		$page = 1;				$page_item_list = array();		$page_item_info = array();				foreach($items as $r){	// loop for each item			// for items in po/do			if($r['item_group'] == 0 || $r['item_group'] == 1 || $r['item_group'] == 2){				if($item_index+1>=$item_per_page){					$page++;					$item_index = -1;				}							$item_no++;				$item_index++;				$r['item_no'] = $item_no;							$page_item_list[$page][$item_index] = $r;	// add item to this page							if($config['sku_enable_additional_description'] && $r['additional_description']){					$r['additional_description'] = unserialize($r['additional_description']);					foreach($r['additional_description'] as $desc){						if($item_index+1>=$item_per_page){							$page++;							$item_index = -1;						}										$item_index++;						$desc_row = array();						$desc_row['description'] = $desc;						$desc_row['item_group'] = $r["item_group"];						$desc_row['sku_id'] = $r["sku_id"];						$desc_row['po_item_id'] = $r["po_item_id"];						$desc_row['curr_selling_price'] = $r["curr_selling_price"];						$desc_row['inclusive_tax'] = $r["inclusive_tax"];						$desc_row['gst_selling_price'] = $r["gst_selling_price"];						$page_item_list[$page][$item_index] = $desc_row;						$page_item_info[$page][$item_index]['not_item'] = 1;					}				}			}					}		//print_r($page_item_list);exit;				if($page_item_list){			$page++;			$item_index = -1;			$item_no = -1;		}						foreach($items as $r){	// loop for each item			// for items not in po/do			if($r['item_group'] != 0 && $r['item_group'] != 1 && $r['item_group'] != 2){				if($item_index+1>=$item_per_page){					$page++;					$item_index = -1;				}								$item_no++;				$item_index++;				$r['item_no'] = $item_no;										$page_item_list[$page][$item_index] = $r;	// add item to this page								if($config['sku_enable_additional_description'] && $r['additional_description']){					$r['additional_description'] = unserialize($r['additional_description']);					foreach($r['additional_description'] as $desc){						if($item_index+1>=$item_per_page){							$page++;							$item_index = -1;						}										$item_index++;						$desc_row = array();						$desc_row['description'] = $desc;						$desc_row['item_group'] = $r["item_group"];						$desc_row['sku_id'] = $r["sku_id"];						$desc_row['po_item_id'] = $r["po_item_id"];						$desc_row['curr_selling_price'] = $r["curr_selling_price"];						$desc_row['inclusive_tax'] = $r["inclusive_tax"];						$desc_row['gst_selling_price'] = $r["gst_selling_price"];						$page_item_list[$page][$item_index] = $desc_row;						$page_item_info[$page][$item_index]['not_item'] = 1;					}				}			}		}			// fix last page		if(count($page_item_list[$page]) > $item_per_page){			$page++;			$page_item_list[$page] = array();		}				$totalpage = count($page_item_list);		$smarty->assign("action", $form['action']);		$mst = load_grn_header($grn_id, $branch_id);		$smarty->assign("form", $mst);				//print_r($page_item_list);		foreach($page_item_list as $page => $item_list){			//$smarty->assign("page", "Page $page of $totalpage");			$smarty->assign("start_counter",$item_list[0]['item_no']);			$smarty->assign("PAGE_SIZE", $item_per_page);			$smarty->assign("is_lastpage", ($page >= $totalpage));			$smarty->assign("grn_items", $item_list);			$smarty->assign("page_item_info", $page_item_info[$page]);			if($config['grn_future_print_template'])   $tpl = $config['grn_future_print_template'];			else $tpl = 'goods_receiving_note.print_grn.tpl';			$smarty->display($tpl);			$smarty->assign("skip_header",1);		}	}	if($form['print_dn_report']){ // print Debit Note report		$q1=$con->sql_query("select gi.*,							 gi.selling_price, si.sku_id, si.mcode, si.link_code,							 si.sku_item_code, si.description, si.additional_description, u1.code as rcv_uom, 							 u1.fraction as uom_fraction, si.artno, si.packing_uom_id as master_uom_id,							 u1.code as uom_code, u1.code as order_uom							 from grn_items gi							 left join grn on gi.grn_id = grn.id and gi.branch_id = grn.branch_id							 left join sku_items si on gi.sku_item_id = si.id							 left join sku on sku.id = si.sku_id 							 left join uom u1 on gi.uom_id = u1.id							 where gi.grn_id=".mi($grn_id)."							 and gi.branch_id=".mi($branch_id)." 							 and gi.acc_cost is not null							 order by gi.id") or die(mysql_error());		$items = array();		while($r = $con->sql_fetchassoc($q1)){			$items[] = $r;		}		$con->sql_freeresult($q1);				// select doc list		$q1 = $con->sql_query("select doc_no, type from grr_items where grr_id = ".mi($grn['grr_id'])." and branch_id = ".mi($grn['branch_id'])." and type in ('INVOICE', 'DO')");				$inv_list = $do_list = array();		while($r = $con->sql_fetchassoc($q1)){			if($r['type'] == "INVOICE"){				$inv_list[] = $r['doc_no'];			}else{				$do_list[] = $r['doc_no'];			}		}		$con->sql_freeresult($q1);				if($inv_list){			$grn['inv_list'] = join(",<br />", $inv_list);		}		if($do_list){			$grn['do_list'] = join(",<br />", $do_list);		}				$smarty->assign("grn", $grn);		$item_per_page= $config['grn_print_dn_item_per_page']?$config['grn_print_dn_item_per_page']:20;		$totalpage = ceil(count($items)/$item_per_page);				$item_index = -1;		$item_no = -1;		$page = 1;				$page_item_list = array();		$page_item_info = array();				foreach($items as $r){	// loop for each item			if($item_index+1>=$item_per_page){				$page++;				$item_index = -1;			}						$item_no++;			$item_index++;			$r['item_no'] = $item_no;						$page_item_list[$page][$item_index] = $r;	// add item to this page						if($config['sku_enable_additional_description'] && $r['additional_description']){				$r['additional_description'] = unserialize($r['additional_description']);				foreach($r['additional_description'] as $desc){					if($item_index+1>=$item_per_page){						$page++;						$item_index = -1;					}								$item_index++;					$desc_row = array();					$desc_row['description'] = $desc;					$page_item_list[$page][$item_index] = $desc_row;					$page_item_info[$page][$item_index]['not_item'] = 1;				}			}		}			// fix last page		if(count($page_item_list[$page]) > $item_per_page){			$page++;			$page_item_list[$page] = array();		}				$totalpage = count($page_item_list);			if($config['grn_future_print_dn_template']) $tpl = $config['grn_future_print_dn_template'];		else $tpl = 'goods_receiving_note.print_dn.tpl';						foreach($page_item_list as $page => $item_list){			//$smarty->assign("page", "Page $page of $totalpage");			$smarty->assign("is_last_page", ($page >= $totalpage));			$smarty->assign("start_counter",$item_list[0]['item_no']);			$smarty->assign("PAGE_SIZE", $item_per_page);			$smarty->assign("items", $item_list);			$smarty->assign("page_item_info", $page_item_info[$page]);			$smarty->display($tpl);			$smarty->assign("skip_header",1);		}		if(count($items) == 0 && $grn['buyer_adjustment'] != 0){			$smarty->assign("is_last_page", 1);			$smarty->assign('PAGE_SIZE', $item_per_page);			$smarty->display($tpl);		}	}    if($form['print_grn_perform_report'] || ($config['use_grn_future'] && $form['print_gra_report'])){		$appCore->grnManager->print_grn_performance($grn_id, $branch_id);	}}function update_total_selling($id, $bid){	global $appCore;		$appCore->grnManager->update_total_selling($id, $bid);}function update_total_amount($id, $bid){	global $appCore;		$appCore->grnManager->update_total_amount($id, $bid);}function update_total_variance($id, $bid){	global $con;    //print "<li> updating $bid,$id";    $con->sql_query("select sum(if (grn_items.acc_ctn is null and grn_items.acc_pcs is null,(grn_items.ctn * rcv_uom.fraction) + grn_items.pcs, (grn_items.acc_ctn * rcv_uom.fraction) + grn_items.acc_pcs)-grn_items.po_qty) as variance					 from grn_items					 left join uom rcv_uom on grn_items.uom_id=rcv_uom.id					 where grn_id = ".mi($id)." and branch_id = ".mi($bid)." and item_check=0					 group by grn_items.id") or die(mysql_error());    while ($r=$con->sql_fetchrow()){		$ttl_variance += abs($r['variance']);	}    //if ($t[0]==0) return;    $con->sql_query("update grn set last_update=last_update,have_variance=".doubleval($ttl_variance)." where id=$id and branch_id=$bid");}/*function print_grn_performance($grn){	global $con, $smarty, $sessioninfo, $branch_id, $config;	// reset all total	$smarty->assign("total_qty", 0);	$smarty->assign("total_sold_sell", 0);	$smarty->assign("total_sold_cost", 0);	$smarty->assign("total_sell", 0);	$smarty->assign("total_cost", 0);	$smarty->assign("total_bal", 0);	$smarty->assign("total_bal_qty", 0);	$smarty->assign("total_gst", 0);	$smarty->assign("total_gst_cost", 0);	$smarty->assign("total_bal_qty", 0);	$smarty->assign("total_gst_sell", 0);		    if(!$grn['is_future']) $filter = " and grr_items.id = ".intval($grn['grr_item_id']);		$sql = $con->sql_query("select grr_items.*, grr.*, vendor.*, grr.id as grr_id, grr_items.id as grr_item_id, 							vendor.description as vendor, dept.grn_get_weight, dept.description as department, user.u, rcv.u as rcv_u, vendor.code as vendor_code,							if(bv.account_id = '' or bv.account_id is null, vendor.account_id, bv.account_id) as account_id							from grr_items 							left join grr on grr_items.grr_id = grr.id and grr_items.branch_id = grr.branch_id 							left join user on grr.user_id = user.id 							left join user rcv on grr.rcv_by = rcv.id 							left join vendor on grr.vendor_id = vendor.id 							left join branch_vendor bv on bv.vendor_id = vendor.id and bv.branch_id = grr_items.branch_id							left join category dept on grr.department_id = dept.id 							where grr.branch_id = ".mi($branch_id)." and grr.id = ".intval($grn['grr_id']).$filter."							order by grr_items.id");						//$grr = $con->sql_fetchrow($q1);	while($r1=$con->sql_fetchrow($sql)){		if(!preg_match("{^".$temp_doc."$}", $r1['doc_no'])){			$grp_doc[$r1['type']][$r1['doc_no']] = $r1['doc_no'];		}		$temp_doc = join("|", $grp_doc);		if(!preg_match("{^".$temp_type."$}", $r1['type'])){			$grp_type[] = $r1['type'];		}		$temp_type = join("|", $grp_type);		if (($r1['type']=='DO' || $r1['type']=='PO') && $r1['doc_no']!=''){		//if ($r1['type']=='PO' && $r1['doc_no']!=''){			if($config['do_skip_generate_grn']){				if($sessioninfo['type'] == "franchise") $filter = "debtor_id = ".mi($sessioninfo['debtor_id']);				else $filter = "do_branch_id = ".mi($branch_id);				$q1 = $con->sql_query("select *, id as do_id from do where do_no = ".ms($r1['doc_no'])." and ".$filter);				if($con->sql_numrows($q1) > 0){  // means is IBT DO					$grr_do = $con->sql_fetchrow($q3);					$grr = array_merge($r1, $grr_do);					if($grr_do['do_no']) $grp_do_no[] = ms($grr_do['do_no']);					$is_from_do = true;				}				$con->sql_freeresult($q1);			}						if(!$is_from_do){				// get additional PO information if po is not empty				$q2=$con->sql_query('select po.*, po.remark as po_remark1, po.remark2 as po_remark2, 									 branch_approval_history.flow_approvals,user.u as po_u 									 from po 									 left join user on po.user_id = user.id 									 left join branch_approval_history on po.approval_history_id = branch_approval_history.id and branch_approval_history.branch_id = po.branch_id									 where po_no = '.ms($r1['doc_no']));				$grr_po = $con->sql_fetchrow($q2);				unset($grr_po['added']);				if($grr_po['po_no']) $grp_po_no[] = ms($grr_po['po_no']);								if(!$grr_po['partial_delivery']) $non_pd_po[] = $grr_po['po_no']; 								$grr_po['sdiscount']=unserialize($grr_po['sdiscount']);				$grr_po['rdiscount']=unserialize($grr_po['rdiscount']);				$grr_po['po_remark1']=unserialize($grr_po['po_remark1']);				$grr_po['po_remark2']=unserialize($grr_po['po_remark2']);				$ttl_po_amt += $grr_po['po_amount'];				// merge array				$grr = array_merge($r1, $grr_po);			}		}else{			$grr = $r1;		}	}	$grr['doc_no'] = '';	$grr['type'] = '';	if($is_from_do){		$grr['type'] = "DO";		$grr['doc_no'] = join(", ", $grp_doc['DO']);		$grr['is_ibt_do'] = true;	}elseif(preg_match("{^".$temp_type."$}", "PO")){		$grr['type'] = "PO";		$grr['doc_no'] = join(", ", $grp_doc['PO']);	}elseif(!$grr['doc_no'] && preg_match("{^".$temp_type."$}", "INVOICE")){		$grr['type'] = "INVOICE";		$grr['doc_no'] = join(", ", $grp_doc['INVOICE']);	}elseif(!$grr['doc_no'] && preg_match("{^".$temp_type."$}", "DO")){		$grr['type'] = "DO";		$grr['doc_no'] = join(", ", $grp_doc['DO']);	}else{		$grr['type'] = "OTHER";		$grr['doc_no'] = join(", ", $grp_doc['OTHER']);	}		if($config['grn_summary_show_related_invoice'] && $grr['type'] == "PO"){		$q1 = $con->sql_query("select group_concat(gi.doc_no order by 1 separator ', ') as related_invoice from grr_items gi where gi.type='INVOICE' and gi.grr_id=".mi($grr['grr_id'])." and gi.branch_id=".mi($branch_id));			$tmp = $con->sql_fetchassoc($q1);		$con->sql_freeresult($q1);		$grr['related_invoice'] = $tmp['related_invoice'];	}		$price_date = date("Y-m-d",strtotime("+1 day",strtotime($grr['rcv_date'])));	$grn['price_date']=$price_date;	$items = array();		if($config['grn_future_report_order_sequence_by_po']) $order_by = "if(grn_items.po_item_id > 0, grn_items.po_item_id, 100000000+grn_items.id), grn_items.item_group,";		$rs1 = $con->sql_query("select grn_items.*, if(grn_items.acc_ctn is null and grn_items.acc_pcs is null, grn_items.ctn *u1.fraction + grn_items.pcs, grn_items.acc_ctn *u1.fraction + grn_items.acc_pcs) as qty , round(if (grn_items.acc_cost is null,grn_items.cost,grn_items.acc_cost)/u1.fraction, ".mi($config['global_cost_decimal_points']).") as grn_cost, sku_items.mcode, sku_items.sku_item_code, sku_items.description, sku_items.additional_description, u1.code as order_uom, u2.code as sell_uom, u1.fraction as uom_fraction, u2.fraction as selling_uomf, sku_items.artno, grn_items.selling_price/u2.fraction as grn_price, sku_items.selling_price as master_price, if(grn_items.acc_gst_id is null, grn_items.gst_rate, grn_items.acc_gst_rate) as gst_rate, if(grn_items.acc_gst_id is null, grn_items.gst_code, grn_items.acc_gst_code) as gst_code, grn_items.gst_selling_price/u2.fraction as gst_selling_price							from grn_items 							left join sku_items on grn_items.sku_item_id=sku_items.id 							left join uom u1 on grn_items.uom_id=u1.id 							left join uom u2 on grn_items.selling_uom_id=u2.id 							where grn_id = ".mi($grn['id'])." and grn_items.branch_id = ".mi($grn['branch_id'])."							order by $order_by grn_items.id") or die(mysql_error());	while($r=$con->sql_fetchassoc($rs1)){		//get selling price for GRN		$query2=$con->sql_query("select siph.price as curr_selling_price                                from sku_items_price_history siph                                left join sku_items on sku_items.id=sku_item_id                                where sku_item_id = ".mi($r['sku_item_id'])." and siph.branch_id = ".mi($branch_id)." and siph.added < ".ms($price_date)." order by siph.added desc limit 1");		$r2=$con->sql_fetchassoc($query2);				$con->sql_freeresult($query2);		        $prms = array();		$prms['branch_id'] = $branch_id;		$prms['date'] = $grn['added'];		$grn['branch_is_under_gst'] = check_gst_status($prms);                   if($grn['branch_is_under_gst'] || $grn['is_under_gst']){			$need_recalc_price = false;			// branch no gst, need recalc to make grn_price as gst_selling_price			if(!$grn['branch_is_under_gst'] && $grn['is_under_gst']){				$need_recalc_price = true;			}			// no gst_selling_price, need recalc			if(!$r['gst_selling_price']){				$need_recalc_price = true;			}						// if already have gst_selling_price, no need do further calculation			if($need_recalc_price){				$inclusive_tax = get_sku_gst("inclusive_tax", $r['sku_item_id']);				$output_tax = get_sku_gst("output_tax", $r['sku_item_id']);									if($r['grn_price']){ // sp from GRN					if($grn['branch_is_under_gst'] && $grn['is_under_gst']){						$inclusive_tax = "no";      //direct skip, because all price have been calculated						// should not reach here					}elseif(!$grn['branch_is_under_gst'] && $grn['is_under_gst']) {						// make grn_price as gst_selling_price						$r['grn_price'] = $r['gst_selling_price'];						$inclusive_tax = "no";      //skip calculate gst, since branch gst is 0						$need_recalc_price = false;																	}				}else {					if($r2['curr_selling_price']) $r['grn_price'] = $r2['curr_selling_price'];					else $r['grn_price'] = $r['master_price'];				}								if($need_recalc_price){					$prms = array();					$prms['selling_price'] = $r['grn_price'];					$prms['inclusive_tax'] = $inclusive_tax;					$prms['gst_rate'] = $output_tax['rate'];					$gst_sp_info = calculate_gst_sp($prms);					   					if($inclusive_tax == "yes") {						$r['gst_selling_price'] = $r['grn_price'];						$r['grn_price'] = round($gst_sp_info['gst_selling_price'], 2);                        					}else {						$r['grn_price'] = $r['grn_price'];						$r['gst_selling_price'] = round($gst_sp_info['gst_selling_price'], 2);					}				}							}        }else {            if($r['grn_price']) $r['grn_price'] = $r['gst_selling_price'];            elseif($r2['curr_selling_price']) $r['grn_price'] = $r2['curr_selling_price'];			else $r['grn_price'] = $r['master_price'];        }              		$r['total_cost']=$r['grn_cost']*$r['qty'];				if(!$temp[$r['sku_item_code']])			$temp[$r['sku_item_code']]=$r;		else{			$temp[$r['sku_item_code']]['qty']=$items[$r['sku_item_code']]['qty']+$r['qty'];			$temp[$r['sku_item_code']]['total_cost']=$items[$r['sku_item_code']]['total_cost']+$r['total_cost'];			if($temp[$r['sku_item_code']]['total_cost'] && $temp[$r['sku_item_code']]['qty'])				$temp[$r['sku_item_code']]['grn_cost']=$temp[$r['sku_item_code']]['total_cost']/$temp[$r['sku_item_code']]['qty'];			else $temp[$r['sku_item_code']]['grn_cost'] = 0;		}				$items = $temp;	}	$con->sql_freeresult($rs1);	//IF FROM PO GET THE FOC.	if($grr['type']=='PO'){		if(strpos($grr['doc_no'], ",") == true){			$splt_doc_no = explode(",", $grr['doc_no']);			for($i=0; $i<count($splt_doc_no); $i++){				$splt_doc_no[$i] = trim($splt_doc_no[$i]); 			}			$doc_no = join("','",$splt_doc_no);		}else $doc_no = $grr['doc_no'];			$q0=$con->sql_query("select if(po_items.foc is null, sum(po_items.foc_loose),sum(po_items.foc))*uom.fraction as po_foc, sku_items.sku_item_code, po.po_no, po.partial_deliveryfrom po_items left join po on po.id=po_items.po_id and po.branch_id=po_items.branch_id left join uom on uom.id=po_items.order_uom_id left join sku_items on sku_items.id=sku_item_id where po_no in ('$doc_no') group by po_items.id");		$non_pd_po = array();		while ($r0=$con->sql_fetchrow($q0)){			if(!$r0['po_foc'])	continue;			$items[$r0['sku_item_code']]['po_foc']=abs($r0['po_foc']);			if(!$r0['partial_delivery']){				if(strpos(join(",", $non_pd_po), "$r0[po_no]") === false) $non_pd_po[] = $r0['po_no'];			}		}		$con->sql_freeresult($q0);	}	if($non_pd_po) $grr['pd_po'] = join(",", $non_pd_po);	if ($items)		$where =" sku_item_code in ('" . join("','", array_keys($items)) . "')";	else		die("Items in this GRN are invalid");		//FROM POS	$q3 = $con->sql_query("select si.sku_item_code, sum(qty) as sold_qty fromsku_items_sales_cache_b".$branch_id." tblleft join sku_items si on si.id=tbl.sku_item_idwhere tbl.date>=".ms($grr['rcv_date'])." and $where group by si.sku_item_code");	while ($r3=$con->sql_fetchrow($q3)){		$pos_qty[$r3['sku_item_code']]=$r3;	}		$con->sql_freeresult($q3);	//FROM DO	$q4=$con->sql_query("select sku_item_code, sum(do_items.ctn *uom.fraction + do_items.pcs) as qty  from do_items left join do on do.id=do_items.do_id and do.branch_id=do_items.branch_idleft join sku_items on sku_item_id = sku_items.id left join uom on do_items.uom_id=uom.idwhere $where and do_items.branch_id = ".mi($branch_id)." and do.approved and do.checkout and do.status<2 and do_date >= ".ms($grr['rcv_date'])." group by sku_item_code", false, false);	while ($r4=$con->sql_fetchrow($q4)){		$do_qty[$r4['sku_item_code']]=$r4;	}	$con->sql_freeresult($q4);				$smarty->assign("grn", $grn);	$smarty->assign("pos_qty", $pos_qty);	$smarty->assign("do_qty", $do_qty);	$smarty->assign("grr", $grr);		$item_per_page= $config['grn_report_print_item_per_page']?$config['grn_report_print_item_per_page']:23;    $item_per_lastpage = $config['grn_report_print_item_last_page']>0 ? $config['grn_report_print_item_last_page'] : $item_per_page-5;	$totalpage = 1 + ceil((count($items)-$item_per_lastpage)/$item_per_page);		$item_index = -1;	$item_no = -1;	$page = 1;		$page_item_list = array();	$page_item_info = array();		//print_r($items);	foreach($items as $r){	// loop for each item		if($item_index+1>=$item_per_page){			$page++;			$item_index = -1;		}				$item_no++;		$item_index++;		$r['item_no'] = $item_no;				$page_item_list[$page][$item_index] = $r;	// add item to this page				if($config['sku_enable_additional_description'] && $r['additional_description']){			$r['additional_description'] = unserialize($r['additional_description']);			foreach($r['additional_description'] as $desc){				if($item_index+1>=$item_per_page){					$page++;					$item_index = -1;				}						$item_index++;				$desc_row = array();				$desc_row['description'] = $desc;				$page_item_list[$page][$item_index] = $desc_row;				$page_item_info[$page][$item_index]['not_item'] = 1;			}		}	}	// fix last page	if(count($page_item_list[$page]) > $item_per_lastpage){		$page++;		$page_item_list[$page] = array();	}		$totalpage = count($page_item_list);		foreach($page_item_list as $page => $item_list){		$this_page_num = ($page < $totalpage) ? $item_per_page : $item_per_lastpage;		$smarty->assign("is_last_page", ($page >= $totalpage));		$smarty->assign("page", "Page $page of $totalpage");		$smarty->assign("start_counter",$item_list[0]['item_no']);		$smarty->assign("PAGE_SIZE", $this_page_num);		$smarty->assign("grn_items", $item_list);		$smarty->assign("page_item_info", $page_item_info[$page]);		if($config['grn_perform_alt_print_template'])   $smarty->display($config['grn_perform_alt_print_template']);		else $smarty->display('goods_receiving_note.perform_print.tpl');		$smarty->assign("skip_header",1);	}}*/if (!function_exists('init_selection')){	$vendor_gst_list = array();	function init_selection(){		global $con, $smarty, $sessioninfo, $config, $vendor_gst_list;		// default action is create New PO		$con->sql_query("select id, code from branch where active=1 order by sequence,code");		$smarty->assign("branch", $con->sql_fetchrowset());				$con->sql_query("select id, code, fraction from uom where active=1 order by code");		$smarty->assign("uom", $con->sql_fetchrowset());				// manager and above can see all department		if ($sessioninfo['level'] < 9999){			if (!$sessioninfo['departments'])				$depts = "id in (0)";			else				$depts = "id in (" . join(",", array_keys($sessioninfo['departments'])) . ")";		}		else{			$depts = 1;		}				// show department option		$con->sql_query("select id, description from category where active and level = 2 and $depts order by description");		$smarty->assign("dept", $con->sql_fetchrowset());				if($config['enable_gst']){			$q1 = $con->sql_query("select * from vendor where gst_register not in (0, -1)");						while($r = $con->sql_fetchassoc($q1)){				$vendor_gst_list[$r['id']] = $r;			}			$con->sql_freeresult($q1);		}	}}// update vendor_sku_history table with grn infofunction update_sku_vendor_history($grn_id, $branch_id){	global $appCore;	$appCore->grnManager->update_sku_vendor_history($grn_id, $branch_id);}// update PO delivered status/*function update_po_receiving_count($po_no){	global $con, $config;	if(strpos($po_no, ",") == true){ // is group doc no		$po_no = str_replace(',', '","', $po_no);	}	// reset all number to zero first...	$con->sql_query("update po_items left join po	on po_items.po_id = po.id and po_items.branch_id = po.branch_id 	set po_items.delivered = 0 where po_no in (".ms($po_no).")");					 	if(!$config['use_grn_future']) $extra_filter = "and grn.grr_item_id = gri.id";		$sql = "select grn_items.*, uom.fraction 		from grr_items gri		join grr on grr.branch_id=gri.branch_id and grr.id=gri.grr_id		join grn on grn.branch_id=grr.branch_id and grn.grr_id=grr.id $extra_filter		join grn_items on grn_items.branch_id=grn.branch_id and grn_items.grn_id=grn.id		left join uom on grn_items.uom_id = uom.id		where gri.type='PO' and gri.doc_no in (".ms($po_no).") and grn.active=1 and grr.active=1 and grn.status=1		order by grn.branch_id,grn.id limit 1";						$q1 = $con->sql_query($sql);	$rcvq = array();	while($r=$con->sql_fetchrow($q1)){		if ($r['po_item_id']=='') 			continue;					if ($bid==0) 			$bid = $r['branch_id'];		if ($r['acc_pcs']>0 || $r['acc_ctn']>0)			$rcvq[$r['po_item_id']] += $r['acc_pcs'] + $r['fraction'] * $r['acc_ctn'];		else			$rcvq[$r['po_item_id']] += $r['pcs'] + $r['fraction'] * $r['ctn'];		//print "<li> $r[po_item_id] = ".$rcvq[$r['po_item_id']];		//print_r($r);	}	$con->sql_freeresult($q1);	if (!$rcvq) return;	foreach ($rcvq as $k=>$v){		$con->sql_query("update po_items set delivered = ".mi($v)." where id = ".mi($k)." and branch_id = ".mi($bid));	}}*/function update_sku_item_cost($id,$branch_id){	global $appCore;	$appCore->grnManager->update_sku_item_cost($id, $branch_id);}function do_reset($grn_id,$branch_id){	global $con,$sessioninfo,$config,$smarty;	$required_level = isset($config['doc_reset_level']) ? $config['doc_reset_level'] : 9999;	$form=load_grn_header($grn_id,$branch_id);		if(!privilege('GRN_ALLOW_USER_RESET') && $sessioninfo['level']<$required_level) {        js_redirect(sprintf('Forbidden', 'GRN', BRANCH_CODE), "/goods_receiving_note.php");	}	if($config['single_server_mode'] && $config['enable_sn_bn']){		$prms = array();		$prms['grn_id'] = $grn_id;		$prms['branch_id'] = $branch_id;		$prms['process_type'] = "reset";		$err = grn_sn_handler($prms);	}	$aid=$form['approval_history_id'];	$approvals=$form['approvals'];	$status = 0;	// insert approval history	$upd = array();	$upd['approval_history_id'] = $aid;	$upd['branch_id'] = $branch_id;	$upd['user_id'] = $sessioninfo['id'];	$upd['status'] = $status;	$upd['log'] = $_REQUEST['reason'];	$con->sql_query("insert into branch_approval_history_items ".mysql_insert_by_field($upd)) or die(mysql_error());	$con->sql_query("update branch_approval_history set status = ".mi($status)." where id = ".mi($aid)." and branch_id = ".mi($branch_id)) or die(mysql_error());	// update sku item cost	update_sku_item_cost($grn_id,$branch_id);	// reset grn	$upd = array();	$upd['status'] = $status;	$upd['last_update'] = 'CURRENT_TIMESTAMP';	$upd['div1_approved_by'] = 0;	$upd['div2_approved_by'] = 0;	$upd['div3_approved_by'] = 0;	$upd['div4_approved_by'] = 0;	$upd['approved'] = 0;	$upd['authorized'] = 0;	$upd['by_account'] = 0;		// reset dn information if it is under gst	if($form['is_under_gst']){		$upd['dn_number'] = "";		$upd['dn_amount'] = 0;		$upd['dn_issued'] = 0;		$upd['final_amount'] = "amount";	}	// got returned gra	if($form['return_gra_id_list']){		foreach ($form['return_gra_id_list'] as $gra_id) {			// cancel gra			$gra = array();			$gra['status'] = 1;			$gra['returned'] = 0;			$gra['approved'] = 0;			$gra['last_update'] = 'CURRENT_TIMESTAMP';			$gra['type'] = 'Return';			$con->sql_query("update gra set ".mysql_update_by_field($gra)." where id=$gra_id and branch_id=$branch_id");			// cancel dn			$con->sql_query("update dnote set active=0 where ref_table = 'gra' and ref_id = ".mi($gra_id)." and branch_id = ".mi($branch_id));		}		$upd['return_gra_id_list'] = '';		}		// need to take out the items which captured from "item not in PO" when using auto generate GRA	if($form['generate_gra'] && $form['non_sku_items']){		$non_sku_items = $form['non_sku_items'];		$nsi = array();				// check against grn items to see if have similar items		foreach($non_sku_items['code'] as $key=>$nsi_code){			if($non_sku_items['i_c'][$key]){				$q1 = $con->sql_query("select gi.*									   from grn_items gi									   left join sku_items si on si.id = gi.sku_item_id									   where si.sku_item_code = ".ms($nsi_code)." and gi.grn_id = ".mi($grn_id)." and gi.branch_id = ".mi($branch_id));							if($con->sql_numrows($q1) > 0) continue; // found it is matching, skip this item				$con->sql_freeresult($q1);			}			$nsi['code'][] = $nsi_code;			$nsi['description'][] = $non_sku_items['description'][$key];			$nsi['cost'][] = doubleval($non_sku_items['cost'][$key]);			$nsi['qty'][] = $non_sku_items['qty'][$key];			$nsi['i_c'][] = $non_sku_items['i_c'][$key];		}		if($nsi) $upd['non_sku_items'] = serialize($nsi);		else $upd['non_sku_items'] = "";	}		$con->sql_query("update grn set ".mysql_update_by_field($upd)." where id = ".mi($grn_id)." and branch_id = ".mi($branch_id)) or die(mysql_error());	$con->sql_query("update grn_items set sn_import='' where grn_id = ".mi($grn_id)." and branch_id = ".mi($branch_id)) or die(mysql_error()); // need to unset the imported S/N list		// set dnote to inactive	if($form['is_under_gst']){		$con->sql_query("update dnote set active=0 where ref_table = 'grn' and ref_id = ".mi($grn_id)." and branch_id = ".mi($branch_id));	}		// delete from vender sku history	$con->sql_query("delete from vendor_sku_history where branch_id = ".mi($branch_id)." and source= 'GRN' and ref_id = ".mi($grn_id));	// update po qty if type = 'PO'    //$grr = $smarty->get_template_vars('grr');    //if(!$grr){	if(!$form['is_future']) $upd_filter = " and id = ".mi($form['grr_item_id']);	$q1 = $con->sql_query("select grr_items.*,branch.report_prefix from grr_items left join branch on grr_items.branch_id=branch.id where grr_items.branch_id = ".mi($branch_id)." and grr_items.grr_id = ".mi($form['grr_id']).$upd_filter);	//$grr = $con->sql_fetchrow();	//}	while($grr = $con->sql_fetchrow($q1)){		if($grr['po_id']>0&&$grr['type']=='PO'){			update_po_receiving_count($grr['doc_no']);			if($config['po_enable_ibt']){				update_sku_monitoring_group_items_changed($grr['doc_no'], $branch_id, $grn_id);			}		}		$report_prefix = $grr['report_prefix'];	}	$con->sql_freeresult($q1);	// save log    log_br($sessioninfo['id'], 'GRN', $grn_id, sprintf("GRN Reset (#$form[id])",$grn_id));    	$msg_type = "Saved GRN";		header("Location: /goods_receiving_note.php?t=reset&id=$grn_id&msg_type=".urlencode($msg_type)."&report_prefix=".$report_prefix);	exit;}function check_sku_item_type($grn_id, $sid, $branch_id, $type, $gid=0){	global $con, $sessioninfo;		if(!$sid){		return 4;	}		$item_group = 3;	if($type == 'PO' || $type == 'DO'){		// compare sku_item_id		if($gid) $filter = "tgi.id = ".mi($gid);		else $filter = "tgi.grn_id = ".mi($grn_id);				$q1=$con->sql_query("select *							 from tmp_grn_items tgi							 left join sku_items si on si.id = tgi.sku_item_id							 left join sku on sku.id = si.sku_id							 where tgi.branch_id = ".mi($branch_id)." and tgi.po_item_id > 0							 and $filter");		$con->sql_query("select sku_items.sku_id from sku_items where id = ".ms($sid));		$sku_id = $con->sql_fetchfield(0);			    while($r=$con->sql_fetchassoc($q1)){	    	if($r['sku_item_id'] == $sid && $r['item_group'] == '0' && $r['po_item_id'] > 0){				$item_group = 1;			}elseif($r['sku_item_id'] != $sid && $r['sku_id'] == $sku_id && $r['po_item_id'] > 0 && $item_group != 1){				$item_group = 2;			}	    }	}		return $item_group;}function grn_repopulate_vendor_sku_history(){	global $con;		if($_REQUEST['bid']){		$grn_filter = " and grn.branch_id = ".mi($branch_id);		$vsh_filter = " and branch_id = ".mi($branch_id);	}		set_time_limit(0);		$result=$con->sql_query("select distinct grn_id as id, grn_items.branch_id from grn_items left join grn on grn.id = grn_id and grn.branch_id = grn_items.branch_id where selling_price>0 and cost>0 and grn.authorized=1 and grn.approved=1 and grn.status<2 and grn.active=1 $grn_filterorder by grn.added");	$con->sql_query("delete from vendor_sku_history where source='GRN' $vsh_filter");	while($r=$con->sql_fetchrow($result)){		print "<li> updating $r[id] $r[branch_id]\n";		update_sku_vendor_history($r['id'], $r['branch_id']);		print $con->sql_affectedrows();	}	print "Completed.";	exit;}function grn_repopulate_po_receiving_count(){	global $con;		set_time_limit(0);		$result=$con->sql_query("select * from grn where is_future = 1 and authorized=1 and approved=1 and status<2 and active=1");	while($r=$con->sql_fetchrow($result)){		$result1=$con->sql_query("select gi.doc_no from grr_items gi left join grr on grr.id = gi.grr_id and grr.branch_id = gi.branch_id where grr.active = 1 and grr.id = ".mi($r['grr_id'])." and grr.branch_id = ".mi($r['branch_id'])." and gi.type = 'PO'");				while($r1 = $con->sql_fetchrow($result1)){			print "<li> updating GRR#$r[grr_id] Branch ID#$r[branch_id]\n";			update_po_receiving_count($r1['doc_no']);			print " Status updated: ".$con->sql_affectedrows();		}	}	print "<br />Completed.";	exit;}function grn_fix_selling_price($grn_id=0, $branch_id=0){	global $con;		if($grn_id && $branch_id) $filter = "and gi.grn_id = ".mi($grn_id)." and gi.branch_id = ".mi($branch_id);		$sql = $con->sql_query("select gi.*, u.fraction							from grn_items gi							left join grn on grn.id = gi.grn_id and grn.branch_id = gi.branch_id							left join uom u on u.id = gi.uom_id							where gi.item_group = 2 and date_format(grn.last_update, '%Y-%m-d') >= '2012-10-09' ".$filter);		while($r = $con->sql_fetchassoc($sql)){		$tmp = $con->sql_query("select gi.*, u.fraction								from grn_items gi								left join sku_items si on si.id = gi.sku_item_id								left join uom u on u.id = si.packing_uom_id								where gi.po_item_id = ".mi($r['po_item_id'])." and gi.item_group in (0, 1) and gi.grn_id = ".mi($r['grn_id'])." and gi.branch_id = ".mi($r['branch_id']));				if($con->sql_numrows($tmp) > 0){			$gi = $con->sql_fetchrow($tmp);						$upd = array();			$upd['selling_price'] = round($gi['selling_price'] * ($r['fraction'] / $gi['fraction']) * $r['fraction'], 3);						$con->sql_query("update grn_items set selling_price = ".mf($upd['selling_price'])." where grn_id = ".mi($r['grn_id'])." and branch_id = ".mi($r['branch_id'])." and item_group = 2 and id = ".mi($r['id']));			print "ID: ".$r['id']." = from old selling price ".$r['selling_price']." -> ".$upd['selling_price']."<br />";						update_total_selling($r['grn_id'], $r['branch_id']);		}	}}function load_available_po_qty($prms){	global $con;		if(!$prms) return;		$po_item_id = $prms['po_item_id'];	$bid = $prms['branch_id'];	$po_qty = $prms['po_qty'];	$po_no = $prms['po_no'];	$q1 = $con->sql_query("select gi.*, u.fraction, pkuom.fraction as packing_uom_fraction						   from grn_items gi						   left join grn on grn_id = grn.id and gi.branch_id = grn.branch_id 						   left join sku_items si on si.id = gi.sku_item_id						   left join uom u on u.id = gi.uom_id 						   left join uom pkuom on pkuom.id = si.packing_uom_id 						   left join grr on grr.id = grn.grr_id and grr.branch_id = grn.branch_id						   left join grr_items gri on gri.grr_id = grr.id and gri.branch_id = grr.branch_id and gri.type = 'PO'						   where grn.active=1 and grn.status=1 and grn.approved=1 and gi.po_item_id = ".mi($po_item_id)." and gi.branch_id = ".mi($bid)." and gri.doc_no = ".ms($po_no));		while($r=$con->sql_fetchassoc($q1)){		if($r['acc_pcs']>0 || $r['acc_ctn']>0) $rcv_qty += ($r['acc_pcs'] + $r['fraction'] * $r['acc_ctn']) * $r['packing_uom_fraction'];		else $rcv_qty += ($r['pcs'] + $r['fraction'] * $r['ctn']) * $r['packing_uom_fraction'];	}	$con->sql_freeresult($q1);	return mf($po_qty-$rcv_qty);}function fix_grn_cost(){	global $con;		// NOTE THIS FUNCTION CAN ONLY RUN ONCE FOR PKT	$date_from = $_REQUEST['date_from'];	$date_to = $_REQUEST['date_to'];	$bid = $_REQUEST['bid'];	if(!$date_from || !$date_to) die("Please assign date from and to.");		$filters = array();	$filters[] = "grn.added >= ".ms($date_from)." and grn.added <= ".ms($date_to);	if($bid) $filters[] = "grn.branch_id = ".mi($bid);	$filter = join(" and ", $filters);	$sql = $con->sql_query("select gi.*, u.fraction							from grn_items gi							left join grn on grn.id = gi.grn_id and grn.branch_id = gi.branch_id							left join uom u on u.id = gi.uom_id							where gi.item_group in (0, 1, 2) and gi.po_item_id > 0 and u.fraction > 1 and ".$filter);		while($r = $con->sql_fetchassoc($sql)){		$new_cost = $r['cost'] * $r['fraction'];				$upd = array();		$upd['po_cost'] = $upd['cost'] = $new_cost;					$con->sql_query("update grn_items set ".mysql_update_by_field($upd)." where grn_id = ".mi($r['grn_id'])." and branch_id = ".mi($r['branch_id'])." and id = ".mi($r['id']));		print "GRN#".$r['grn_id']."/ITEM ID#".$r['id']." = from old cost ".$r['cost']." -> ".$new_cost."<br />";						update_total_amount($r['grn_id'], $r['branch_id']);		$con->sql_query("update sku_items_cost set changed=1 where branch_id=".mi($r['branch_id'])." and sku_item_id = ".mi($r['sku_item_id']));				$tmp_info['ttl_cost']*=(100+$r['tax'])/100;		$tmp_info['ttl_cost']=parse_formula($tmp_info['ttl_cost'],$r['discount']);		$t = $unit_cost[$r['sku_id']] = $tmp_info['ttl_cost'] / $tmp_info['ttl_qty'];	}}function items_return_handler($grn_id, $branch_id){	global $appCore;		$appCore->grnManager->items_return_handler($grn_id, $branch_id);}function print_arms_dn($branch_id, $grn_id){	global $con, $LANG;	$form = $_REQUEST;	$branch_id = mi($branch_id);	$grn_id = mi($grn_id);		if(!$branch_id || !$grn_id)	die("Invalid Parameters");		// temporary update for testing purpose	// ===================	//$con->sql_query("update grn set dn_number = '', dn_amount = 0, dn_issued = 0 where id = ".mi($grn_id)." and branch_id = ".mi($branch_id));		//$con->sql_query("delete dni.* from dnote dn left join dnote_items dni on dni.dnote_id = dn.id and dni.branch_id = dn.branch_id where dn.branch_id = ".mi($branch_id)." and dn.ref_table = 'grn' and dn.ref_id = ".mi($grn_id));		//$con->sql_query("delete from dnote where branch_id = ".mi($branch_id)." and ref_table = 'grn' and ref_id = ".mi($grn_id));	// ===================		// get the grn	$con->sql_query("select * from grn where branch_id=$branch_id and id=$grn_id");	$grn = $con->sql_fetchassoc();	$con->sql_freeresult();		if(!$grn)	die("GRN ID#$grn_id not found.");		// found grn, verify if the DN is generated from arms system	$q1 = $con->sql_query("select * from dnote where ref_table = 'grn' and ref_id = ".mi($grn['id'])." and branch_id = ".mi($grn['branch_id'])." and active=1");	$dnote_info = $con->sql_fetchassoc($q1);	$con->sql_freeresult($q1);		if($grn['dn_number']){		if($dnote_info){			// already have dn no			header("Location: /dnote.php?a=print_dn&id=".mi($dnote_info['id'])."&branch_id=".mi($dnote_info['branch_id']));		}else{			// found it is external DN, redirect user to GRN main page 			js_redirect($LANG['GST_DN_EXISTED'], "/goods_receiving_note.php");		}		exit;	}		// generate arms dn	header("Location: /dnote.php?a=generate_dn&from_module=grn&branch_id=$branch_id&id=$grn_id&inv_no=".$form['inv_no']."&inv_date=".$form['inv_date']."&remark=".$form['remark']."&need_print=1");	exit;}function calc_grr_gst_info($prms){	global $con, $smarty, $config;		$grn_id = $prms['grn_id'];	$branch_id = $prms['branch_id'];		$q1 = $con->sql_query("select * from grn where id = ".mi($grn_id)." and branch_id = ".mi($branch_id));	$grn_info = $con->sql_fetchassoc($q1);		// if no grn found, exit	if(!$grn_info || !$grn_info['is_under_gst']) return;		if($grn_info['approved']){ // found grn is approved, do calculation		//get grn items		$con->sql_query("select * from grn_items where grn_id = ".mi($grn_id)." and branch_id = ".mi($branch_id));				while($r = $con->sql_fetchassoc($q1)){					}		$con->sql_freeresult($q1);	}else{ // set grr more info to null if this GRR doesn't exists		$con->sql_query("update grr set grr_more_info = null where id = ".mi($grn_info['grr_id'])." and branch_id = ".mi($grn_info['branch_id']));	}}function check_gra(&$grn,$branch_id){    global $con;    $grn['return_gra_id_list'] = unserialize($grn['return_gra_id_list']);	// check gra	if($grn['generate_gra'] && $grn['active'] && $grn['status'] == 1 && $grn['approved'] && $grn['return_gra_id_list']){		foreach ($grn['return_gra_id_list'] as $gra_id) {			$con->sql_query("select gra.* from gra where branch_id=$branch_id and id=".mi($gra_id));			$gra = $con->sql_fetchassoc();			$con->sql_freeresult();			if($gra){				if($gra['status'] != 0 || !$gra['returned']){					$grn['unfinish_gra_list'][] = $gra;				}else{					$grn['finished_gra_list'][] = $gra;				}			}		}	}}function check_allow_approval($branch_id, $grn_id) {    global $con, $LANG;        //check for whether GRN is still under "Waiting Approval" state    $con->sql_query("select count(*) from grn where active='1' and status='1' and approved='0' and branch_id=".mi($branch_id)." and id=".mi($grn_id));    $waiting_approved_count = $con->sql_fetchfield(0);    $con->sql_freeresult();        //GRN was not under "Waiting Approval" state    if($waiting_approved_count == 0) {        display_redir($_SERVER['PHP_SELF'], "Goods Receiving Note Approval", sprintf($LANG['GRN_APPROVAL_ALREADY_DONE'], $grn_id));    }}function grn_sn_handler($prms){	global $con, $config, $LANG;		if(!$prms['grn_id'] || !$prms['branch_id'] || !$prms['process_type']) return;		$grn_id = $prms['grn_id'];	$branch_id = $prms['branch_id'];	$grr_id = $prms['grr_id'];	$process_type = $prms['process_type'];		// grn filtering	if(!is_new_id($grn_id)){ // if it is not a new grn, search from it		if($process_type == "transfer") $filter = "grn.id = ".mi($grn_id)." and grn.branch_id = ".mi($branch_id)." and gi.type = 'DO' and grn.approved=1 and grn.active=1 and grn.status=1 and grr.active=1";		else $filter = "grn.id = ".mi($grn_id)." and grn.branch_id = ".mi($branch_id)." and gi.type = 'DO' and grn.active=1 and grr.active=1";				$q1 = $con->sql_query("select gi.doc_no 							   from grn 							   left join grr on grr.id = grn.grr_id and grr.branch_id = grn.branch_id 							   left join grr_items gi on gi.grr_id = grr.id and gi.branch_id = grr.branch_id 							   where $filter");	}else{ // have to search according to grr ID since grn is not being created yet		if(!$grr_id) return;			$q1 = $con->sql_query("select gi.doc_no							   from grr_items gi							   left join grr on grr.id = gi.grr_id and grr.branch_id = gi.branch_id							   where gi.grr_id = ".mi($grr_id)." and gi.branch_id = ".mi($branch_id)." and gi.type = 'DO' and grr.active=1");	}		$doc_list = array();	while($r = $con->sql_fetchassoc($q1)){		$doc_list[$r['doc_no']] = $r['doc_no'];	}	$con->sql_freeresult($q1);			// do filtering	if($doc_list){		$doc_no = join("','",$doc_list);		$filter = "do.do_no in (".ms($doc_no).") and do.do_branch_id = ".mi($branch_id)." and do.do_type = 'transfer'";				$q1=$con->sql_query("select di.*							 from do_items di							 left join do on do_id = do.id and di.branch_id = do.branch_id							 where $filter and di.serial_no != '' and di.serial_no is not null							 order by di.id");		if($process_type == "confirm"){			/*while($r1 = $con->sql_fetchassoc($q1)){				$serial_no = unserialize($r1['serial_no']);				if(count($serial_no) == 0) continue; // skip all the do items that does not have S/N				foreach($serial_no as $bid=>$sn_list){					$curr_sn_list = explode("\n", $sn_list);					foreach($curr_sn_list as $r=>$sn){						$q2 = $con->sql_query("select * from pos_items_sn pis where pis.sku_item_id = ".mi($r1['sku_item_id'])." and pis.serial_no = ".ms($sn)." and pis.located_branch_id = ".mi($r1['branch_id']));						$pis = $con->sql_fetchrow($q2);						if($con->sql_numrows($q2) > 0){							$q3 = $con->sql_query("update pos_items_sn set located_branch_id = ".mi($bid).", status='Available', last_update = CURRENT_TIMESTAMP where id = ".mi($pis['id'])." and branch_id = ".mi($pis['branch_id']));							// insert S/N history							if($con->sql_affectedrows($q3)>0){								$his_ins['pisn_id'] = $pis['id'];								$his_ins['branch_id'] = $pis['branch_id'];								$his_ins['sku_item_id'] = $pis['sku_item_id'];								$his_ins['located_branch_id'] = $bid;								$his_ins['serial_no'] = $sn;								$his_ins['remark'] = "IBT - GRN approved";								$his_ins['status'] = $pis['status'];								$his_ins['active'] = $pis['active'];								$his_ins['added'] = "CURRENT_TIMESTAMP";								$his_ins['user_id'] = $sessioninfo['id'];								$con->sql_query("insert into pos_items_sn_history ".mysql_insert_by_field($his_ins));							}						}						$con->sql_freeresult($q2);					}				}			}*/		}elseif($process_type == "reset"){ // do restore S/N to the original branch from DO			while($r1 = $con->sql_fetchassoc($q1)){				$serial_no = unserialize($r1['serial_no']);				if(count($serial_no) == 0) continue; // skip all the do items that does not have S/N								foreach($serial_no as $bid=>$sn_list){					$curr_sn_list = explode("\n", $sn_list);					foreach($curr_sn_list as $r=>$sn){						$q2 = $con->sql_query("select * from pos_items_sn pis where pis.status = 'Available' and pis.sku_item_id = ".mi($r1['sku_item_id'])." and pis.serial_no = ".ms($sn)." and pis.located_branch_id = ".mi($branch_id));						$pis = $con->sql_fetchassoc($q2);								if($con->sql_numrows($q2) > 0){							$q3 = $con->sql_query("update pos_items_sn set located_branch_id = ".mi($r1['branch_id']).", status = 'Transition', last_update = CURRENT_TIMESTAMP where id = ".mi($pis['id'])." and branch_id = ".mi($pis['branch_id']));									// insert S/N history							if($con->sql_affectedrows($q3)>0){								$his_ins['pisn_id'] = $pis['id'];								$his_ins['branch_id'] = $pis['branch_id'];								$his_ins['sku_item_id'] = $pis['sku_item_id'];								$his_ins['located_branch_id'] = $pis['located_branch_id'];								$his_ins['serial_no'] = $sn;								$his_ins['remark'] = "IBT - GRN reset";								$his_ins['status'] = $pis['status'];								$his_ins['active'] = $pis['active'];								$his_ins['added'] = "CURRENT_TIMESTAMP";								$his_ins['user_id'] = $sessioninfo['id'];										$con->sql_query("insert into pos_items_sn_history ".mysql_insert_by_field($his_ins));																// need to check if all S/N has been reset before can run below script								//$con->sql_query("update grn_items set sn_import='' where grn_id = ".mi($grn_id)." and branch_id = ".mi($branch_id)." and sku_item_id = ".mi($r1['sku_item_id']));							}						}						$con->sql_freeresult($q2);					}				}			}		}elseif($process_type == "validate"){			$err = array();			while($r1 = $con->sql_fetchassoc($q1)){				$serial_no = unserialize($r1['serial_no']);				if(count($serial_no) == 0) continue; // skip all the do items that does not have S/N									foreach($serial_no as $bid=>$sn_list){					$curr_sn_list = explode("\n", $sn_list);					//$curr_sn_list = str_replace("\n\m", "','", $sn_list);					$curr_sn_list = join("\",\"", $curr_sn_list);					$q2 = $con->sql_query("select count(*) as ttl_sn_sold from pos_items_sn pis where pis.status = 'Sold' and pis.sku_item_id = ".mi($r1['sku_item_id'])." and pis.serial_no in (\"".$curr_sn_list	."\") and pis.located_branch_id = ".mi($branch_id)." group by pis.sku_item_id");					$sn_info = $con->sql_fetchassoc($q2);					$con->sql_freeresult($q2);										if($prms['use_tmp']) $gi_table = "tmp_grn_items";					else $gi_table = "grn_items";										if(!$config['use_grn_future_allow_generate_gra']) $return_pcs=" - (ifnull(gi.return_ctn * rcv_uom.fraction,0) + ifnull(gi.return_pcs,0))";										$q2 = $con->sql_query("select (if(gi.acc_ctn is null and gi.acc_pcs is null, ifnull(gi.ctn,0) * rcv_uom.fraction + ifnull(gi.pcs,0), ifnull(gi.acc_ctn,0) * rcv_uom.fraction + ifnull(gi.acc_pcs,0)$return_pcs)) as rcv_qty, si.sku_item_code										   from $gi_table gi										   left join uom rcv_uom on gi.uom_id=rcv_uom.id										   left join sku_items si on si.id = gi.sku_item_id										   where gi.grn_id = ".mi($grn_id)." and gi.branch_id = ".mi($branch_id)." and gi.sku_item_id = ".mi($r1['sku_item_id']));					$gi_info = $con->sql_fetchassoc($q2);					$con->sql_freeresult($q2);										// if found grn is receiving qty that is lesser than the current sold S/N after reset, need to show error msg					if($gi_info['rcv_qty'] < $sn_info['ttl_sn_sold']) $err[] = sprintf($LANG['GRN_SN_QTY_VARIANCE'], $gi_info['sku_item_code'], $sn_info['ttl_sn_sold']);				}			}			$con->sql_freeresult($q1);						return $err;		}		$con->sql_freeresult($q1);	}}?>