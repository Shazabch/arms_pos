<?php
/*
4/12/2011 3:18:48 PM Andy
- Add can choose PO to which branch for HQ.
- Add new re-order filter type: check item got DO in given date range.
- Add filter "last 30 days sales" and "sales in date range" can choose sales from other branches (multiple), only available to HQ.

9/6/2011 11:28:15 AM Andy
- Add can pre-generate stock reorder SKU by branch,vendor and dept using cron.
- Add report can load data by using pregen SKU.

9/8/2011 3:47:44 PM Andy
- Fix report title show wrong vendor name.
- Add sorting for SKU.

9/14/2011 2:19:43 PM Andy
- Change Pending PO to include rejected and approved PO, but not yet delivered.
- Add IBT, Delivery and Cancellation Date for report.
- Enhance when generate PO and user is one of the approval, PO will generate as draft under saved, if not approval will generated as confirmed so they cannot edit.

10/12/2011 2:46:52 PM Andy
- Add partial delivery.

11/14/2011 10:22:48 AM Andy
- Add remark for those PO generated by stock reorder report.

4/24/2012 12:02:12 PM Justin
- Added to pickup po reorder qty by branch.

6/5/2012 03:47:00 PM Andy
- Reconstruct the checking of last vendor script, only can effect if vendor id was provided.

6/8/2012 02:03:00 PM Andy
- Fix vendor name cannot show if choose all vendor and filter by last vendor.

6/28/2012 PM Andy
- Add new reorder type which calculate by vendor grace period.
- Add pregen reorder list can define reorder type by using config.

7/13/2012 9:35 AM Andy
- Fix sort link code bug.

4/17/2013 3:11 PM Andy
- Fix wrong figure of Sales/GRN in last 30 days.

10/2/2013 3:13 PM Andy
- Add set_time_limit(0) when running under terminal.
- Fix use wrong $con and $con_multi bug.
- Add show memory used when generating cache data.

10/7/2013 5:35 PM Fithri
- Allow user to key in PO date when generate PO

1/15/2013 5:53 PM Andy
- Fix terminal check process for own user only for arms-go customer.

4/17/2014 2:22 PM Justin
- Enhanced to have the ability to send email to notify person.
- Enhanced to show result by SKU items instead of SKU only.

4/30/2014 10:26 AM Justin
- Bug fixed on view pending PO is not working.
- Bug fixed on if there is more than 2 vendors having notifications for Vendor Stock Reorder, system only show one vendor.

7/24/2014 3:31 PM Justin
- Enhanced to capture log while generating PO.

10/1/2014 10:30 AM Fithri
- combine two option together, 'Item got sales between date range' and 'Item got DO between date range' (POS + DO - Stock Balance - PO)

11/18/2014 2:37 PM Justin
- Enhanced to increase memory limit to prevent system show blank screen if filter from highest category level.

12/3/2014 2:34 PM Andy
- Change to query vendor sku history data from table vendor_sku_history_bX.

12/14/2015 1:27 PM DingRen
- add Include inactive Vendor filter

1/4/2016 5:13 PM Andy
- Increase memory limit to 2048m.

1/4/2016 10:47 PM DingRen
- generate PO to follow "Purchase Agreement" cost

08-Mar-2016 10:20 Edwin
- Enhanced to check HQ whether have license to access module

3/14/2016 4:53 PM Andy
- Fix generate po wrong qty, uom fraction and cost bugs.

3/28/2016 10:52 AM Andy
- Enhance generate po to put qty into pcs if order uom fraction is 1.

4/15/2016 10:51 AM Andy
- Fix pending po qty should multiply packing uom fraction.

4/27/2016 2:14 PM Andy
- Fix generate po need to check purchase agreement qty type.

6/22/2016 11:30 AM Andy
- Enhanced to able to generate to DO.

6/28/2016 3:38 PM Andy
- Enhanced to send po items to purchase agreement page for editing, if no purchase agreement, it will direct generate to po.

8/23/2016 2:20 PM Andy
- Enhanced to check gst when generate po.

9/27/2016 5:47 PM Andy
- Enhanced to fix firefox connection reset issue.

10/24/2016 11:56 AM Andy
- Fix suggested po qty bugs.
- Added suggested po in pcs.

3/24/2017 10:54 AM Andy
- Enhanced to auto recalculate all PO Amount using reCalcatePOUsingOldMethod() when generate or update po.

3/27/2017 3:01 PM Andy
- Change reCalcatePOUsingOldMethod() to reCalcatePOAmt().

5/10/2017 11:40 AM Andy
- Fixed report unable to load last 30 days sales for branches when reorder type is "less_than_sales" or "less_then_grace_period".
- Add "Reorder by Branch" feature.
- Fixed load Pending PO error.
- Fixed load GRN in last 30 days error.

6/13/2017 2:28 PM Andy
- Fixed calculation less than last 30 days sales.

6/13/2017 4:07 PM Andy
- Enhanced the calculation to include uncheckout gra.

6/15/2017 5:08 PM Andy
- Fixed last 30 days sales wrong suggest po qty.

6/20/2017 1:44 PM Andy
- Fixed generate to po qty din't ceil() if fraction is one.

6/21/2017 1:40 PM Andy
- Fixed generate DO to check gst interbranch.

6/29/2017 10:00 AM Andy
- Added generate to DO Request (Branch Only).

7/10/2017 10:18 AM Andy
- Fixed generate to DO no artno_mcode.

7/12/2017 12:08 PM Andy
- Fixed generate to DO Request got decimal qty.

8/18/2017 3:13 PM Andy
- When generate to DO Request, add Remark "From Stock Reorder Report".

10/27/2017 4:23 PM Andy
- Enhanced to able to generate DO by vendor.

11/1/2017 5:32 PM Andy
- Enhanced to always show HQ Stock Balance when reorder by branch.
- Enhanced to able to select branch by branch group.

3/30/2018 4:13PM HockLee
- Export PO to csv format. function export_po().
- Added sr_send_email() function.

8/15/2018 2:40 PM Andy
- Increase maintenance version checking to 356.

8/21/2018 4:55 PM Andy
- Fixed folder "attachments/stock_reorder_import" not exists.

5/24/2019 3:23 PM William
- Pickup report_prefix for enhance "GRA".

5/30/2019 11:14 AM William
- Added new moq and pickup.
- Add new option to filter by MOQ.

6/27/2019 5:16 PM Andy
- Fixed item stock balance more than reorder min_qty should not be appear.

9/12/2019 5:31 PM William
- Fixed "Suggest PO in Pcs" not using moq when then "Stock Balance" is positive.

12/16/2019 10:33 AM William
- Added new moq po reorder by branch checking when tick "Order By MOQ"

4/20/2020 2:01 PM William
- Enhanced to block generate po when month is closed.

5/8/2020 1:52 PM Andy
- Change filter by reorder min qty to always calculate reorder qty using reorder max if no moq.
*/

// php report.stock_reorder.php generate_vendor_sku_list -all -reorder_type less_then_grace_period
// php report.stock_reorder.php generate_vendor_sku_list -all
include("include/common.php");
if (BRANCH_CODE == 'HQ' && $config['arms_go_modules'] && !$config['arms_go_enable_official_modules']) js_redirect($LANG['NEED_ARMS_GO_HQ_LICENSE'], "/index.php");
ini_set('memory_limit', '2048M');
set_time_limit(0);

$maintenance->check(356);

if(is_using_terminal()){
	ob_end_flush();
	
	if (!preg_match('/(root|arms|admin|wsatp)/', `whoami`) || $config['arms_go_modules']){
		@exec('ps x | grep -v grep | grep -v /bin/sh | grep '.basename(__FILE__), $exec);
		print "Checking other process using ps x\n";
	}else{
		@exec('ps ax | grep -v grep | grep -v /bin/sh | grep '.basename(__FILE__), $exec);
		print "Checking other process using ps ax\n";
	}

	if (count($exec)>1)
	{
		print date("[H:i:s m.d.y]")." Another process is already running\n";
		print_r($exec);
		exit;
	}

	$arg = $_SERVER['argv'];
	$a = trim($arg[1]);	// get argument
	if(!$a)	die("Invalid Action\n");	// terminal must have an action call
	
	$_REQUEST['a'] = $a;
	
	set_time_limit(0);
}else{
	if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");
	if (!privilege('PO')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'PO', BRANCH_CODE), "/index.php");
	if (!privilege('PO_REPORT')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'PO_REPORT', BRANCH_CODE), "/index.php");

	if(!is_ajax()){		
		set_time_limit(0);                   // ignore php timeout
		//ignore_user_abort(true);             // keep on going even if user pulls the plug*
		while(ob_get_level())ob_end_clean(); // remove output buffers
		ob_implicit_flush(true);             // output stuff directly
		
		$smarty->assign('PAGE_TITLE', 'Stock Reorder Report');
		$smarty->display('header.tpl');
		$smarty->assign('header_printed', 1);		
		$print_flush_content = 1;		
	}
}



include('po.include.php');

class STOCK_REORDER_REPORT extends Module{
    var $branch_id;
	var $vendors = array();
	var $brands = array();
	var $branches = array();
	var $branches_group_list = array();
	var $reorder_type_list = array(
		/*'sales_range' => 'Item got sales between date range',*/
		'sales_range_plus_do' => 'Items have sales between date range (includes DO)',
		/*'do_range' => 'Item got DO between date range',*/
		'less_than_sales' => 'Stock less than last 30 days sales',
		'less_than_po_reorder_min' => 'Stock less than PO reorder min qty',
		'less_then_grace_period' => 'Stock less than (average sales per day from last 30 days * Vendor grace period)'
	);
	var $sort_option = array();
	var $reorder_by_branch = false;
	var $reorder_bid = array();
	var $use_vendor_po_data = false;
	var $store_pending_data_in_details = false;
	
    function __construct($title){
		global $con, $smarty, $sessioninfo, $config;

		$this->branch_id = $sessioninfo['branch_id'];
		$this->sort_option = array(
			'si.sku_item_code' => 'ARMS Code',
			'si.artno' => 'Art No',
			'si.mcode' => 'MCode',
			'si.description' => 'Description'
		);
		if($config['link_code_name'])	$this->sort_option['si.link_code'] = $config['link_code_name'];
		
		$smarty->assign('reorder_type_list', $this->reorder_type_list);
		$smarty->assign('sort_option', $this->sort_option);
		
		if(BRANCH_CODE != 'HQ'){
			// check default expect do date
			if(!$config['do_request_no_expected_delivery_date']){
				if($config['do_request_default_expected_delivery_date_extend_day']){
					$pattern = $config['do_request_default_expected_delivery_date_extend_day']>0 ? "+".mi($config['do_request_default_expected_delivery_date_extend_day']) : mi($config['do_request_default_expected_delivery_date_extend_day']);
					$default_expect_do_date = date("Y-m-d", strtotime("$pattern day", time()));
					$smarty->assign('default_expect_do_date', $default_expect_do_date);
					
				}
				$smarty->assign('got_expect_do_date', 1);
			}
			$smarty->assign('got_do_request', 1);
		}
		parent::__construct($title);
	}
	
	function _default(){
	    global $con, $smarty;

	    $this->init_load();

		if($_REQUEST['load_report']){
		    $this->load_report();
		}

		$this->display();
	}
	
	private function init_load(){
		global $con, $smarty, $sessioninfo;

		// vendor
		$con->sql_query("select id,code,description from vendor where active=1 order by description");
	    while($r = $con->sql_fetchassoc()){
			$this->vendors[$r['id']] = $r;
		}
		$con->sql_freeresult();
		$smarty->assign('vendors', $this->vendors);
		
		// brand
		$con->sql_query("select id,code,description from brand where active=1 order by description");
	    while($r = $con->sql_fetchassoc()){
			$this->brands[$r['id']] = $r;
		}
		$con->sql_freeresult();
		$smarty->assign('brands', $this->brands);
		
		// branches
		$con->sql_query("select id,code,description from branch where active=1 order by sequence,code");
	    while($r = $con->sql_fetchassoc()){
			$this->branches[$r['id']] = $r;
		}
		$con->sql_freeresult();
		$smarty->assign('branches', $this->branches);
		
		// load branch group
		$this->branches_group_list = array();
		$q1 = $con->sql_query("select bg.*, group_concat(bgi.branch_id separator ',') as grp_items from branch_group bg 
								left join branch_group_items bgi on bg.id=bgi.branch_group_id group by bg.id");
		
		while($r = $con->sql_fetchassoc($q1)){
			$this->branches_group_list[] = $r;
		}
		$con->sql_freeresult($q1);
		//print_r ($this->branches_group_list);
		$smarty->assign('branches_group_list', $this->branches_group_list);
	}
	
	private function load_report(){
		global $con, $smarty, $sessioninfo, $config, $con_multi, $LANG, $print_flush_content;

		$category_id = mi($_REQUEST['category_id']);
		$vendor_id = mi($_REQUEST['vendor_id']);
		$brand_id = mi($_REQUEST['brand_id']);
		$by_last_vendor = mi($_REQUEST['by_last_vendor']);
		$reorder_type = trim($_REQUEST['reorder_type']);
		$use_pregen_sku = mi($_REQUEST['use_pregen_sku']);
		$this->reorder_bid = array($sessioninfo['branch_id']);
		$this->reorder_by_branch = mi($_REQUEST['reorder_by_branch']);
		$show_reorder_details_by_branch = mi($_REQUEST['show_reorder_details_by_branch']);
		$sort_by = trim($_REQUEST['sort_by']);
		$sort_order = trim($_REQUEST['sort_order']);
		if($reorder_type == "less_then_grace_period")	$this->use_vendor_po_data = true;
		
		$report_title = array();
		
		if(!$reorder_type)  $err[] = "Please select re-order type.";
		else{
		    if(!$this->reorder_type_list[$reorder_type]){
				$err[] = "Please select valid re-order type";
			}else{
                if($reorder_type=='sales_range' || $reorder_type=='do_range' || $reorder_type=='sales_range_plus_do'){
					$date_range_from = date("Y-m-d", strtotime($_REQUEST['date_range_from']));
					$date_range_to = date("Y-m-d", strtotime($_REQUEST['date_range_to']));

					if(date("Y", strtotime($date_range_from))<2000)   $err[] = "Please select date range from.";
					if(date("Y", strtotime($date_range_to))<2000)   $err[] = "Please select date tange to.";
					if(!$err && $date_range_from > $date_range_to)  $err[] = "date range to cannot early than date from.";
				}
				
				if($reorder_type=='less_than_sales' || $reorder_type=='sales_range' || $reorder_type=='sales_range_plus_do' || $reorder_type=='less_then_grace_period'){
				    $this->reorder_bid = array();
                    if(BRANCH_CODE != 'HQ')	$this->reorder_bid = array($sessioninfo['branch_id']);
					else{
						if(!isset($_REQUEST['reorder_bid']) && $_REQUEST['use_pregen_sku']){	// pregen data always use all branches sales
							foreach($this->branches as $bid => $r){
								$_REQUEST['reorder_bid'][$bid] = 1;
							}
						}
						if($_REQUEST['reorder_bid']){
							foreach($_REQUEST['reorder_bid'] as $bid => $dummy){
								if(!$bid = mi($bid))    continue;
								$this->reorder_bid [] = $bid;
							}
						}
					}
					if(!$this->reorder_bid)   $err[] = "Please select at least one branch";
				}
			}
		}
		
		if(!$category_id)   $err[] = "Please select category.";
		else{
			// check allowed dept
			$con->sql_query("select * from category where id=$category_id");
			$cat_info = $con->sql_fetchassoc();
			$con->sql_freeresult();
			
			$lv = mi($cat_info['level']);
			$dept_id = mi($cat_info['department_id']);
			
			if(!defined('TERMINAL') && !$sessioninfo['departments'][$dept_id]){
				$err[] = "You have no privilege for selected department.";
			}
			$report_title[] = "Category: ".$cat_info['description'];
			if(!$_REQUEST['category'])	$_REQUEST['category'] = $cat_info['description'];
			if(!$_REQUEST['category_tree'])	$_REQUEST['category_tree'] = get_category_tree($cat_info['id'], $cat_info['tree_str'], $have_child)." > ".$cat_info['description'];
		}
		if($vendor_id){
            $con->sql_query("select * from vendor where id=$vendor_id");
			$vendor_info = $con->sql_fetchassoc();
			$con->sql_freeresult();
			$report_title[] = "Vendor: ".$vendor_info['description'];
		}else   $report_title[] = "Vendor: All";
		if($brand_id){
            $con->sql_query("select * from brand where id=$brand_id");
			$brand_info = $con->sql_fetchassoc();
			$con->sql_freeresult();
			$report_title[] = "Brand: ".$brand_info['description'];
		}else   $report_title[] = "Brand: All";

		$report_title[] = "Re-order Type: ".$this->reorder_type_list[$reorder_type].(($reorder_type=='sales_range' || $reorder_type=='sales_range_plus_do') ? ' ('.$date_range_from.' to '.$date_range_to.')':'');
		
		if(!$err && $use_pregen_sku){	// use cron generated sku list
			if(!privilege('NT_STOCK_REORDER'))	$err[] = sprintf($LANG['NO_PRIVILEGE'], 'NT_STOCK_REORDER', BRANCH_CODE);
			elseif(!$vendor_id || !$category_id){
				$err[] = "Must have vendor and category if use pregen SKU."; 
			}else{
				$con->sql_query("select * from vendor_stock_reorder_sku where branch_id=".$this->branch_id." and vendor_id=".mi($vendor_id)." and category_id=$category_id");
				if($con->sql_numrows()>0){
					$tmp = $con->sql_fetchassoc();
					$con->sql_freeresult();
					
					$tmp['sku_id_list'] = unserialize($tmp['sku_id_list']);
					if(!$tmp['sku_id_list'])	$err[] = "NO pregen SKU found.";
					$filter[] = "si.id in (".join(',', $tmp['sku_id_list']).")";				
					$this->data['pregen_sku_data'] = $tmp;
					
					if($tmp && !$tmp['open_by_user_id']){
						// it is the first people who open
						$con->sql_query("update vendor_stock_reorder_sku set open_by_user_id=".mi($sessioninfo['id'])." where branch_id=".$this->branch_id." and vendor_id=".mi($vendor_id)." and category_id=$category_id");
					}
					
					unset($tmp);
				}else{
					$err[] = "Pre-generate data not found for this vendor.";
				}
			}
		}
		
		$order_by = '';
		if($sort_by){
			if(!$this->sort_option[$sort_by]){
				$err[] = "Invalid Sorting";
			}
			if($sort_order!= 'asc' && $sort_order != 'desc')	$sort_order = 'asc';
			
			$order_by = "order by $sort_by $sort_order";
		}
		
		if($err){   // got error
			if(defined('TERMINAL')){
				print_r($err);
			}else{
				$smarty->assign('err', $err);
			}
			return false;
		}
		
		if(!$con_multi)	$con_multi = new mysql_multi();
		if($vendor_id && $reorder_type=='less_then_grace_period'){
			// must hv grace period
			$this->get_vendor_info(array($vendor_id));
			if($this->tmp['vendor_info'][$vendor_id]['grace_period']<=0){
				
				$filter[] = "si.sku_id=-1";	// make query search no result
				$no_need_chk_last_vendor_query = true;
				if($this->store_vendor_sku_list)	return;
			}
		}
		
		
		if($by_last_vendor && $vendor_id && !$no_need_chk_last_vendor_query){	// need filter by last vendor and already know selected vendor
			$tmp_filter = array();
			if($this->data['pregen_sku_data']['sku_id_list'])	$tmp_filter[] = "si.id in (".join(',', $this->data['pregen_sku_data']['sku_id_list']).")";
			$tmp_filter[] = "vsh.from_date=0 and vsh.to_date=0 and cc.p$lv=$category_id";
			
			$tmp_filter = "where ".join(' and ', $tmp_filter);
			
			$con_multi->sql_query("select si.sku_id, vsh.vendor_id as last_vendor_id
			from vendor_sku_history_b".$this->branch_id." vsh 
			join sku_items si on si.id=vsh.sku_item_id
			join sku on sku.id=si.sku_id
			join category_cache cc on cc.category_id=sku.category_id
			$tmp_filter
			group by si.sku_id
			having last_vendor_id=$vendor_id
			order by vsh.from_date desc");
			$tmp_sku_id_list = array();
			while($r = $con_multi->sql_fetchassoc()){
				$tmp_sku_id_list[] = mi($r['sku_id']);
			}
			$con_multi->sql_freeresult();
			if($tmp_sku_id_list)	$filter[] = "si.sku_id in (".join(',', $tmp_sku_id_list).")";
			else	$filter[] = "si.sku_id=-1";
			$already_check_last_vendor = true;
		}
		
		$filter[] = "cc.p$lv=$category_id";

		if($brand_id)	$filter[] = "sku.brand_id=$brand_id";
		$filter[] = "si.active=1 and (si.block_list not like '%i:".$this->branch_id.";s:2:\"on\";%' or si.block_list is null or si.block_list='')";
		if($config['enable_no_inventory_sku']){
			//$filter[] = "(sku.no_inventory='no' or (sku.no_inventory='inherit' and cc.no_inventory='no'))";
		}

		$filter = "where ".join(' and ', $filter);

		$sql = "select si.*, sku.vendor_id, ctn_1_uom.fraction as ctn_1_uom_fraction, packing_uom.fraction as packing_uom_fraction, sku.po_reorder_qty_min, sku.po_reorder_qty_max,sku.po_reorder_moq,sku.po_reorder_notify_user_id, sku.po_reorder_qty_by_branch, packing_uom.code as packing_uom_code, ctn_1_uom.code as ctn_1_uom_code, si.po_reorder_qty_min as si_po_reorder_qty_min, si.po_reorder_qty_max as si_po_reorder_qty_max, si.po_reorder_moq as si_po_reorder_moq, si.po_reorder_notify_user_id as si_po_reorder_notify_user_id,
		sku.po_reorder_by_child, si.is_parent
		from sku_items si
		left join sku on sku.id=si.sku_id
		left join category_cache cc on cc.category_id=sku.category_id
		left join uom packing_uom on packing_uom.id=si.packing_uom_id
		left join uom ctn_1_uom on ctn_1_uom.id=si.ctn_1_uom_id
		$filter $order_by";
		//print $sql;
		$q1 = $con_multi->sql_query($sql);
		$print_flush_counter = 0;
		while($r = $con_multi->sql_fetchassoc($q1)){
			if($print_flush_content){
				$print_flush_counter++;
				if($print_flush_counter>=5){
					print "<span style='display:none;'>. </span>";
					$print_flush_counter = 0;
				}				
			}
		    $show_this_item = false;
		    $sku_id = mi($r['sku_id']);
		    $sid = mi($r['id']);
			$master_vendor_id = mi($r['vendor_id']);
			$po_reorder_qty_by_branch = $sid_filter = $vendor_arr = array();
			$last_vendor_id = 0;
			
			if(!$r['po_reorder_by_child']){
				if(!$r['is_parent']) continue;
				$po_reorder_qty_by_branch = unserialize($r['po_reorder_qty_by_branch']);
				$sid_filter[] = "sku_id = ".$sku_id;
			}else{
			
				$params = array();
				$params['sku_item_id'] = $sid;
				$params['sku_id'] = $sku_id;
				$params['si_po_reorder_qty_min'] = $r['si_po_reorder_qty_min'];
				$params['si_po_reorder_qty_max'] = $r['si_po_reorder_qty_max'];
				$params['si_po_reorder_moq'] = $r['si_po_reorder_moq'];
				$params['si_po_reorder_notify_user_id'] = $r['si_po_reorder_notify_user_id'];
				$params['branch_id'] = $this->branch_id;
				$po_reorder_qty_by_branch = $this->load_po_reorder_qty_by_branch($params);
				$sid_filter[] = "id = ".$sid;
			}
			$key_id = $r['id'];
			
			$po_reorder_min_qty = 0;
			$po_reorder_max_qty = 0;
			$po_reorder_moq = 0;
			$po_reorder_notify_user_id = 0;
			if($po_reorder_qty_by_branch['min'][$this->branch_id] || $po_reorder_qty_by_branch['max'][$this->branch_id] || $po_reorder_qty_by_branch['moq'][$this->branch_id]){ // if found got set by branch
				$r['po_reorder_qty_min'] = $po_reorder_min_qty = $po_reorder_qty_by_branch['min'][$this->branch_id];
				$r['po_reorder_qty_max'] = $po_reorder_max_qty = $po_reorder_qty_by_branch['max'][$this->branch_id];
				$r['po_reorder_moq'] = $po_reorder_moq = $po_reorder_qty_by_branch['moq'][$this->branch_id];
				$r['po_reorder_notify_user_id'] = $po_reorder_notify_user_id = $po_reorder_qty_by_branch['notify_user_id'][$this->branch_id];
			}elseif(!$r['po_reorder_by_child']){ // load from master
				$po_reorder_min_qty = $r['po_reorder_qty_min'];
				$po_reorder_max_qty = $r['po_reorder_qty_max'];
				$po_reorder_moq = $r['po_reorder_moq'];
				$po_reorder_notify_user_id = $r['po_reorder_notify_user_id'];
			}
			// get sku item id list
			$sid_filter = join(",", $sid_filter);
			$con_multi->sql_query("select GROUP_CONCAT(id) as sid_str from sku_items where $sid_filter and active=1");
			$sid_str = trim($con_multi->sql_fetchfield(0));
			$con_multi->sql_freeresult();
			
			if(!$sid_str)   continue;   // no sid??
			
			// check vendor sku history
			if($use_pregen_sku){
				$vendor_arr[$vendor_id] = $vendor_id;
                $show_this_item = true;
			}else{
				if($by_last_vendor){
					if($already_check_last_vendor){
						$last_vendor_id = $vendor_id;
					}else{
						// only categorize sku into last vendor
						//$sql = "select vendor_id
						//from vendor_sku_history where branch_id=".$this->branch_id." and sku_item_id in ($sid_str) order by added desc limit 1";
						$sql = "select vendor_id from vendor_sku_history_b".$this->branch_id." where sku_item_id in ($sid_str) and from_date=0 and to_date=0 order by from_date desc limit 1";
		                $con_multi->sql_query($sql);
		                $last_vendor_id = mi($con_multi->sql_fetchfield(0));
		                $con_multi->sql_freeresult();
					}
				    	                
	                if(!$last_vendor_id)    $last_vendor_id = $master_vendor_id;
	                
	                if($vendor_id && $vendor_id != $last_vendor_id) continue;    // got select vendor
	                $vendor_arr[$last_vendor_id] = $last_vendor_id;
	                $show_this_item = true;
				}else{
				    // put sku into all vendor which the item got history
	                $con_multi->sql_query("select distinct(vendor_id) from vendor_sku_history_b".$this->branch_id." where sku_item_id in ($sid_str)".($vendor_id ? ' and vendor_id='.$vendor_id : ''));
					while($v = $con_multi->sql_fetchassoc()){
					    $vid = mi($v['vendor_id']);
					    $vendor_arr[$vid] = $vid;
						$show_this_item = true;
					}
					$con_multi->sql_freeresult();
				}
			}
			
			// check master vendor
			if((!$vendor_id || $master_vendor_id==$vendor_id) && !$by_last_vendor){
			    $vendor_arr[$master_vendor_id] = $master_vendor_id;
                $show_this_item = true;
			}
			
			if(!$show_this_item)    continue;   // this item is not in the report
			
			// get stock balance
			if($this->reorder_by_branch){
				// reorder branch stock
				$stock_bal = $this->get_sku_stock_balance($this->reorder_bid, $sid_str);
				if($stock_bal['by_branch']){
					foreach($stock_bal['by_branch'] as $deliver_bid => $branch_stock){
						$r['stock_by_branch'][$deliver_bid] += $branch_stock['qty'];
						$r['stock_by_branch']['total'] += $branch_stock['qty'];
						if($deliver_bid == $this->branch_id){
							$r['qty'] += $branch_stock['qty'];
						}	
					}
				}
				
				// HQ Stock
				if(isset($stock_bal['by_branch'][$this->branch_id])){
					$r['hq_stock'] = $stock_bal['by_branch'][$this->branch_id]['qty'];
				}else{					
					$stock_bal = $this->get_sku_stock_balance(array($this->branch_id), $sid_str);
					$r['hq_stock'] = $stock_bal['total']['qty'];
				}
				
			}else{
				$stock_bal = $this->get_sku_stock_balance(array($this->branch_id), $sid_str);
				$r['qty'] += $stock_bal['total']['qty'];
			}
			
			$today = date("Y-m-d");
			$last_30_day = date("Y-m-d", strtotime("-30 day", time()));
			
			// fix last 30 days pos
			$r['l30d_pos'] = 0;
			foreach($this->reorder_bid as $bid){
				$qty = $this->get_sales_range_qty($bid, $sid_str, $last_30_day, $today);
				$r['l30d_pos'] += $qty;
				
				// store last 30 days pos by branch, only need if reorder type is "less_than_sales" or "less_then_grace_period"
				if($this->reorder_by_branch && ($reorder_type == "less_than_sales" || $reorder_type == "less_then_grace_period")){
					$r['l30d_pos_by_branch'][$bid] += $qty;
					//$r['l30d_pos_by_branch']['total'] += $qty;
				}
			}
			
			// fix last 30 days grn
			$r['l30d_grn'] = $this->get_grn_range_qty($this->branch_id, $sid_str, $last_30_day, $today);
			if($this->reorder_by_branch){
				foreach($this->reorder_bid as $bid){
					$qty = $this->get_grn_range_qty($bid, $sid_str, $last_30_day, $today);
					$r['l30d_grn_by_branch'][$bid] += $qty;
					$r['l30d_grn_by_branch']['total'] += $qty;
				}
			}			
					
			// get not yet deliver PO
			$pending_po = $this->get_sku_pending_po($sku_id, $sid_str);
			if($pending_po){
				$r['po_qty'] = $pending_po['total']['po_qty'];
				if($this->reorder_by_branch){
					foreach($pending_po['by_branch'] as $deliver_bid => $branch_po){
						if(in_array($deliver_bid, $this->reorder_bid)){
							$r['po_qty_by_branch'][$deliver_bid] += $branch_po['po_qty'];
							$r['po_qty_by_branch']['total'] += $branch_po['po_qty'];
						}						
					}
				}
			}
			
			// get not yet checkout DO
			$pending_do = $this->get_sku_pending_do($sku_id, $sid_str);
			if($pending_do){
				$r['do_qty'] = $pending_do['total']['do_qty'];
				if($this->reorder_by_branch){
					foreach($pending_do['by_branch'] as $deliver_bid => $branch_do){
						if(in_array($deliver_bid, $this->reorder_bid)){
							$r['do_qty_by_branch'][$deliver_bid] += $branch_do['do_qty'];
							$r['do_qty_by_branch']['total'] += $branch_do['do_qty'];
						}
					}
				}
			}
			
			// get uncheckout gra
			$pending_gra = $this->get_sku_pending_gra($sku_id, $sid_str);
			if($pending_gra){
				$r['gra_qty'] = $pending_gra['total']['gra_qty'];
				if($this->reorder_by_branch){
					foreach($pending_gra['by_branch'] as $deliver_bid => $branch_gra){
						if(in_array($deliver_bid, $this->reorder_bid)){
							$r['gra_qty_by_branch'][$deliver_bid] += $branch_gra['gra_qty'];
							$r['gra_qty_by_branch']['total'] += $branch_gra['gra_qty'];
						}
					}
				}
			}
			
			// get DO Request
			if(BRANCH_CODE != 'HQ'){
				$do_request = $this->get_sku_do_request($sku_id, $sid_str);
				if($do_request){
					$r['do_request_qty'] = $do_request['total_qty'];
				}
			}
			
			$r['suggest_po_qty'] = $r['l30d_pos'] - $r['qty'] - $r['po_qty'] - $r['do_qty'] + $r['gra_qty'] - $r['do_request_qty'];
			if($this->reorder_by_branch){
				foreach($this->reorder_bid as $bid){
					$r['suggest_po_qty_by_branch'][$bid] = $r['l30d_pos_by_branch'][$bid] - $r['stock_by_branch'][$bid] - $r['po_qty_by_branch'][$bid] - $r['do_qty_by_branch'][$bid] + $r['gra_qty_by_branch'][$bid];
				}
			}
			
			// if got po reorder max qty, if not reach than make it reach
			// ps: reorder by branch will not check reorder min & max qty
			//if(($r['po_qty']+$r['suggest_po_qty']+$r['qty']+$r['do_qty'])<$po_reorder_max_qty){
			//	$r['suggest_po_qty'] = $po_reorder_max_qty-$r['po_qty']-$r['qty']-$r['do_qty'];
			//}
				

		    switch($reorder_type){
				case 'less_than_sales':
					// only pass if stock balance + po already more than last 30 days sales
					//if(BRANCH_CODE == 'HQ'){    // get other branch sales
						//$l30d_pos = $this->get_last_30_d_pos($reorder_bid, $sid_str);
						//$r['l30d_pos'] = $l30d_pos['total']['qty'];
						//$r['suggest_po_qty'] = $r['l30d_pos'] - $r['qty'] - $r['po_qty'] - $r['do_qty'];
					//}
					
					if($this->reorder_by_branch){
						//if(($r['stock_by_branch']['total'] + $r['po_qty_by_branch']['total'] + $r['do_qty_by_branch']['total'])>=$r['l30d_pos'])   continue 2;
						foreach($this->reorder_bid as $bid){
							$r['suggest_po_qty_by_branch'][$bid] = $r['l30d_pos_by_branch'][$bid] - ($r['stock_by_branch'][$bid] + $r['po_qty_by_branch'][$bid] + $r['do_qty_by_branch'][$bid] - $r['gra_qty_by_branch'][$bid]);
							if($r['suggest_po_qty_by_branch'][$bid]<0)  $r['suggest_po_qty_by_branch'][$bid] = 0;
						}
					}else{
						if(($r['qty'] + $r['po_qty'] + $r['do_qty'] - $r['gra_qty'] + $r['do_request_qty'])>=$r['l30d_pos'])   continue 2;
					}
				    
				    break;
				case 'less_than_po_reorder_min':
					// if got po reorder max qty, if not reach than make it reach
					// ps: reorder by branch will not check reorder min & max qty
					
					if(($r['qty'] + $r['po_qty'] + $r['do_qty'] - $r['gra_qty'] + $r['do_request_qty'])>=$po_reorder_min_qty)   continue 2;
					
					if($_REQUEST['order_by_moq']){
						if($po_reorder_moq > 0){
							if($po_reorder_moq + $r['qty'] + $r['po_qty'] + $r['do_qty'] - $r['gra_qty'] + $r['do_request_qty'] <= $po_reorder_max_qty){
								if($r['qty'] < 0){
									if(($po_reorder_moq + $r['qty'] + $r['po_qty'] + $r['do_qty'] - $r['gra_qty'] + $r['do_request_qty'])< ($po_reorder_max_qty + abs($r['qty']))){
										$r['suggest_po_qty'] = $po_reorder_moq;
									}if(($po_reorder_moq + $r['qty'] + $r['po_qty'] + $r['do_qty'] - $r['gra_qty'] + $r['do_request_qty'])> ($po_reorder_max_qty + abs($r['qty']))){
										continue 2;	
									}
								}else{
									$r['suggest_po_qty'] = $po_reorder_moq;
								}	
							}						
							if(($po_reorder_moq + $r['qty'] + $r['po_qty'] + $r['do_qty'] - $r['gra_qty'] + $r['do_request_qty'])> $po_reorder_max_qty)   continue 2;	
						}else{
							//if(($r['po_qty']+$r['suggest_po_qty']+$r['qty']+$r['do_qty']-$r['gra_qty']+$r['do_request_qty'])<$po_reorder_max_qty){
								$r['suggest_po_qty'] = $po_reorder_max_qty-$r['po_qty']-$r['qty']-$r['do_qty']+$r['gra_qty']-$r['do_request_qty'];
							//}
						}
					}else{
						//if(($r['po_qty']+$r['suggest_po_qty']+$r['qty']+$r['do_qty']-$r['gra_qty']+$r['do_request_qty'])<$po_reorder_max_qty){
							$r['suggest_po_qty'] = $po_reorder_max_qty-$r['po_qty']-$r['qty']-$r['do_qty']+$r['gra_qty']-$r['do_request_qty'];
						//}
					}
					
				    break;
				/*case 'sales_range':
					// get sales from selected branch
					foreach($reorder_bid as $bid){
						$qty = $this->get_sales_range_qty($bid, $sid_str, $date_range_from, $date_range_to);
						$r['sales_range_qty'] += $qty;
						
					}
				    
					$r['suggest_po_qty'] = $r['sales_range_qty']-$r['po_qty']-$r['do_qty'];
					if($r['suggest_po_qty']<0)  $r['suggest_po_qty'] = 0;
				    break;*/
				case 'sales_range_plus_do':
					// get sales from selected branch
					foreach($this->reorder_bid as $bid){
						$qty = $this->get_sales_range_qty($bid, $sid_str, $date_range_from, $date_range_to);
						$r['sales_range_qty'] += $qty;
						if($this->reorder_by_branch){
							$r['sales_range_qty_by_branch'][$bid] += $qty;
						}
					}
					foreach($this->reorder_bid as $bid){
						$qty = $this->get_do_range_qty($bid, $sid_str, $date_range_from, $date_range_to);
						$r['do_range_qty'] += $qty;
						
						if($this->reorder_by_branch){
							$r['do_range_qty_by_branch'][$bid] += $qty;
						}
					}
					$r['suggest_po_qty'] = $r['sales_range_qty']+$r['do_range_qty']-$r['qty']-$r['po_qty']-$r['do_qty']+$r['gra_qty']-$r['do_request_qty'];
					if($r['suggest_po_qty']<0)  $r['suggest_po_qty'] = 0;
					
					if($this->reorder_by_branch){
						foreach($this->reorder_bid as $bid){
							$r['suggest_po_qty_by_branch'][$bid] = $r['sales_range_qty_by_branch'][$bid]+$r['do_range_qty_by_branch'][$bid]-$r['stock_by_branch'][$bid]-$r['po_qty_by_branch'][$bid]-$r['do_qty_by_branch'][$bid]+$r['gra_qty_by_branch'][$bid];
							if($r['suggest_po_qty_by_branch'][$bid]<0)  $r['suggest_po_qty_by_branch'][$bid] = 0;
						}
					}
				    break;
				/*case 'do_range':
				    $r['do_range_qty'] = $this->get_do_range_qty($this->branch_id, $sid_str, $date_range_from, $date_range_to);
				    $r['suggest_po_qty'] = $r['do_range_qty']-$r['po_qty']-$r['do_qty'];
					if($r['suggest_po_qty']<0)  $r['suggest_po_qty'] = 0;
					break;*/
				case 'less_then_grace_period':	// by vendor grace period
					$this->get_vendor_info($vendor_arr);
					$tmp_vendor_arr = $vendor_arr;
					$vendor_arr = array();
					
					foreach($tmp_vendor_arr as $k => $vid){	// remove those vendor which dont have grace period
						$grace_period = mi($this->tmp['vendor_info'][$vid]['grace_period']);
						if($grace_period>0){
							$vendor_arr[$k] = $vid;
						}
					}
					
					if(!$vendor_arr)	continue 2;
					
					//$l30d_pos = $this->get_last_30_d_pos($reorder_bid, $sid_str);	// get last 30 days sales
					//$r['l30d_pos'] = $l30d_pos['total']['qty'];	// get last 30 days sales
					
					foreach($vendor_arr as $k => $vid){	// loop for those vendor which got grace period
						$grace_period = mi($this->tmp['vendor_info'][$vid]['grace_period']);
						// qty sold per day * (grace period + 1) - balance
						
						if(!$this->reorder_by_branch){
							$suggest_po_qty = (($r['l30d_pos']/30) * ($grace_period+1)) - $r['qty'] - $r['po_qty'] - $r['do_qty'] + $r['gra_qty'] - $r['do_request_qty'];
							if($suggest_po_qty > 0){
								$r['suggest_po_qty_by_vendor'][$vid] = $suggest_po_qty;
							}	
							else{
								unset($vendor_arr[$k]);
							}
						}else{
							$suggest_po_qty = 0;
							foreach($this->reorder_bid as $bid){
								$suggest_po_qty = (($r['l30d_pos_by_branch'][$bid]/30) * ($grace_period+1)) - $r['stock_by_branch'][$bid] - $r['po_qty_by_branch'][$bid] - $r['do_qty_by_branch'][$bid] + $r['gra_qty_by_branch'][$bid];
								if($suggest_po_qty <= 0)	continue;
								
								$r['suggest_po_qty_by_vendor_by_branch'][$vid][$bid] = $suggest_po_qty;
								$r['suggest_po_qty_by_vendor_by_branch'][$vid]['total'] += $suggest_po_qty;
							}
							
							if(!$r['suggest_po_qty_by_vendor_by_branch'][$vid]['total']){
								unset($vendor_arr[$k]);
							}
						}
					}
					
					if(!$this->reorder_by_branch){
						if(!$r['suggest_po_qty_by_vendor'])	continue 2;
					}else{
						if(!$r['suggest_po_qty_by_vendor_by_branch'])	continue 2;
					}
					break;
				default:
					break;
			}
			
			if(!$this->reorder_by_branch){
				if(!$this->use_vendor_po_data){
					if($r['suggest_po_qty']<=0)	continue;	// no need make PO
				}else{
					if(!$r['suggest_po_qty_by_vendor'])	continue;	// no need make PO
				}	
			}else{
				if(!$this->use_vendor_po_data){
					foreach($this->reorder_bid as $bid){
						if($r['suggest_po_qty_by_branch'][$bid]<=0)	$r['suggest_po_qty_by_branch'][$bid] = 0;
						$r['suggest_po_qty_by_branch']['total'] += $r['suggest_po_qty_by_branch'][$bid];
					}
					if($r['suggest_po_qty_by_branch']['total']<=0)	continue;	// no need make PO
				}else{
					if(!$r['suggest_po_qty_by_vendor_by_branch'])	continue;	// no need make PO
				}
			}			
			
			if($r['ctn_1_uom_fraction']>0){
				$r['po_uom_id'] = $r['ctn_1_uom_id'];
				$r['po_uom_fraction'] = $r['ctn_1_uom_fraction'];
				$r['po_uom_code'] = $r['ctn_1_uom_code'];
			}else{
                $r['po_uom_id'] = $r['packing_uom_id'];
				$r['po_uom_fraction'] = $r['packing_uom_fraction'];
				$r['po_uom_code'] = $r['packing_uom_code'];
			}
			
			if($this->use_vendor_po_data){
				if(!$this->reorder_by_branch){
					foreach($r['suggest_po_qty_by_vendor'] as $vid => $suggest_po_qty){
						$r['suggest_po_ctn_by_vendor'][$vid] = ceil($suggest_po_qty/$r['po_uom_fraction']);
					}
				}else{
					foreach($r['suggest_po_qty_by_vendor_by_branch'] as $vid => $suggest_po_qty_by_branch){
						foreach($this->reorder_bid as $bid){
							$branch_ctn = ceil($suggest_po_qty_by_branch[$bid]/$r['po_uom_fraction']);
							$r['suggest_po_ctn_by_vendor_by_branch'][$vid][$bid] = $branch_ctn;
							$r['suggest_po_ctn_by_vendor_by_branch'][$vid]['total'] += $branch_ctn;
						}
					}
					
				}
			}else{
				if(!$this->reorder_by_branch){
					$r['suggest_po_ctn'] = ceil($r['suggest_po_qty']/$r['po_uom_fraction']);
				}else{
					foreach($this->reorder_bid as $bid){
						$branch_ctn = ceil($r['suggest_po_qty_by_branch'][$bid]/$r['po_uom_fraction']);
						$r['suggest_po_ctn_by_branch'][$bid] = $branch_ctn;
						$r['suggest_po_ctn_by_branch']['total'] += $branch_ctn;
					}
				}
			}
						
			foreach($vendor_arr as $vid){   // put this sku into vendor data
                $this->data['vendor_data'][$vid]['sku_item'][$key_id] = $key_id;
			}
			$this->data['sku_data'][$key_id]['info'] = $r;
		}
		$con_multi->sql_freeresult($q1);
		
		// get vendor info
		$vid_to_search = array();
		if(isset($this->data['vendor_data'])){
			foreach($this->data['vendor_data'] as $vid=>$r){
				if($this->tmp['vendor_info'][$vid]){
					$this->data['vendor_data'][$vid]['info'] = $this->tmp['vendor_info'][$vid];
					unset($this->tmp['vendor_info'][$vid]);
				}else{
					$vid_to_search[] = $vid;
				}
			}
		}
		$this->get_vendor_info($vid_to_search, false);
		unset($vid_to_search);
		
		if(isset($this->data['vendor_data']) && !$_REQUEST['inc_inactive_vendor']){
			foreach($this->data['vendor_data'] as $vid=>$r){
				if(!$this->data['vendor_data'][$vid]['info']['active']) unset($this->data['vendor_data'][$vid]);
			}
		}
		
		
		if($this->store_vendor_sku_list){
			return;
		}else{
			$con_multi->close_connection();
			unset($con_multi);
		}
		
		if($this->data['pregen_sku_data']){
			if($this->data['pregen_sku_data']['open_by_user_id']){
				$con->sql_query("select u from user where id=".mi($this->data['pregen_sku_data']['open_by_user_id']));
				$this->data['pregen_sku_data']['open_by_user_u'] = $con->sql_fetchfield(0);
				$con->sql_freeresult();
			}
		}
		
		if(!defined('TERMINAL') && !$this->store_vendor_sku_list){
			if($this->reorder_by_branch){
				$this->data['reorder_by_branch'] = 1;
				$this->data['show_reorder_details_by_branch'] = $show_reorder_details_by_branch;
				$this->data['reorder_bid'] = $this->reorder_bid;
				$this->data['reorder_branch_count'] = count($this->reorder_bid);
			}
			$this->data['use_vendor_po_data'] = $this->use_vendor_po_data;
			
			$smarty->assign('data', $this->data);
			$smarty->assign('report_title', join('&nbsp;&nbsp;&nbsp;&nbsp;', $report_title));
		}
	}
	
	private function get_vendor_info($vid_list, $assign_to_tmp = true){
		global $con;
		if(!$vid_list)	return;
		$real_vid_list = array();
		foreach($vid_list as $vid){	// filter out those vendor which already get
			if($assign_to_tmp){
				if(!isset($this->tmp['vendor_info'][$vid]))	$real_vid_list[] = $vid;
		    }else{
		    	if(!isset($this->data['vendor_data'][$vid]['info']))	$real_vid_list[] = $vid;
		    }
		}
		
		if(!$real_vid_list)	return;
		
		$con->sql_query("select id,code,description,grace_period,active from vendor where id in (".join(',', $real_vid_list).")");
		while($r = $con->sql_fetchassoc()){
		    $vid = mi($r['id']);
		    	
		    if($assign_to_tmp){
				$this->tmp['vendor_info'][$vid] = $r;
		    }else{
		    	$this->data['vendor_data'][$vid]['info'] = $r;
		    }
        }
		$con->sql_freeresult();
	}
	
	private function get_sku_pending_po($sku_id, $sid_str){
		global $con, $smarty, $sessioninfo, $config, $con_multi;
		
		$filter = array();
		
		if ($_REQUEST['incl_not_approved']) $filter[] = 'po.status in (0,1,2) and po.approved in (0,1)';
		else $filter[] = 'po.status in (1) and po.approved in (1)';
		
		if(!$sid_str)   return false;
		if(!$con_multi) $con_multi = new mysql_multi();
		// get not yet deliver PO
		$bid = mi($this->branch_id);
		
		$filter[] = "po.active=1 and po.delivered=0 and pi.sku_item_id in ($sid_str)";
		
		$filter_or = array();
		if(!$this->reorder_by_branch){
			$filter_or[] = "po.branch_id=$bid";
			if(BRANCH_CODE != 'HQ'){
				$filter_or[] = "(po.branch_id=1 and po.deliver_to like ".ms('%:"'.$bid.'";%').")";
			}
		}else{
			// check create from sub branch only
			$create_from_bid = $this->reorder_bid;
			if(($key = array_search(1, $create_from_bid)) !== false) {
				unset($create_from_bid[$key]);
			}
			
			if($create_from_bid)	$filter_or[] = "po.branch_id in (".join(',', $create_from_bid).")";
			
			// check sent to branch
			$filter_or[] = "po.po_branch_id in (".join(',', $this->reorder_bid).")";
			
			// check multiple deliver
			$str_deliver = '';
			foreach($this->reorder_bid as $deliver_bid){
				if($str_deliver)	$str_deliver .= " or ";
				$str_deliver .= "po.deliver_to like ".ms('%:"'.$deliver_bid.'";%');
			}
			$filter_or[] = "(po.branch_id=1 and ($str_deliver))";
			
		}
		$filter[] = "(".join(" or ", $filter_or).")";
		$filter = join(' and ', $filter);
		
		$sql = "select pi.*, po.po_no,po.deliver_to, po.active, po.status, po.approved, po.hq_po_id, branch.report_prefix, uom.fraction as packing_uom_fraction, po.po_branch_id
from po
left join po_items pi on pi.branch_id=po.branch_id and pi.po_id=po.id
left join branch on branch.id=po.branch_id
join sku_items si on si.id=pi.sku_item_id
left join uom on uom.id=si.packing_uom_id
where $filter";
		//print $sql."<br />";
        $con_multi->sql_query($sql);
        $pending_po = array();
        $last_key = '';
        while($pi = $con_multi->sql_fetchassoc()){
			$pi['deliver_to'] = unserialize($pi['deliver_to']);
			$key = $pi['branch_id'].'_'.$pi['po_id'];
			$po_qty = 0;
			
			if($last_key != $key){
                $pending_po['po_data'][$key] = $pi;
                $pending_po['po_data'][$key]['highlight_sku_id'] = $sku_id;
			}
			
			if($pi['deliver_to']){
			    $pi['qty_allocation'] = unserialize($pi['qty_allocation']);
			    $pi['qty_loose_allocation'] = unserialize($pi['qty_loose_allocation']);
			    $pi['foc_allocation'] = unserialize($pi['foc_allocation']);
			    $pi['foc_loose_allocation'] = unserialize($pi['foc_loose_allocation']);

				foreach($pi['deliver_to'] as $deliver_bid){
					if(BRANCH_CODE != 'HQ' && $deliver_bid != $bid)	continue;
					
					$branch_po_qty = (($pi['qty_allocation'][$deliver_bid]*$pi['order_uom_fraction'])+$pi['qty_loose_allocation'][$deliver_bid]+($pi['foc_allocation'][$deliver_bid]*$pi['order_uom_fraction'])+$pi['foc_loose_allocation'][$deliver_bid])*$pi['packing_uom_fraction'];
					
					if($this->reorder_by_branch){
						$pending_po['by_branch'][$deliver_bid]['po_qty'] += $branch_po_qty;
						
						if($this->store_pending_data_in_details){
							$pending_po['po_data'][$key]['by_branch'][$deliver_bid]['po_qty'] += $branch_po_qty;
						}
					}
					$po_qty += $branch_po_qty;
				}
				
			}else{
				$deliver_bid = $pi['po_branch_id'] ? $pi['po_branch_id'] : $pi['branch_id'];
				if(BRANCH_CODE == 'HQ' || $deliver_bid == $bid){
					$po_qty = (($pi['qty']*$pi['order_uom_fraction'])+$pi['qty_loose']+($pi['foc']*$pi['order_uom_fraction'])+$pi['foc_loose'])*$pi['packing_uom_fraction'];
					if($this->reorder_by_branch){
						
						$pending_po['by_branch'][$deliver_bid]['po_qty'] += $po_qty;
						
						if($this->store_pending_data_in_details){
							$pending_po['po_data'][$key]['by_branch'][$deliver_bid]['po_qty'] += $po_qty;
						}
					}
				}
				
			}
			
			if($last_key != $key){
                $last_key = $key;
			}
            
			if(!$po_qty){
				unset($pending_po['po_data'][$key]);
			}else{
				$pending_po['po_data'][$key]['po_qty'] += $po_qty;
				$pending_po['total']['po_qty'] += $po_qty;
			}
		}
		$con_multi->sql_freeresult();
		
		//if($pending_po)	print_r($pending_po);
		return $pending_po;
	}
	
	function ajax_show_pending_po(){
		global $con, $smarty, $sessioninfo, $config, $con_multi;
		
		$sid = mi($_REQUEST['sid']);
		$po_reorder_by_child = mi($_REQUEST['po_reorder_by_child']);
		$this->reorder_by_branch = mi($_REQUEST['reorder_by_branch']);
		if($this->reorder_by_branch)	$this->store_pending_data_in_details = 1;	// need to store details by PO
		$show_bid = mi($_REQUEST['show_bid']);
		$this->reorder_bid = $_REQUEST['submitted_reorder_bid'];
		
		if(!$sid)    die('Invalid SKU ID');
		
		$q1 = $con->sql_query("select * from sku_items where id=$sid");
		$si_info = $con->sql_fetchassoc($q1);
		$con->sql_freeresult($q1);

		$sku_id = $si_info['sku_id'];
		// if found this item is by child
		if($po_reorder_by_child) $filter = "id=$sid";
		else{ // found it is by SKU
			$filter = "sku_id=".mi($sku_id);
		}
		
		// get sku item id list
		$con->sql_query("select GROUP_CONCAT(id) as sid_str from sku_items where $filter");
		$sid_str = trim($con->sql_fetchfield(0));
		$con->sql_freeresult();
		
		if(!$sid_str)   die('Invalid SKU Items');

		//$con_multi = new mysql_multi();
		// get pending PO
		$pending_po = $this->get_sku_pending_po($sku_id, $sid_str);
		//$con_multi->close_connection();
		
		if($show_bid && $pending_po){
			foreach($pending_po['po_data'] as $po_key => $po){
				if(!$po['by_branch'][$show_bid]['po_qty']){
					unset($pending_po['po_data'][$po_key]);
				}
			}
		}
		
		//print_r($pending_po);
		$smarty->assign('pending_po', $pending_po);
		$smarty->assign('reorder_by_branch', $this->reorder_by_branch);
		$smarty->assign('show_bid', $show_bid);
		$smarty->assign('submitted_reorder_bid', $this->reorder_bid);
		$smarty->assign('show_type', 'po');
		$this->display('report.stock_reorder.pending_po.tpl');
	}

	function ajax_generate_po(){
		global $con, $smarty, $sessioninfo, $config, $con_multi, $LANG, $appCore;
		
		$selected_vendor_id = mi($_REQUEST['selected_vendor_id']);
		$cat_id = mi($_REQUEST['category_id']);
		$form = $_REQUEST;
		$bid = mi($this->branch_id);
		$po_date = trim($form['po_date']);
		$delivery_date = trim($form['delivery_date']);
		$cancel_date = trim($form['cancel_date']);
		$is_ibt = mi($form['is_ibt']);
		$this->reorder_by_branch = mi($form['reorder_by_branch']);
		$this->reorder_bid = $_REQUEST['po_deliver_to'];
		
		if(!$this->reorder_by_branch){
			$po_branch_id = BRANCH_CODE == 'HQ' ? mi($_REQUEST['po_branch_id']) : $sessioninfo['branch_id'];
			if(!$po_branch_id)	die("Please select Delivery Branch.");
			
			$str_join_po_branch_data = "left join sku_items_price sip2 on sip2.branch_id=$po_branch_id and sip2.sku_item_id=si.id 
										left join sku_items_cost sic2 on sic2.branch_id=$po_branch_id and sic2.sku_item_id=si.id";
			$str_col_po_branch_data = ",ifnull(sip2.price, si.selling_price) as lastest_selling_price, sic2.qty as stock_balance";
		}else{
			if(!$this->reorder_bid || !is_array($this->reorder_bid))	die("Please select at least one Delivery Branch.");
		}
		
		if($config['enable_gst']){
			$q1 = $con->sql_query("select * from vendor where gst_register not in (0, -1)");
			while($r = $con->sql_fetchassoc($q1)){
				$vendor_gst_list[$r['id']] = $r;
			}
			$con->sql_freeresult($q1);
		}
		
		//print_r($form);exit;
		
		// select single vendor
		if($selected_vendor_id) $vendor_sku[$selected_vendor_id] = $form['vendor_sku'][$selected_vendor_id];
		else    $vendor_sku = $form['vendor_sku'];  // all vendor
		//print_r($vendor_sku);
		
		if(!$vendor_sku)    die('No SKU is found.');
		
		// check dept
		$con->sql_query("select department_id from category where id=$cat_id");
		$dept_id = $con->sql_fetchfield(0);
		$con->sql_freeresult();
		
		if(!$dept_id)   die('Invalid Category ID');
		
		// check delivery and cancel date
		$delivery_date_time = strtotime($delivery_date);
		$cancel_date_time = strtotime($cancel_date);
		
		if(date("Y", $delivery_date_time)<2007)	die("Delivery year cannot early than 2007.");
		if(date("Y", $cancel_date_time)<2007)	die("Cancellation year cannot early than 2007.");
		if($cancel_date_time<=$delivery_date_time)	die("Cancellation date cannot same or early than Delivery date.");
		
		$con->sql_query("select * from uom where fraction = 1 and active = 1 order by id limit 1");
		$uom = $con->sql_fetchassoc();
		$con->sql_freeresult();

		$items = array();
		foreach($vendor_sku as $vid=>$sid_list){
			foreach($sid_list as $sid=>$data){
			    //$sku_id = mi($sku_id);
				if(!$data['generate_po'])   continue;   // this item no need generate
				
				$con->sql_query("select si.*,sku.is_bom, uom.fraction as ctn_1_fraction, ifnull(sic.grn_cost, si.cost_price) as lastest_cost,
				if(if(si.inclusive_tax='inherit',sku.mst_inclusive_tax,si.inclusive_tax)='inherit',cc.inclusive_tax,if(si.inclusive_tax='inherit',sku.mst_inclusive_tax,si.inclusive_tax)) as inclusive_tax $str_col_po_branch_data
				from sku_items si
				left join sku on sku.id=si.sku_id
				left join category_cache cc on cc.category_id=sku.category_id
				left join uom on uom.id=si.ctn_1_uom_id
				left join sku_items_cost sic on sic.branch_id=$bid and sic.sku_item_id=si.id
				$str_join_po_branch_data
				where si.id=$sid");
				$si = $con->sql_fetchassoc();
				$con->sql_freeresult();
				
				$si['po_uom_id'] = $data['po_uom_id'];
				$si['po_uom_fraction'] = $data['po_uom_fraction'];
				$si['suggest_po_qty'] = $data['suggest_po_qty'];
				if($this->reorder_by_branch)	$si['suggest_po_qty_by_branch'] = $data['suggest_po_qty_by_branch'];
				
				if(!$si)    die('SKU ITEM ID#'.$sid.' cannot find this item!');
				
				/*if($config['sku_bom_additional_type'] && $si['is_bom'] && $si['bom_type']=='package'){
					$q_bi = $con->sql_query("select bi.sku_item_id as sid,bi.qty from bom_items bi where bi.bom_id=".mi($sid)." order by bi.sku_item_id");
					while($r = $con->sql_fetchassoc($q_bi)){
						$con->sql_query("select si.*,sku.is_bom, uom.fraction as ctn_1_fraction, ifnull(sip.price, si.selling_price) as lastest_selling_price, ifnull(sic.grn_cost, si.cost_price) as lastest_cost, sic.qty as stock_balance
						from sku_items si
						left join sku on sku.id=si.sku_id
						left join uom on uom.id=si.ctn_1_uom_id
						left join sku_items_price sip on sip.branch_id=$bid and sip.sku_item_id=si.id
						left join sku_items_cost sic on sic.branch_id=$bid and sic.sku_item_id=si.id
						where si.id=".$r['sid']);
						$si = $con->sql_fetchassoc();
						$con->sql_freeresult();

						if(!$si)    die('SKU ITEM ID#'.$r['sid'].' cannot find this item!');

						$this->process_si($si,$sid,$vid,$po_date,$dept_id,$uom);
						$items[$vid]['item_list'][] = $si;
						// mark if got purchase agreement
						if($si['pa'])	$items[$vid]['pa'] = 1;
					}
					$con->sql_freeresult($q_bi);
				}
				else{*/
				if($config['enable_po_agreement']){
					$this->process_purchase_agreement_si($si,$sid,$vid,$po_date,$dept_id,$uom);
				}
					
				$items[$vid]['item_list'][$sid] = $si;
				// mark if got purchase agreement
				if($si['pa']){
					$items[$vid]['pa'] = 1;
				}
				//}
			}
		}

		
		if(!$items) die('No PO to generate.');
		
		// check branch is under gst
		if($config['enable_gst']){
			$prms = array();
			$prms['branch_id'] = $sessioninfo['branch_id'];
			$prms['date'] = $po_date;
			$branch_is_under_gst = check_gst_status($prms);
		}
		
		// generate details by each branch
		if($this->reorder_by_branch){
			foreach($items as $vid=>$v_info){
				$item_branch_bid_list = array();
				foreach($v_info['item_list'] as $si){	// loop the items
					$sid = $si['id'];
					foreach($this->reorder_bid as $deliver_bid){	// loop branch
						if($si['suggest_po_qty_by_branch'][$deliver_bid]>0){
							$items[$vid]['by_branch'][$deliver_bid]['sid_list'][$sid] = $sid;	// store sku_item_id
							$items[$vid]['by_branch'][$deliver_bid]['total_qty'] += $si['suggest_po_qty_by_branch'][$deliver_bid];	// sum up total qty by branch
							
							if($si['pa']){
								// mark this branch need to create po from purchase agreement
								$items[$vid]['pa_by_branch'][$deliver_bid] = 1;
							}
							$item_branch_bid_list[$deliver_bid] = $deliver_bid;
						}
					}
				}
				
				if($item_branch_bid_list){
					foreach($v_info['item_list'] as $si){	// loop the items
						$sid = $si['id'];
						// get selling price by branch
						$q_sip = $con->sql_query("select b.id as branch_id, ifnull(sip.price, si.selling_price) as lastest_selling_price, sic.qty as stock_balance
						from branch b
						join sku_items si on si.id=$sid
						left join sku_items_price sip on sip.branch_id=b.id and sip.sku_item_id=si.id
						left join sku_items_cost sic on sic.branch_id=b.id and sic.sku_item_id=si.id						
						where b.id in (".join(',', $item_branch_bid_list).")");
						while($r = $con->sql_fetchassoc($q_sip)){
							$items[$vid]['item_list'][$sid]['selling_price_by_branch'][$r['branch_id']] = $r['lastest_selling_price'];
							$items[$vid]['item_list'][$sid]['stock_balance_by_branch'][$r['branch_id']] = $r['stock_balance'];
						}
						$con->sql_freeresult($q_sip);
					}					
				}
			}
		}
		
		
		//print_r($items);exit;
		
		$ret = array();
		//$ret['html'] = "Generated PO<br />";

		// check is approval
		$app_params = array();
		$params = array();
		$app_params['type'] = 'PURCHASE_ORDER';
        $app_params['branch_id'] = $sessioninfo['branch_id'];
        $app_params['user_id'] = $sessioninfo['id'];
        $app_params['reftable'] = 'po';
        $app_params['dept_id'] = $dept_id;
        $params = $app_params;
        $params['check_is_approval'] = true;

		$is_approval = is_last_approval($params);
		
		if(!$is_approval){
			if(!$appCore->poManager->gotApprovalFlow($sessioninfo['branch_id'], $dept_id)){
				die(str_replace("<br />", "\n", $LANG['PO_NO_APPROVAL_FLOW']));
			}
		}

		foreach($items as $vid=>$v_info){
		    $po = $po_list = array();
			$tmp_purchase_agreement_info = array();
			$single_branch_po = $this->reorder_by_branch ? false : true;
			$bid_can_group_together = array();
			
			if($v_info['pa'])	$single_branch_po = true;	// if got purchase agreement, must create po by each branch
			
			$po['branch_id'] = $sessioninfo['branch_id'];
			$po['user_id'] = $sessioninfo['id'];
			$po['vendor_id'] = $vid;
		    $po['department_id'] = $dept_id;
			$po['remark2'] = serialize('GENERRATED BY STOCK REORDER REPORT');
			if($config['po_enable_ibt'])	$po['is_ibt'] = $is_ibt;
			$po['po_date'] = $po_date;
			
			if($config['enable_gst']){
				$prms = array();
				$prms['vendor_id'] = $po['vendor_id'];
				$prms['date'] = $po['po_date'];
				$po['is_under_gst'] = check_gst_status($prms);
			
				if(!$input_gst_list) $input_gst_list = construct_gst_list('purchase');
			}
			
			
			if($single_branch_po){	// po only have one branch
				if($this->reorder_by_branch){
					foreach($this->reorder_bid as $deliver_bid){
						if($v_info['by_branch'][$deliver_bid]['total_qty']<=0)	continue;	// no qty for this branch, no need create
						
						if($v_info['pa_by_branch'][$deliver_bid]){
							$po['create_po'] = 0;
							$po['po_branch_id'] = $deliver_bid;
							$po['delivery_date'] = date("d/m/Y", $delivery_date_time);
							$po['cancel_date'] = date("d/m/Y", $cancel_date_time);
							$po['partial_delivery'] = mi($form['partial_delivery']);
							$po_list[] = $po;	// add into list
						}else{
							$bid_can_group_together[] = $deliver_bid;
						}						
					}
				}else{
					if($v_info['pa'])	$po['create_po'] = 0;
					else	$po['create_po'] = 1;
					$po['po_branch_id'] = $po_branch_id;
					$po['delivery_date'] = date("d/m/Y", $delivery_date_time);
					$po['cancel_date'] = date("d/m/Y", $cancel_date_time);
					$po['partial_delivery'] = mi($form['partial_delivery']);
					$po_list[] = $po;	// add into list
				}
			}else{	// one po have multiple deliver branches
				$bid_can_group_together = $this->reorder_bid;
			}
			
			if($bid_can_group_together){
				$po['create_po'] = 1;
				$po['po_branch_id'] = 0;
				$po['deliver_to'] = $po['delivery_date'] = $po['cancel_date'] = $po['partial_delivery'] = array();
				foreach($bid_can_group_together as $deliver_bid){
					if($v_info['by_branch'][$deliver_bid]['total_qty']<=0)	continue;	// no qty for this branch, no need create
					
					$po['deliver_to'][] = $deliver_bid;
					$po['delivery_date'][$deliver_bid] = date("d/m/Y", $delivery_date_time);
					$po['cancel_date'][$deliver_bid] = date("d/m/Y", $cancel_date_time);
					if($form['partial_delivery'])	$po['partial_delivery'][$deliver_bid] = "on";
				}
				$po_list[] = $po;	// add into list
			}
		    
			//print_r($po_list);exit;
			foreach($po_list as $po){
				$create_po = mi($po['create_po']);
				unset($po['create_po']);
				
				// direct create po
				if($create_po){
					$po['added'] = $po['last_update'] = 'CURRENT_TIMESTAMP';
					if(!$is_approval){	// not approval, generate as confirmed, so user cannot edit
						//check is_month_closed
						/*if($config['monthly_closing']){
							$is_month_closed = $appCore->is_month_closed($po_date);
							if($is_month_closed){
								die(sprintf($LANG['DOCUMENT_MONTH_CLOSED'], "PO"));
							}
						}*/
						
						$astat = array();
						$astat = check_and_create_approval2($app_params, $con);
						if(!$astat){	// no approval flow for this department
							die(str_replace("<br />", "\n", $LANG['PO_NO_APPROVAL_FLOW']));
						}
						else{
							$po['approval_history_id']=$astat[0];
						}
						$po['status'] = 1;
					}
					if(is_array($po['deliver_to'])){
						$po['deliver_to'] = serialize($po['deliver_to']);
						$po['delivery_date'] = serialize($po['delivery_date']);
						$po['cancel_date'] = serialize($po['cancel_date']);
						$po['partial_delivery'] = serialize($po['partial_delivery']);
					}

					$con->sql_query("insert into po ".mysql_insert_by_field($po));
					$po_id = $con->sql_nextid();
					
					// unserialize back in order to use
					if($po['deliver_to']){
						$po['deliver_to'] = unserialize($po['deliver_to']);
						// no use, no need unserialize yet, open back if needed
						//$po['delivery_date'] = unserialize($po['delivery_date']);
						//$po['cancel_date'] = unserialize($po['cancel_date']);
						//$po['partial_delivery'] = unserialize($po['partial_delivery']);
					}

					$ret['data'][$vid]['po_id'] = $po_id;
					$ret['data'][$vid]['branch_id'] = $po['branch_id'];
					$ret['po_generated'] = 1;
				}else{
					$tmp_purchase_agreement_info['branch_id'] = $po['branch_id'];
					$tmp_purchase_agreement_info['user_id'] = $sessioninfo['id'];
					$tmp_purchase_agreement_info['header_info'] = serialize($po);
					$tmp_purchase_agreement_info['added'] = 'CURRENT_TIMESTAMP';
					$tmp_purchase_agreement_info['items_info'] = array();
				}
				
				foreach($v_info['item_list'] as $si){
					$sid = $si['id'];
					if($this->reorder_by_branch){
						if($po['po_branch_id']){
							if(!isset($v_info['by_branch'][$po['po_branch_id']]['sid_list'][$sid]))	continue;	// this items no need for this branch
						}elseif($po['deliver_to']){
							$show_item = false;
							foreach($po['deliver_to'] as $deliver_bid){
								if(isset($v_info['by_branch'][$deliver_bid]['sid_list'][$sid])){
									$show_item = true;
									break;
								}
							}
							if(!$show_item)	continue;		// this items no need for all branch
						}
					}
					
					$po_items = array();
					$po_items['branch_id'] = $po['branch_id'];
					if($create_po)	$po_items['po_id'] = $po_id;
					$po_items['user_id'] = $po['user_id'];
					$po_items['sku_item_id'] = $si['id'];
					$po_items['artno_mcode'] = $si['artno'] ? $si['artno'] : $si['mcode'];
					$po_items['selling_uom_id'] = 1;
					$po_items['selling_uom_fraction'] = 1;
					$po_items['order_uom_id'] = $si['po_uom_id'];
					$po_items['order_uom_fraction'] = $si['po_uom_fraction'];
					$po_items['order_price'] = $si['lastest_cost'] * $po_items['order_uom_fraction'];
					
					// cost
					if($po['is_under_gst']){
						// if found got set special vendor gst code, then all items must default choose it
						if($vendor_gst_list[$po['vendor_id']]['gst_register'] > 0){
							$vd_gst = $vendor_gst_list[$form['vendor_id']]['gst_register'];
							foreach($input_gst_list as $tmp_gst_info){
								if($tmp_gst_info['id'] == $vd_gst){
									$po_items['cost_gst_id'] = $tmp_gst_info['id'];
									$po_items['cost_gst_code'] = $tmp_gst_info['code'];
									$po_items['cost_gst_rate'] = $tmp_gst_info['rate'];
									break;
								}
							}
						}else{ // check to get cost GST info
							$input_gst = get_sku_gst("input_tax", $po_items['sku_item_id']);
							if($input_gst){
								$po_items['cost_gst_id'] = $input_gst['id'];
								$po_items['cost_gst_code'] = $input_gst['code'];
								$po_items['cost_gst_rate'] = $input_gst['rate'];
							}else{
								$po_items['cost_gst_id'] = $input_gst_list[0]['id'];
								$po_items['cost_gst_code'] = $input_gst_list[0]['code'];
								$po_items['cost_gst_rate'] = $input_gst_list[0]['rate'];
							}
						}
					}
					
					// check branch is under gst
					if($branch_is_under_gst){
						$output_gst = get_sku_gst("output_tax", $po_items['sku_item_id']);
						$po_items['selling_gst_id'] = $output_gst['id'];
						$po_items['selling_gst_code'] = $output_gst['code'];
						$po_items['selling_gst_rate'] = $output_gst['rate'];
					}
					
					// selling price and stock balance
					if($po['deliver_to']){	// multi branch po
						$po_items['selling_price_allocation'] = $po_items['gst_selling_price_allocation'] = array();
						$po_items['stock_balance'] = array();
						$po_items['qty_allocation'] = $po_items['qty_loose_allocation'] = array();
						
						foreach($po['deliver_to'] as $deliver_bid){	// loop branch
							// selling price
							$po_items['selling_price_allocation'][$deliver_bid] = round($si['selling_price_by_branch'][$deliver_bid], 2);
							// stock balance
							$po_items['stock_balance'][$deliver_bid] = $si['stock_balance_by_branch'][$deliver_bid];
							
							// qty
							if($po_items['order_uom_id']==1 || $po_items['order_uom_fraction'] == 1){
								$po_items['qty_loose_allocation'][$deliver_bid] = ceil($si['suggest_po_qty_by_branch'][$deliver_bid]);
							}
							else{
								$po_items['qty_allocation'][$deliver_bid] = ceil($si['suggest_po_qty_by_branch'][$deliver_bid] / $po_items['order_uom_fraction']);
							}
							
							// check branch is under gst
							if($branch_is_under_gst){
								// get N.S.P and S.S.P
								$prms = array();
								$prms['selling_price'] = $po_items['selling_price_allocation'][$deliver_bid];
								$prms['inclusive_tax'] = $si['inclusive_tax'];
								$prms['gst_rate'] = $po_items['selling_gst_rate'];
								$gst_sp_info = calculate_gst_sp($prms);
								$po_items['gst_selling_price_allocation'][$deliver_bid] = $gst_sp_info['gst_selling_price'];
								
								if($si['inclusive_tax'] == "yes"){
									$po_items['gst_selling_price_allocation'][$deliver_bid] = strval($po_items['selling_price_allocation'][$deliver_bid]);
									$po_items['selling_price_allocation'][$deliver_bid] = strval($gst_sp_info['gst_selling_price']);
								}else{
									$po_items['gst_selling_price_allocation'][$deliver_bid] = strval($gst_sp_info['gst_selling_price']);
								}
							}
						}
					}else{	// single branch po
						if($this->reorder_by_branch){
							// selling price
							$po_items['selling_price'] = round($si['selling_price_by_branch'][$po['po_branch_id']], 2);
							// stock balance
							$po_items['stock_balance'] = $si['stock_balance_by_branch'][$po['po_branch_id']];
							// qty
							if($po_items['order_uom_id']==1 || $po_items['order_uom_fraction'] == 1){
								$po_items['qty_loose'] = ceil($si['suggest_po_qty_by_branch'][$po['po_branch_id']]);
							}
							else{
								$po_items['qty'] = ceil($si['suggest_po_qty_by_branch'][$po['po_branch_id']] / $po_items['order_uom_fraction']);
							}
						}else{
							// selling price
							$po_items['selling_price'] = round($si['lastest_selling_price'], 2);
							// stock balance
							$po_items['stock_balance'] = $si['stock_balance'];
							// qty
							if($po_items['order_uom_id']==1 || $po_items['order_uom_fraction'] == 1){
								$po_items['qty_loose'] = ceil($si['suggest_po_qty']);
							}
							else{
								$po_items['qty'] = ceil($si['suggest_po_qty'] / $po_items['order_uom_fraction']);
							}
						}
						
						// check branch is under gst
						if($branch_is_under_gst){
							// get N.S.P and S.S.P
							$prms = array();
							$prms['selling_price'] = $po_items['selling_price'];
							$prms['inclusive_tax'] = $si['inclusive_tax'];
							$prms['gst_rate'] = $po_items['selling_gst_rate'];
							$gst_sp_info = calculate_gst_sp($prms);
							$po_items['gst_selling_price'] = $gst_sp_info['gst_selling_price'];
							
							if($si['inclusive_tax'] == "yes"){
								$po_items['gst_selling_price'] = $po_items['selling_price'];
								$po_items['selling_price'] = $gst_sp_info['gst_selling_price'];
							}else{
								$po_items['gst_selling_price'] = $gst_sp_info['gst_selling_price'];
							}
						}
					}

					// get sales trend
					$sales_trend = get_sales_trend($po_items['sku_item_id']);
					$po_items['sales_trend'] =  $sales_trend['sales_trend'];

					if($si['pa']){
						if($si['pa_foc_item_id']){
							$po_items['pa_foc_item_id'] = $si['pa_foc_item_id'];
							$po_items['is_foc'] = 1;
						}
						else{
							$po_items['pa_item_id'] = $si['pa_item_id'];
						}

						$po_items['pa_branch_id'] = $si['pa_branch_id'];
						$po_items['cost_indicate'] = $si['cost_indicate'];
						$po_items['discount'] = $si['discount'];
					}

					if($create_po){
						$po_items['sales_trend'] = serialize($po_items['sales_trend']);
						if($po['deliver_to']){
							$po_items['selling_price_allocation'] = serialize($po_items['selling_price_allocation']);
							$po_items['gst_selling_price_allocation'] = serialize($po_items['gst_selling_price_allocation']);
							$po_items['stock_balance'] = serialize($po_items['stock_balance']);
							$po_items['qty_allocation'] = serialize($po_items['qty_allocation']);
							$po_items['qty_loose_allocation'] = serialize($po_items['qty_loose_allocation']);
						}
						$con->sql_query("insert into po_items ".mysql_insert_by_field($po_items));
					}else{
						$tmp_purchase_agreement_info['items_info'][] = $po_items;
					}
				}
				
				// update po amount
				if($create_po){
					$appCore->poManager->reCalcatePOAmt($po['branch_id'], $po_id);
					log_br($sessioninfo['id'], 'PURCHASE ORDER', $po_id, "Create PO from PO Stock Reorder Report (ID#$po_id)");
				}else{
					$tmp_purchase_agreement_info['items_info'] = serialize($tmp_purchase_agreement_info['items_info']);
					$con->sql_query("insert into tmp_purchase_agreement_info ".mysql_insert_by_field($tmp_purchase_agreement_info));
					$tmp_id = $con->sql_nextid();
					
					$ret['pa_data'][$vid]['pa_list'][] = array('branch_id' => $po['branch_id'], 'id' => $tmp_id);
				}
			}
		}
		
		$smarty->assign('data', $ret);
		$ret['html'] = $smarty->fetch('report.stock_reorder.generated_po.tpl');
		
		$ret['ok'] = 1;
		print json_encode($ret);
	}

	function export_po(){
		global $con, $smarty, $sessioninfo, $config;

		$selected_vendor_id = mi($_REQUEST['selected_vendor_id']);
		$form = $_REQUEST;

		// select single vendor
		if($selected_vendor_id) $vendor_sku[$selected_vendor_id] = $form['vendor_sku'][$selected_vendor_id];
		else    $vendor_sku = $form['vendor_sku'];  // all vendor
		
		if(!$vendor_sku)    die('No SKU is found.');

		$date = date('dmyHi');
		$filename = "SR".$date.".csv";
		
		if (!is_dir("attachments"))	check_and_create_dir("attachments");
		if (!is_dir("attachments/stock_reorder_import"))	check_and_create_dir("attachments/stock_reorder_import");
		
		file_put_contents('attachments/stock_reorder_import/'.$filename, $filename);
		$fp = fopen('attachments/stock_reorder_import/'.$filename, 'w');

		if($config['link_code_name']){
			$code_name = $config['link_code_name'];
		}else{
			$code_name = "Link Code";
		}

		fputcsv($fp, array("BRANCH CODE", "INTEGRATION CODE", "ARMS CODE", "ART NO", "MCODE", strtoupper($code_name), "DESCRIPTION", "UOM", "CTN"));

		foreach($vendor_sku as $vid => $sid_list){
			$sku_id = $sid_list;
			foreach($sid_list as $column => $data){
				if(!$data['generate_po'])   continue;

				// if not reorder_by_branch
				if($form['reorder_by_branch'] == 0){
					$con->sql_query("select code,integration_code from branch where id = ".$form['po_branch_id']." and active = 1");
					$branch = $con->sql_fetchassoc();
					$con->sql_freeresult();
					$items[] = $branch['code'];
					$items[] = $branch['integration_code'];

					$con->sql_query("select sku_item_code, artno, mcode, link_code, description from sku_items where id = $column and active = 1");
					$sku_item = $con->sql_fetchassoc();
					$con->sql_freeresult();

					$items[] = $sku_item['sku_item_code'];
					$items[] = $sku_item['artno'];
					$items[] = $sku_item['mcode'];
					$items[] = $sku_item['link_code'];
					$items[] = $sku_item['description'];

					$con->sql_query("select code from uom where id = ".$data['po_uom_id']." and active = 1");
					$uom = $con->sql_fetchassoc();
					$con->sql_freeresult();
					
					$items[] = $uom['code'];
					$items[] = $data['suggest_po_ctn'];
					
					fputcsv($fp, $items);
					unset($items);
				}

				// reorder_by_branch
				if($form['reorder_by_branch'] == 1){					
					foreach($data['suggest_po_qty_by_branch'] as $bid => $value){
						if($value != 0){
								$form['po_branch_id'] = $bid;									

								$con->sql_query("select code,integration_code from branch where id = ".$form['po_branch_id']." and active = 1");
								$branch = $con->sql_fetchassoc();
								$con->sql_freeresult();
								$items[] = $branch['code'];
								$items[] = $branch['integration_code'];

								$con->sql_query("select sku_item_code, artno, mcode, link_code, description from sku_items where id = $column and active = 1");
								$sku_item = $con->sql_fetchassoc();
								$con->sql_freeresult();

								$items[] = $sku_item['sku_item_code'];
								$items[] = $sku_item['artno'];
								$items[] = $sku_item['mcode'];
								$items[] = $sku_item['link_code'];
								$items[] = $sku_item['description'];

								$con->sql_query("select code from uom where id = ".$data['po_uom_id']." and active = 1");
								$uom = $con->sql_fetchassoc();
								$con->sql_freeresult();
								
								$items[] = $uom['code'];
								$branch_ctn = ceil($value/$data['po_uom_fraction']);
								$items[] = $branch_ctn;	// single branch $data['suggest_po_ctn'];

								$check_dup = $data['artno'];
																
								fputcsv($fp, $items);
								unset($items);
						}
					}
				}				
			}
		}		

		fclose($fp);
		
		Header('Content-Type: application/csv');
		Header('Content-Disposition: attachment;filename=$filename');

		$ret = array();
		$ret['po_exported'] = 1;
		$ret['path'] = 'attachments/stock_reorder_import/'.$filename;
		$ret['file_name'] = $filename;
		$ret['date'] = $date;

		$smarty->assign('data', $ret);
		$ret['html'] = $smarty->fetch('report.stock_reorder.generated_po.tpl');
		
		$ret['ok'] = 1;
		print json_encode($ret);
	}

	private function process_purchase_agreement_si(&$si,$sid,$vid,$po_date,$dept_id,$uom){
		global $con;

		$pa_sql = "select pai.*
		from purchase_agreement_items pai
		join purchase_agreement pa on pa.branch_id=pai.branch_id and pa.id=pai.purchase_agreement_id
		where pai.sku_item_id=".mi($sid)." and pa.active=1 and pa.status=1 and pa.approved=1
		and vendor_id = ".mi($vid)." and ".ms($po_date)." between date_from and date_to and dept_id = ".mi($dept_id)."
		limit 1";
		$con->sql_query($pa_sql);
		$pai = $con->sql_fetchassoc();
		$con->sql_freeresult();
		if(!$pai){
			// check foc item as well
			$pa_sql = "select pafi.*
			from purchase_agreement_foc_items pafi
			join purchase_agreement pa on pa.branch_id=pafi.branch_id and pa.id=pafi.purchase_agreement_id
			where pafi.sku_item_id=".mi($sid)." and pa.active=1 and pa.status=1 and pa.approved=1
			and vendor_id = ".mi($vid)." and ".ms($po_date)." between date_from and date_to and dept_id = ".mi($dept_id)."
			limit 1";
			$con->sql_query($pa_sql);
			$pai = $con->sql_fetchassoc();
			$con->sql_freeresult();
			if($pai) $pai['foc_item']=1;
		}

		if($pai){
			$si['pa']=1;

			if($pai['foc_item']) $si['pa_foc_item_id']=$pai['id'];
			else $si['pa_item_id'] = $pai['id'];
			$si['pa_branch_id'] = $pai['branch_id'];
			$si['pa_id']=$pai['purchase_agreement_id'];
			
			$si['lastest_selling_price'] = $pai['suggest_selling_price'];
			$si['selling_uom_id'] = $uom['id'];
			$si['selling_uom_fraction'] = $uom['fraction'];
			$si['lastest_cost'] = $pai['purchase_price'];
			$si['order_uom_id'] = $uom['id'];
			$si['order_uom_fraction'] = $uom['fraction'];
			$si['discount'] = $pai['discount'];
			
			switch($pai['qty_type']){
				case 'fixed':
					$si['suggest_po_qty'] = $pai['qty1'];
					if($this->reorder_by_branch){
						foreach($this->reorder_bid as $deliver_bid){
							if(!$si['suggest_po_qty_by_branch'][$deliver_bid])	continue;
							$si['suggest_po_qty_by_branch'][$deliver_bid] = $pai['qty1'];
						}
					}
					break;
				case 'multiply':
					$si['suggest_po_qty'] = $pai['qty1'] * ceil($si['suggest_po_qty']/$pai['qty1']);
					if($this->reorder_by_branch){
						foreach($this->reorder_bid as $deliver_bid){
							if(!$si['suggest_po_qty_by_branch'][$deliver_bid])	continue;
							$si['suggest_po_qty_by_branch'][$deliver_bid] = $pai['qty1'] * ceil($si['suggest_po_qty_by_branch'][$deliver_bid]/$pai['qty1']);
						}
					}
					break;
				case 'range':
					$si['suggest_po_qty'] = ceil($si['suggest_po_qty']);
					if($si['suggest_po_qty'] < $pai['qty1']){
						// use min
						$si['suggest_po_qty'] = $pai['qty1'];
					}elseif($si['suggest_po_qty'] > $pai['qty2']){
						// use max
						$si['suggest_po_qty'] = $pai['qty2'];
					}
					if($this->reorder_by_branch){
						foreach($this->reorder_bid as $deliver_bid){
							if(!$si['suggest_po_qty_by_branch'][$deliver_bid])	continue;
							$si['suggest_po_qty_by_branch'][$deliver_bid] = ceil($si['suggest_po_qty_by_branch'][$deliver_bid]);
							if($si['suggest_po_qty_by_branch'][$deliver_bid] < $pai['qty1']){
								// use min
								$si['suggest_po_qty_by_branch'][$deliver_bid] = $pai['qty1'];
							}elseif($si['suggest_po_qty_by_branch'][$deliver_bid] > $pai['qty2']){
								// use max
								$si['suggest_po_qty_by_branch'][$deliver_bid] = $pai['qty2'];
							}
						}
					}
					break;
				default:
					break;
			}
			
			$si['po_uom_id'] = $uom['id'];
			$si['po_uom_fraction'] = $uom['fraction'];
			$si['cost_indicate'] = 'PA';
		}
		/*else{
			$si['suggest_po_qty'] = $si['suggest_po_qty'];
			$si['po_uom_id'] = $si['po_uom_id'];
			$si['po_uom_fraction'] = $si['po_uom_fraction'];
		}*/
	}

	private function get_sales_range_qty($bid, $sid_str, $date_range_from, $date_range_to){
		global $con, $con_multi;
		
		// invalid params
		if(!$bid || !$sid_str || !$date_range_from || !$date_range_to)  return 0;
		
		$sb_tbl = "sku_items_sales_cache_b".$bid;
		$sql = "select qty, uom.fraction
			from $sb_tbl sb
			left join sku_items si on si.id=sb.sku_item_id
			left join uom on uom.id=si.packing_uom_id
			where sku_item_id in ($sid_str) and date between ".ms($date_range_from)." and ".ms($date_range_to);
		$q1 = $con_multi->sql_query($sql);
		$qty = 0;
		while($r = $con_multi->sql_fetchassoc($q1)){
            $qty += $r['qty']*$r['fraction'];
		}
		$con_multi->sql_freeresult($q1);
		return mf($qty);
	}
	
	private function get_do_range_qty($bid, $sid_str, $date_range_from, $date_range_to){
		global $con, $con_multi;

		// invalid params
		if(!$bid || !$sid_str || !$date_range_from || !$date_range_to)  return 0;

		$sql = "select di.ctn, di.pcs,p_uom.fraction as packing_uom_fraction, do_uom.fraction as do_uom_fraction
from do_items di
left join do on do.branch_id=di.branch_id and do.id=di.do_id
left join sku_items si on si.id=di.sku_item_id
left join uom p_uom on p_uom.id=si.packing_uom_id
left join uom do_uom on do_uom.id=di.uom_id
where di.sku_item_id in ($sid_str) and do.active=1 and do.status=1 and do.approved=1 and do.do_date between ".ms($date_range_from)." and ".ms($date_range_to)." and do.branch_id=".mi($bid);
        $q1 = $con_multi->sql_query($sql);
		$qty = 0;
		while($r = $con_multi->sql_fetchassoc($q1)){
            $qty += (($r['ctn']*$r['do_uom_fraction'])+$r['pcs'])*$r['packing_uom_fraction'];
		}
		$con_multi->sql_freeresult($q1);
		return mf($qty);
	}
	
	private function get_last_30_d_pos($reorder_bid, $sid_str){
		global $con, $con_multi;
		
		if(!$reorder_bid || !is_array($reorder_bid))    die('Invalid Branch for sales');
		if(!$sid_str)   return array();
		
		$ret = array();
		
		$sql = "select sic.l30d_pos as qty, uom.fraction
from sku_items_cost sic
left join sku_items si on si.id=sic.sku_item_id
left join uom on uom.id=si.packing_uom_id
where sic.sku_item_id in ($sid_str) and sic.branch_id in (".join(',', $reorder_bid).")";
        $q1 = $con_multi->sql_query($sql);
		$qty = 0;
		while($r = $con_multi->sql_fetchassoc($q1)){
            $ret['total']['qty'] += $r['qty']*$r['fraction'];
		}
		$con_multi->sql_freeresult($q1);
		return $ret;
	}
	
	function generate_vendor_sku_list(){
		global $con, $arg, $config;
		
		//if(BRANCH_CODE != 'HQ')	die("Only Allow for HQ.");
		
		$this->store_vendor_sku_list = true;
		$total_start_time = microtime(true);
		$bid_list = array();
		$reorder_type = 'less_than_po_reorder_min';
		if($config['stock_reorder_command_line_default_generate_filter_type'])	$reorder_type = $config['stock_reorder_command_line_default_generate_filter_type'];
		
		if(defined('TERMINAL')){
			// check branch first
			if($config['single_server_mode']){
				$bcode = $arg[2];
				if(!$bcode)	die("Invalid Branch.\n");
				
				if($bcode != '-all'){
					$filter_branch = " and code=".ms($bcode);
				}
				$con->sql_query("select id from branch where active=1 $filter_branch");
			}else{
				$con->sql_query("select id from branch where active=1 and code=".ms(BRANCH_CODE));
			}
			while($r = $con->sql_fetchassoc()){
				$bid_list[] = mi($r['id']);
			}
			$con->sql_freeresult();
			
			if(!$bid_list)	die("Invalid Branch Selection.\n");
			
			while($mode = array_shift($arg)){
				switch($mode){
					case '-reorder_type':
						$reorder_type = trim(array_shift($arg));
						break;
				}
			}	
		}
		
		if(!$this->reorder_type_list[$reorder_type])	die("Invalid Reorder Type");
		
		if($reorder_type=='less_then_grace_period' || $reorder_type == 'less_than_sales'){
			$_REQUEST['reorder_bid'] = array();
			$con->sql_query("select id from branch where active=1");
			while($r = $con->sql_fetchassoc()){
				$_REQUEST['reorder_bid'][] = $r['id'];
			}
			$con->sql_freeresult();
		}

		
		// select vendor
		$vid_list = array();
		$con->sql_query("select id from vendor where enable_stock_reoder_notify=1 order by id");
		while($r = $con->sql_fetchassoc()){
			$vid_list[] = $r['id'];
		}
		$con->sql_freeresult();
		
		if(!$vid_list)	die("No Vendor to generate.\n");
		
		// select category
		$cid_list = array();
		$con->sql_query("select id from category where level=2 and active=1 order by id");
		//$con->sql_query("select id from category where id=4817 order by id");
		while($r = $con->sql_fetchassoc()){
			$cid_list[] = $r['id'];
		}
		$con->sql_freeresult();
		
		foreach($bid_list as $bid){
			$this->branch_id = $bid;
			$con->sql_query("delete from vendor_stock_reorder_sku where branch_id=".mi($this->branch_id));
			
			foreach($vid_list as $vid){	// loop vendor
				print "Generating: Branch ID#".$this->branch_id.", Vendor ID#$vid, Type#$reorder_type\n";
				$start_time = microtime(true);
				
				foreach($cid_list as $cat_id){	// loop category
					$_REQUEST['category_id'] = $cat_id;
					$_REQUEST['vendor_id'] = $vid;
					$_REQUEST['by_last_vendor'] = 1;
					$_REQUEST['reorder_type'] =  $reorder_type;
					
					//print "Generating: Branch ID#".$this->branch_id.", Vendor ID#$vid, Category ID#$cat_id\n";
					//$start_time = microtime(true);
					
					$this->data = array();
					$this->load_report();	// load data
					
					// clear old data
					//$con->sql_query("delete from vendor_stock_reorder_sku where branch_id=".mi($this->branch_id)." and vendor_id=".mi($vid)." and category_id=".mi($cat_id));
					
					$sid_list = array();
					if($this->data['vendor_data'][$vid]['sku_item']){
						
						// store new data
						$notify_uid_list = array();
						foreach($this->data['vendor_data'][$vid]['sku_item'] as $dummy=>$sid){
							$sid_list[] = $sid;
							$notify_uid = trim($this->data['sku_data'][$sid]['info']['po_reorder_notify_user_id']);
							if($notify_uid) $notify_uid_list[$notify_uid] = $notify_uid;
						}
						$upd = array();
						$upd['branch_id'] = $this->branch_id;
						$upd['vendor_id'] = $vid;
						$upd['category_id'] = $cat_id;
						$upd['sku_id_list'] = serialize($sid_list);
						$upd['reorder_type'] = $reorder_type;
						$upd['added'] = 'CURRENT_TIMESTAMP';
						$con->sql_query("replace into vendor_stock_reorder_sku ".mysql_insert_by_field($upd));
						
						// notify person starts here if found have any
						if($notify_uid_list){
							$params = array();
							$params['branch_id'] = $this->branch_id;
							$params['uid_list'] = $notify_uid_list;
							$params['vendor_id'] = $vid;
							$params['category_id'] = $cat_id;
							$params['reorder_type'] = $reorder_type;

							$this->po_reorder_send_email($params);
						}
					}	
	
					//$end_time = microtime(true);
					//print count($sku_id_list)." SKU found. ".($end_time-$start_time)." sec used.\n";
				}
				$end_time = microtime(true);
				print "Done. ".($end_time-$start_time)." sec used. Memory used: ".memory_get_usage()."\n";
			}
			
			// send notify
		}
		
		$total_end_time = microtime(true);
		print "Done. Total ".($total_end_time-$total_start_time)." sec used.\n";
	}
	
	private function get_grn_range_qty($bid, $sid_str, $date_range_from, $date_range_to){
		global $con, $con_multi;
		
		// invalid params
		if(!$bid || !$sid_str || !$date_range_from || !$date_range_to){
			print "invalid grn params<br>";
			return 0;
		}  
		
		$sql = "select (if (grn_items.acc_ctn is null and grn_items.acc_pcs is null, grn_items.ctn *rcv_uom.fraction + grn_items.pcs, grn_items.acc_ctn *rcv_uom.fraction + grn_items.acc_pcs)) as qty,
	(
	  if (grn_items.acc_cost is null, grn_items.cost, grn_items.acc_cost)
	  *
	  if (grn_items.acc_ctn is null and grn_items.acc_pcs is null,
	  	grn_items.ctn + grn_items.pcs / rcv_uom.fraction,
	  	grn_items.acc_ctn + grn_items.acc_pcs / rcv_uom.fraction
	  )
	) as cost,
		grn.id as grn_id, grr.rcv_date as dt, grn.grr_id, grn.is_future,
		gi.type, puom.fraction as packing_uom_fraction
		from grn_items
		left join uom rcv_uom on grn_items.uom_id=rcv_uom.id
		left join grn on grn_id=grn.id and grn_items.branch_id=grn.branch_id
		left join grr on grn.grr_id = grr.id and grn.branch_id = grr.branch_id
		left join grr_items gi on gi.id=grn.grr_item_id and gi.branch_id=grn.branch_id
		left join sku_items on grn_items.sku_item_id = sku_items.id
		left join uom puom on puom.id=sku_items.packing_uom_id
		where grn_items.sku_item_id in ($sid_str) and grr.rcv_date between ".ms($date_range_from)." and ".ms($date_range_to)." and grn_items.branch_id =$bid and grn.approved=1 and grn.status=1 and grn.active=1 and grr.active=1";
		
		$q1 = $con_multi->sql_query($sql);
		$qty = 0;
		while($r = $con_multi->sql_fetchassoc($q1)){
            $qty += $r['qty']*$r['packing_uom_fraction'];
		}
		$con_multi->sql_freeresult($q1);
		//if($sid_str == "509557")	print "$sql<br><br>";
		return mf($qty);
	}
	
	private function load_po_reorder_qty_by_branch($params){
		global $con, $con_multi;
		
		// get reorder qty by branch
		$q1 = $con->sql_query("select * from sku_items_po_reorder where sku_item_id = ".mi($params['sku_item_id'])." and branch_id = ".mi($params['branch_id']));
		$info = $con->sql_fetchassoc($q1);
		$con->sql_freeresult($q1);
		
		if(!$info['min_qty'] && !$info['max_qty']){
			// if found it is set from SKU listing, then use it
			if($params['si_po_reorder_qty_min'] || $params['si_po_reorder_qty_max']){
				$ret = array();
				$ret['min'][$params['branch_id']] = $params['si_po_reorder_qty_min'];
				$ret['max'][$params['branch_id']] = $params['si_po_reorder_qty_max'];
				$ret['moq'][$params['branch_id']] = $params['si_po_reorder_moq'];
				$ret['notify_user_id'][$params['branch_id']] = $params['si_po_reorder_notify_user_id'];
				
				return $ret;
			}
		}else{
			$ret = array();
			$ret['min'][$params['branch_id']] = $info['min_qty'];
			$ret['max'][$params['branch_id']] = $info['max_qty'];
			$ret['moq'][$params['branch_id']] = $info['moq_qty'];
			$ret['notify_user_id'][$params['branch_id']] = $info['notify_user_id'];
			
			return $ret;
		}
	}
	
	private function po_reorder_send_email($params){
		global $sessioninfo, $con, $smarty, $config;

		include_once("include/class.phpmailer.php");

		$reorder_type_list = array(
			/*'sales_range' => 'Item got sales between date range',*/
			'sales_range_plus_do' => 'Items have sales between date range (includes DO)',
			/*'do_range' => 'Item got DO between date range',*/
			'less_than_sales' => 'Stock less than last 30 days sales',
			'less_than_po_reorder_min' => 'Stock less than PO reorder min qty',
			'less_then_grace_period' => 'Stock less than (average sales per day from last 30 days * Vendor grace period)'
		);

		$bid = $params['branch_id'];
		$bcode = get_branch_code($bid);

		$vendor_id = $params['vendor_id'];
		$q1 = $con->sql_query("select * from vendor where id = ".mi($vendor_id));
		$vd_info = $con->sql_fetchassoc($q1);
		$con->sql_freeresult($q1);
		
		$cat_id = $params['category_id'];
		$q1 = $con->sql_query("select * from category where id = ".mi($cat_id));
		$cat_info = $con->sql_fetchassoc($q1);
		$con->sql_freeresult($q1);
		
		$reorder_type = $params['reorder_type'];
		
		$uid_list = $params['uid_list'];
		$q1 = $con->sql_query("select email from user where id in (".join(",", $uid_list).")");
			
		while($r = $con->sql_fetchassoc($q1)){
			$mailer = new PHPMailer(true);
			$mailer->FromName = $sessioninfo['u'];
			$mailer->Subject = "ARMS - Purchase Order Re-order Qty Status";
			$mailer->IsHTML(true);

			if(!$mailer->ValidateAddress($r['email'])) continue;
			
			$msg = "Kindly please refer below PO Re-order Qty Status:<br /><br />";
			$msg .= "Branch: ".$bcode."<br />";
			$msg .= "Department: ".$cat_info['description']."<br />";
			$msg .= "Vendor: ".$vd_info['description']."<br />";
			$msg .= "Re-order Type: ".$reorder_type_list[$reorder_type]."<br />";
			$mailer->AddAddress($r['email']);
			
			if($config['main_server_url']){
				$url = "javascript:(function(){var bindEvent = function(elem, evt, cb) {
						if ( elem.addEventListener ) {
							elem.addEventListener(evt,cb,false);
						} else if ( elem.attachEvent ) {
							elem.attachEvent('on' + evt, function(){
								cb.call(event.srcElement,event);
							});
						}
					};";
				$path = urlencode("report.stock_reorder.php?load_report=1&category_id=".mi($cat_id)."&vendor_id=".mi($vendor_id)."&use_pregen_sku=1&reorder_type=".$reorder_type."&by_last_vendor=1");
				//$url2 = $url."var img1 = document.createElement('img');bindEvent(img1, 'load', function() { open('http://".$config['main_server_url']['lan']."/".$path."'); });img1.src = 'http://".$config['main_server_url']['lan']."/ui/clock.gif';";
				//$url2 .= "var img2 = document.createElement('img');bindEvent(img2, 'load', function() { open('http://".$config['main_server_url']['wan']."/".$path."'); });img2.src = 'http://".$config['main_server_url']['wan']."/ui/clock.gif';";
				//$url2 .= "})();";
				$url1 = "http://".$config['main_server_url']['lan']."/login.php?server=$bcode&redir=".$path;
				$url2 = "http://".$config['main_server_url']['wan']."/login.php?server=$bcode&redir=".$path;
				$msg .= "<br /><b>LAN: </b><a href=\"".$url1."\">View Detail</a>";
				$msg .= "<br /><b>WAN: </b><a href=\"".$url2."\">View Detail</a>";
			}
			
			$mailer->Body = $msg;
			// send the mail
			//$send_success = $mailer->Send();
			$send_success = phpmailer_send($mailer, $mailer_info);
			//$mailer->to = array();  // clear the address list
		}
		
		$con->sql_freeresult($q1);
	}
	
	private function check_do_gst_status($form){
		global $config;
		
		$is_under_gst = 0;
		$check_gst = true;
		if($config['consignment_modules']){
			if($form['do_type']=='transfer')	$check_gst = false;
		}
		// check whether this do is under gst
		if($config['enable_gst'] && $check_gst){
			$params = array();
			$params['date'] = $form['do_date'];
			$params['branch_id'] = $form['branch_id'];
			
			if($form['do_type']=='transfer'){
				// Transfer DO
				if($form['do_branch_id']){
					// single branch
					$params['to_branch_id'] = $form['do_branch_id'];
					$is_under_gst = check_gst_status($params);
				}elseif($form['deliver_branch']){
					// multi branch
					
					foreach($form['deliver_branch'] as $bid){
						$params['to_branch_id'] = $bid;
						$tmp_is_under_gst = check_gst_status($params);
						if($tmp_is_under_gst){
							$is_under_gst = 1;
						}else{
							$is_under_gst = 0;
							break;
						}
					}
				}
			}else{
				// cash sales & credit sales no need check gst interbranch
				$is_under_gst = check_gst_status($params);
			}
		
		}else{
			$is_under_gst = 0;
		}
		
		if($is_under_gst){
			construct_gst_list();
		}
		return $is_under_gst;
	}
	
	function ajax_generate_do(){
		global $con, $smarty, $config, $sessioninfo, $appCore, $LANG;
		
		$form = $_REQUEST;
		//print_r($form);exit;
		
		$bid = mi($sessioninfo['branch_id']);
		$do_date = date("Y-m-d", strtotime($form['do_date']));
		$do_branch_id = mi($form['do_branch_id']);
		$selected_vendor_id = mi($form['selected_vendor_id']);
		$this->reorder_by_branch = mi($form['reorder_by_branch']);
		$this->reorder_bid = $_REQUEST['do_deliver_to'];
		
		if(!$this->reorder_by_branch){
			if(!$do_branch_id)	die("No Delivery To branch.");
		}else{
			if(!$this->reorder_bid || !is_array($this->reorder_bid))	die("Please select at least one Delivery Branch.");
		}
		
		if(!$form['vendor_sku'])	die("No item to generate.");
		
		$con->sql_query("select * from uom where fraction = 1 and active = 1 order by id limit 1");
		$uom = $con->sql_fetchassoc();
		$con->sql_freeresult();
		
		// get GST Interbranch Settings
		$gst_interbranch = array();
		if($config['enable_gst'] && !$config['consignment_modules']){
			$q1 = $con->sql_query("select * from gst_interbranch where branch_id_1=$bid or branch_id_2=$bid");
			while($r = $con->sql_fetchassoc($q1)){
				if($r['branch_id_1']>0 && $r['branch_id_1'] != $bid){
					$gst_interbranch[$r['branch_id_1']] = $r;
				}elseif($r['branch_id_2']>0 && $r['branch_id_2'] != $bid){
					$gst_interbranch[$r['branch_id_2']] = $r;
				}
			}
			$con->sql_freeresult($q1);
			//print_r($gst_interbranch);exit;
		}
		
		// select single vendor
		if($selected_vendor_id) $vendor_sku[$selected_vendor_id] = $form['vendor_sku'][$selected_vendor_id];
		else    $vendor_sku = $form['vendor_sku'];  // all vendor
		
		if(!$vendor_sku)    die('No SKU is found.');
		
		//check is_month_closed
		/*if($config['monthly_closing']){
			$is_month_closed = $appCore->is_month_closed($do_date);
			if($is_month_closed){
				die(sprintf($LANG['DOCUMENT_MONTH_CLOSED'], "DO"));
			}
		}*/
		
		$items = array();
		foreach($vendor_sku as $vid=>$sid_list){
			foreach($sid_list as $sid=>$data){
				if(!$data['generate_po'])   continue;   // this item no need generate
				if(isset($items[$sid]))	continue;	// skip duplicate item
				
				$con->sql_query("select si.id as sid,sku.is_bom
				from sku_items si
				left join sku on sku.id=si.sku_id
				where si.id=$sid");
				$si = $con->sql_fetchassoc();
				$con->sql_freeresult();
				if(!$si)    die('SKU ITEM ID#'.$sid.' cannot find this item!');
				
				//$si['po_uom_id'] = $data['po_uom_id'];
				//$si['po_uom_fraction'] = $data['po_uom_fraction'];
				$si['suggest_po_qty'] = $data['suggest_po_qty'];
				if($this->reorder_by_branch)	$si['suggest_po_qty_by_branch'] = $data['suggest_po_qty_by_branch'];
				
				if($config['sku_bom_additional_type'] && $si['is_bom'] && $si['bom_type']=='package'){
					$q_bi = $con->sql_query("select bi.sku_item_id as sid,bi.qty from bom_items bi where bi.bom_id=".mi($sid)." order by bi.sku_item_id");
					while($r = $con->sql_fetchassoc($q_bi)){
						$con->sql_query("select si.id as sid,sku.is_bom
						from sku_items si
						left join sku on sku.id=si.sku_id
						where si.id=".$r['sid']);
						$si = $con->sql_fetchassoc();
						$sid = mi($si['id']);
						$con->sql_freeresult();

						if(!$si)    die('SKU ITEM ID#'.$r['sid'].' cannot find this item!');
						//$si['po_uom_id'] = $data['po_uom_id'];
						//$si['po_uom_fraction'] = $data['po_uom_fraction'];
						$si['suggest_po_qty'] = $data['suggest_po_qty']*$r['qty'];
						if($this->reorder_by_branch){
							foreach($this->reorder_bid as $deliver_bid){
								if($si['suggest_po_qty_by_branch'][$deliver_bid]){
									$si['suggest_po_qty_by_branch'][$deliver_bid] = $data['suggest_po_qty_by_branch'][$deliver_bid]*$r['qty'];
									$si['suggest_po_qty_by_branch']['total'] += $data['suggest_po_qty_by_branch'][$deliver_bid];
								}
							}
						}
						
						if(!$this->reorder_by_branch || ($this->reorder_by_branch && $si['suggest_po_qty_by_branch']['total']>0)){
							$items[$sid] = $si;
						}
						
					}
					$con->sql_freeresult($q_bi);
				}
				else{
					if($this->reorder_by_branch){
						foreach($this->reorder_bid as $deliver_bid){
							if($si['suggest_po_qty_by_branch'][$deliver_bid]){
								$si['suggest_po_qty_by_branch']['total'] += $si['suggest_po_qty_by_branch'][$deliver_bid];
							}
						}
					}
					if(!$this->reorder_by_branch || ($this->reorder_by_branch && $si['suggest_po_qty_by_branch']['total']>0)){
						$items[$sid] = $si;
					}
				}
			}
		}
		//print_r($items);exit;
		if(!$items) die('No item to generate DO.');
		
		$do_list = $bid_list = $bid_list_by_gst = array();
		if(!$this->reorder_by_branch){
			$bid_list = array($do_branch_id);
		}else{
			$bid_list = $this->reorder_bid;
		}
		
		foreach($bid_list as $deliver_bid){
			if($gst_interbranch[$deliver_bid])	$type = "gst";
			else $type = "non_gst";
			
			$bid_list_by_gst[$type][] = $deliver_bid;
		}
		//print_r($bid_list_by_gst);exit;
		
		foreach($bid_list_by_gst as $gst_type => $deliver_bid_list){
			$do = array();
			$do['branch_id'] = $bid;
			$do['user_id'] = $sessioninfo['id'];
			$do['last_update'] = 'CURRENT_TIMESTAMP';
			$do['added'] = 'CURRENT_TIMESTAMP';
			$do['do_date'] = $do_date;
			$do['do_type'] = 'transfer';
			$do['amt_need_update'] = 1;
			if($config['do_default_price_from']=='cost')    $do['price_indicate'] = 1;
			elseif($config['do_default_price_from']=='last_do')    $do['price_indicate'] = 3;
			else    $do['price_indicate'] = 2;
			
			$multi_deliver_branch = count($deliver_bid_list)>1 ? true : false;
			
			if(!$multi_deliver_branch){
				$do['do_branch_id'] = $deliver_bid_list[0];
				
				foreach($items as $sid => $si){
					if($this->reorder_by_branch){
						if(!$si['suggest_po_qty_by_branch'][$do['do_branch_id']])	continue;
					}					
					$do['item_sid_list'][$sid] = $sid;
				}
			}else{
				$deliver_branch = array();
				
				foreach($items as $sid => $si){
					foreach($deliver_bid_list as $deliver_bid){
						if(!$si['suggest_po_qty_by_branch'][$deliver_bid])	continue;
						
						if(!in_array($deliver_bid, $deliver_branch))	$deliver_branch[] = $deliver_bid;
						
						$do['item_sid_list'][$sid] = $sid;
					}
				}
				//if(!$deliver_branch)	die("No item to generate for selected branch");
				
				if(count($deliver_branch) == 1){
					$do['do_branch_id'] = $deliver_branch[0];
				}elseif(count($deliver_branch) > 1){
					$do['deliver_branch'] = $deliver_branch;
				}				
			}
			
			if(!$do['do_branch_id'] && !$do['deliver_branch'])	continue;
			if(!$do['item_sid_list'])	continue;
			if($gst_type == 'gst')	$do['is_under_gst'] = 1;
			//print_r($do);exit;
			$do_list[] = $do;
		}
		
		if(!$do_list)	die("No item to generate for selected branch");
		
		$do_id_list = array();
		// loop DO
		foreach($do_list as $do){
			$do_items = array();
			$str_join_do_branch_data = $str_col_do_branch_data = "";
			
			if($do['do_branch_id']){
				$str_join_do_branch_data = "left join sku_items_price sip2 on sip2.branch_id=".mi($do['do_branch_id'])." and sip2.sku_item_id=si.id
										left join sku_items_cost sic2 on sic2.branch_id=".mi($do['do_branch_id'])." and sic2.sku_item_id=si.id";
				$str_col_do_branch_data = ",ifnull(sip2.price, si.selling_price) as selling_price2, sic2.qty as stock_balance2";
			}			
			
			foreach($do['item_sid_list'] as $sid){
				$r = $items[$sid];
				
				$sql = "select si.id as sid,ifnull(sip.price,si.selling_price) as selling, ifnull(sic.grn_cost,si.cost_price) as cost,si.artno,si.mcode ,ifnull(sip.trade_discount_code,sku.default_trade_discount_code) as price_type,
				sic.qty as stock_balance1 $str_col_do_branch_data
				from sku_items si
				left join sku on sku.id=si.sku_id
				left join sku_items_price sip on sip.sku_item_id=si.id and sip.branch_id=$bid
				left join sku_items_cost sic on sic.sku_item_id=si.id and sic.branch_id=$bid
				$str_join_do_branch_data
				where si.id=$sid";
				$con->sql_query($sql);
				$r = array_merge($r, $con->sql_fetchassoc());
				$con->sql_freeresult();
				
				$temp_p = array();
				if($do['price_indicate'] == 3){	// last do
					// get last DO price
					$q_p = $con->sql_query("select (di.cost_price/uom.fraction) as cost_price, (di.display_cost_price/uom.fraction) as display_cost_price, di.display_cost_price_is_inclusive
					from do_items di
					left join do on di.do_id = do.id and di.branch_id = do.branch_id 
					left join uom on uom.id=di.uom_id
					where do.active=1 and di.sku_item_id=".mi($sid)." and di.branch_id=$bid order by di.id desc limit 1");
					$temp_p = $con->sql_fetchassoc($q_p);
					$con->sql_freeresult($q_p);
					
					$cost_price = $temp_p['cost_price'];
					$display_cost_price = isset($temp_p['display_cost_price']) ? $temp_p['display_cost_price'] : $cost_price;
					$display_cost_price_is_inclusive = isset($temp_p['display_cost_price_is_inclusive']) ? $temp_p['display_cost_price_is_inclusive'] : 0;
				}
				
				if(!$temp_p){
					if($do['price_indicate'] == 3 || $do['price_indicate'] == 1){	// last do
						$display_cost_price = $cost_price = $r['cost'];
						$display_cost_price_is_inclusive = 0;
					}else{
						$display_cost_price = $cost_price = $r['selling'];
						$display_cost_price_is_inclusive = 0;
					}
				}
				
				if($do['is_under_gst']){
					// get sku original output gst
					$output_gst = get_sku_gst("output_tax", $sid);
					if($output_gst){
						if($do['price_indicate'] == 2){	// selling
							// get sku inclusive tax
							$is_sku_inclusive = get_sku_gst("inclusive_tax", $sid);
							if($is_sku_inclusive == 'yes'){
								// is inclusive tax
								$price_included_gst = $cost_price;
								$display_cost_price_is_inclusive = 1;
								$display_cost_price = $price_included_gst;
								
								// find the selling price before tax
								$gst_amt = $price_included_gst / ($output_gst['rate']+100) * $output_gst['rate'];
								$before_tax_price = $price_included_gst - $gst_amt;
							}else{
								// is exclusive tax
								$before_tax_price = $cost_price;
								$gst_amt = $before_tax_price * $output_gst['rate'] / 100;
								$price_included_gst = $before_tax_price + $gst_amt;
							}
							
							// cost price need to use before gst for selling price
							$cost_price = $before_tax_price;
						}
						
						$r['gst_id'] = $output_gst['id'];
						$r['gst_code'] = $output_gst['code'];
						$r['gst_rate'] = $output_gst['rate'];
						$r['display_cost_price_is_inclusive'] = $display_cost_price_is_inclusive;
						$r['display_cost_price'] = $display_cost_price;
					}
				}
				
				$r['cost_price'] = $cost_price;
				
				// selling price
				if($do['do_branch_id']){
					//$r['selling_price'] = $r['selling_price2'];
					//$r['stock_balance2'] = $r['stock_balance2'];
					if(!$this->reorder_by_branch){
						$r['pcs'] = ceil($r['suggest_po_qty']);
					}else{
						$r['pcs'] = ceil($r['suggest_po_qty_by_branch'][$do['do_branch_id']]);
					}
				}else{
					$r['selling_price_allocation'] = $r['stock_balance2_allocation'] = $r['pcs_allocation'] = array();
					foreach($do['deliver_branch'] as $deliver_bid){
						$q_sb = $con->sql_query("select si.id as sid, ifnull(sip.price, si.selling_price) as selling, sic.qty as stock_balance
						from sku_items si
						left join sku_items_price sip on sip.branch_id=$deliver_bid and sip.sku_item_id=si.id
						left join sku_items_cost sic on sic.branch_id=$deliver_bid and sic.sku_item_id=si.id
						where si.id=$sid");
						while($si2 = $con->sql_fetchassoc($q_sb)){
							$r['selling_price_allocation'][$deliver_bid] = strval(round($si2['selling'], 2));
							$r['stock_balance2_allocation'][$deliver_bid] = strval($si2['stock_balance']);
						}
						$con->sql_freeresult($q_sb);
						
						$r['pcs_allocation'][$deliver_bid] = strval(ceil($r['suggest_po_qty_by_branch'][$deliver_bid]));
					}
				}
				
				$do_items[$sid] = $r;
			}
			//print_r($do);
			//print_r($do_items);
			
			unset($do['item_sid_list']);
			//continue;
			
			if($do['deliver_branch'])	$do['deliver_branch'] = serialize($do['deliver_branch']);
			$con->sql_query("insert into do ".mysql_insert_by_field($do));
			$do_id = $con->sql_nextid();
			$do_id_list[] = $do_id;
			
			foreach($do_items as $sid => $r){
				$upd = array();
				$upd['branch_id'] = $bid;
				$upd['do_id'] = $do_id;
				$upd['user_id'] = $sessioninfo['id'];
				$upd['sku_item_id'] = $sid;
				$upd['cost'] = $r['cost'];
				$upd['cost_price'] = $r['cost_price'];
				$upd['uom_id'] = $uom['id'];
				$upd['stock_balance1'] = $r['stock_balance1'];
				$upd['artno_mcode'] = $r['artno'] ? $r['artno'] : $r['mcode'];
				
				if($do['is_under_gst']){
					$upd['gst_id'] = $r['gst_id'];
					$upd['gst_code'] = $r['gst_code'];
					$upd['gst_rate'] = $r['gst_rate'];
					$upd['display_cost_price_is_inclusive'] = $r['display_cost_price_is_inclusive'];
					$upd['display_cost_price'] = $r['display_cost_price'];
				}
				
				if($do['do_branch_id']){
					$upd['pcs'] = ceil($r['pcs']);
					$upd['selling_price'] = $r['selling_price2'];
					$upd['stock_balance2'] = $r['stock_balance2'];
				}else{
					$upd['selling_price_allocation'] = serialize($r['selling_price_allocation']);
					$upd['stock_balance2_allocation'] = serialize($r['stock_balance2_allocation']);
					$upd['pcs_allocation'] = serialize($r['pcs_allocation']);
				}
				
				$con->sql_query("insert into do_items ".mysql_insert_by_field($upd));
			}
		}
				
		$ret = array();
		$ret['ok'] = 1;
		$ret['html'] = "";
		foreach($do_id_list as $do_id){
			$ret['html'] .= "DO ID <a href='do.php?a=open&branch_id=$bid&id=$do_id' target='_blank'>#$do_id</a><br />";
		}
		
		print json_encode($ret);
	}
	
	function get_sku_pending_do($sku_id, $sid_str){
		global $con, $smarty, $sessioninfo, $config, $con_multi;
		
		if(!$sid_str)   return false;
		if(!$con_multi) $con_multi = new mysql_multi();
		
		$filter = array();
		
		if ($_REQUEST['incl_not_approved']) $filter[] = 'do.status in (0,1,2) and do.approved in (0,1)';
		else $filter[] = 'do.status in (1) and do.approved in (1)';
		
		$filter[] = "do.active=1 and do.checkout=0 and do.do_type='transfer' and di.sku_item_id in ($sid_str)";
		
		// get not yet deliver PO
		$bid = mi($this->branch_id);
		
		$filter_or = array();
		if(!$this->reorder_by_branch){
			$filter_or[] = "do.do_branch_id=$bid";
			if(BRANCH_CODE != 'HQ'){
				$filter_or[] = "(do.deliver_branch like ".ms('%:"'.$bid.'";%').")";
			}
		}else{
			// check sent to branch
			$filter_or[] = "do.do_branch_id in (".join(',', $this->reorder_bid).")";
			
			// check multiple deliver
			$str_deliver = '';
			foreach($this->reorder_bid as $deliver_bid){
				if($str_deliver)	$str_deliver .= " or ";
				$str_deliver .= "do.deliver_branch like ".ms('%:"'.$deliver_bid.'";%');
			}
			$filter_or[] = "($str_deliver)";
			
		}
		$filter[] = "(".join(" or ", $filter_or).")";
		
		$filter = join(' and ', $filter);
		
		$sql = "select di.*, do.deliver_branch, do.do_no, branch.report_prefix, uom.fraction as uom_fraction, packing_uom.fraction as packing_uom_fraction, do.do_branch_id
from do
left join do_items di on di.branch_id=do.branch_id and di.do_id=do.id
left join branch on branch.id=do.branch_id
join sku_items si on si.id=di.sku_item_id
left join uom on uom.id=di.uom_id
left join uom packing_uom on packing_uom.id=si.packing_uom_id
where $filter";
		//print $sql."<br />";
        $con_multi->sql_query($sql);
        $pending_do = array();
        $last_key = '';
        
        while($r = $con_multi->sql_fetchassoc()){
			$key = $r['branch_id'].'_'.$r['do_id'];
			$do_qty = 0;
			$r['deliver_branch'] = unserialize($r['deliver_branch']);
			
			if($last_key != $key){
                $pending_do['do_data'][$key] = $r;
                $pending_do['do_data'][$key]['highlight_sku_id'] = $sku_id;
			}
			
			if($r['deliver_branch']){
			    $r['ctn_allocation'] = unserialize($r['ctn_allocation']);
			    $r['pcs_allocation'] = unserialize($r['pcs_allocation']);
			 
				foreach($r['deliver_branch'] as $tmp_key => $tmp_bid){
					if(BRANCH_CODE != 'HQ' && $tmp_bid != $bid)	continue;
					
					$branch_do_qty = (($r['ctn_allocation'][$tmp_bid]*$r['uom_fraction'])+$r['pcs_allocation'][$tmp_bid])*$r['packing_uom_fraction'];
					if($this->reorder_by_branch){
						$pending_do['by_branch'][$tmp_bid]['do_qty'] += $branch_do_qty;
						
						if($this->store_pending_data_in_details){
							$pending_do['do_data'][$key]['by_branch'][$tmp_bid]['do_qty'] += $branch_do_qty;
						}
					}
					$do_qty += $branch_do_qty;
				}
			}else{
				if(BRANCH_CODE == 'HQ' || $r['do_branch_id'] == $bid){
					$do_qty = (($r['ctn']*$r['uom_fraction'])+$r['pcs'])*$r['packing_uom_fraction'];
					if($this->reorder_by_branch){
						$pending_do['by_branch'][$r['do_branch_id']]['do_qty'] += $do_qty;
						if($this->store_pending_data_in_details){
							$pending_do['do_data'][$key]['by_branch'][$r['do_branch_id']]['do_qty'] += $do_qty;
						}
					}
				}
			}
			
			if($last_key != $key){
                $last_key = $key;
			}
			
			if($do_qty <= 0){
				unset($pending_do['do_data'][$key]);
			}else{
				$pending_do['do_data'][$key]['do_qty'] += $do_qty;
				$pending_do['total']['do_qty'] += $do_qty;
			}
            
		}
		$con_multi->sql_freeresult();

		//if($pending_do)	print_r($pending_do);
		return $pending_do;
	}
	
	function ajax_show_pending_do(){
		global $con, $smarty, $sessioninfo, $config, $con_multi;
		
		$sid = mi($_REQUEST['sid']);
		$po_reorder_by_child = mi($_REQUEST['po_reorder_by_child']);
		$this->reorder_by_branch = mi($_REQUEST['reorder_by_branch']);
		if($this->reorder_by_branch)	$this->store_pending_data_in_details = 1;	// need to store details by PO
		$show_bid = mi($_REQUEST['show_bid']);
		$this->reorder_bid = $_REQUEST['submitted_reorder_bid'];
		
		if(!$sid)    die('Invalid SKU ID');
		
		$q1 = $con->sql_query("select * from sku_items where id=$sid");
		$si_info = $con->sql_fetchassoc($q1);
		$con->sql_freeresult($q1);

		$sku_id = $si_info['sku_id'];
		// if found this item is by child
		if($po_reorder_by_child) $filter = "id=$sid";
		else{ // found it is by SKU
			$filter = "sku_id=".mi($sku_id);
		}
		
		// get sku item id list
		$con->sql_query("select GROUP_CONCAT(id) as sid_str from sku_items where $filter");
		$sid_str = trim($con->sql_fetchfield(0));
		$con->sql_freeresult();
		
		if(!$sid_str)   die('Invalid SKU Items');

		//$con_multi = new mysql_multi();
		// get pending PO
		$pending_do = $this->get_sku_pending_do($sku_id, $sid_str);
		//$con_multi->close_connection();
		
		if($show_bid && $pending_do){
			foreach($pending_do['do_data'] as $do_key => $do){
				if(!$do['by_branch'][$show_bid]['do_qty']){
					unset($pending_do['do_data'][$do_key]);
				}
			}
		}
		
		//print_r($pending_po);
		$smarty->assign('pending_do', $pending_do);
		$smarty->assign('reorder_by_branch', $this->reorder_by_branch);
		$smarty->assign('show_bid', $show_bid);
		$smarty->assign('submitted_reorder_bid', $this->reorder_bid);
		$smarty->assign('show_type', 'do');
		$this->display('report.stock_reorder.pending_po.tpl');
	}
	
	private function get_sku_stock_balance($reorder_bid, $sid_str){
		global $con, $con_multi;
		
		if(!$reorder_bid || !is_array($reorder_bid))    die('Invalid Branch for sales');
		if(!$sid_str)   return array();
		
		$ret = array();
		
		$sql = "select sic.*, uom.fraction
		from sku_items_cost sic
		left join sku_items si on si.id=sic.sku_item_id
		left join uom on uom.id=si.packing_uom_id
		where sic.branch_id in (".join(',', $reorder_bid).") and sic.sku_item_id in ($sid_str)";
		$con_multi->sql_query($sql);
		while($sic = $con_multi->sql_fetchassoc()){
			$qty = $sic['qty']*$sic['fraction'];
			
			$ret['total']['qty'] += $qty;
			if($this->reorder_by_branch){
				$ret['by_branch'][$sic['branch_id']]['qty'] += $qty;
			}
		}
		$con_multi->sql_freeresult();
		return $ret;
	}
	
	function get_sku_pending_gra($sku_id, $sid_str){
		global $con, $smarty, $sessioninfo, $config, $con_multi;
		
		if(!$sid_str)   return false;
		if(!$con_multi) $con_multi = new mysql_multi();
		
		$filter = array();
		
		$filter[] = "gra.status in (0,2) and gra.returned = 0 and gi.sku_item_id in ($sid_str)";
		
		// get not yet deliver PO
		$bid = mi($this->branch_id);
		
		$filter_or = array();
		if(!$this->reorder_by_branch){
			// own branch
			$filter[] = "gra.branch_id=$bid";
		}else{
			// check sent to branch
			$filter[] = "gra.branch_id in (".join(',', $this->reorder_bid).")";
		}
		
		$filter = join(' and ', $filter);
		
		$sql = "select gra.branch_id, gra.id as gra_id, b.code as bcode, packing_uom.fraction as packing_uom_fraction, gi.sku_item_id, gi.qty,b.report_prefix
from gra
join gra_items gi on gi.branch_id=gra.branch_id and gi.gra_id=gra.id
join sku_items si on si.id=gi.sku_item_id
left join uom packing_uom on packing_uom.id=si.packing_uom_id
join branch b on b.id=gra.branch_id
where $filter";
		//print $sql."<br />";
        $con_multi->sql_query($sql);
        $pending_gra = array();
        $last_key = '';
        
        while($r = $con_multi->sql_fetchassoc()){
			$key = $r['branch_id'].'_'.$r['gra_id'];
			$pending_gra['gra_data'][$key]['report_prefix'] = $r['report_prefix'];
			$gra_qty = 0;
			
			if($last_key != $key){
                $pending_gra['gra_data'][$key]['branch_id'] = $r['branch_id'];
                $pending_gra['gra_data'][$key]['gra_id'] = $r['gra_id'];
                $pending_gra['gra_data'][$key]['bcode'] = $r['bcode'];
                $pending_gra['gra_data'][$key]['highlight_sku_id'] = $sku_id;
			}
			
			$gra_qty = $r['qty'];
			if($this->reorder_by_branch){
				$pending_gra['by_branch'][$r['branch_id']]['gra_qty'] += $gra_qty;
				if($this->store_pending_data_in_details){
					$pending_gra['gra_data'][$key]['by_branch'][$r['branch_id']]['gra_qty'] += $gra_qty;
				}
			}
			
			if($last_key != $key){
                $last_key = $key;
			}
			
			if($gra_qty <= 0){
				unset($pending_gra['gra_data'][$key]);
			}else{
				$pending_gra['gra_data'][$key]['gra_qty'] += $gra_qty;
				$pending_gra['total']['gra_qty'] += $gra_qty;
			}
            
		}
		$con_multi->sql_freeresult();

		//if($pending_gra)	print_r($pending_gra);
		return $pending_gra;
	}
	
	function ajax_show_pending_gra(){
		global $con, $smarty, $sessioninfo, $config, $con_multi;
		
		$sid = mi($_REQUEST['sid']);
		$po_reorder_by_child = mi($_REQUEST['po_reorder_by_child']);
		$this->reorder_by_branch = mi($_REQUEST['reorder_by_branch']);
		if($this->reorder_by_branch)	$this->store_pending_data_in_details = 1;	// need to store details by PO
		$show_bid = mi($_REQUEST['show_bid']);
		$this->reorder_bid = $_REQUEST['submitted_reorder_bid'];
		
		if(!$sid)    die('Invalid SKU ID');
		
		$q1 = $con->sql_query("select * from sku_items where id=$sid");
		$si_info = $con->sql_fetchassoc($q1);
		$con->sql_freeresult($q1);

		$sku_id = $si_info['sku_id'];
		// if found this item is by child
		if($po_reorder_by_child) $filter = "id=$sid";
		else{ // found it is by SKU
			$filter = "sku_id=".mi($sku_id);
		}
		
		// get sku item id list
		$con->sql_query("select GROUP_CONCAT(id) as sid_str from sku_items where $filter");
		$sid_str = trim($con->sql_fetchfield(0));
		$con->sql_freeresult();
		
		if(!$sid_str)   die('Invalid SKU Items');

		//$con_multi = new mysql_multi();
		// get pending GRA
		$pending_gra = $this->get_sku_pending_gra($sku_id, $sid_str);
		//$con_multi->close_connection();
		
		if($show_bid && $pending_gra){
			foreach($pending_gra['gra_data'] as $gra_key => $gra){
				if(!$gra['by_branch'][$show_bid]['gra_qty']){
					unset($pending_gra['gra_data'][$gra_key]);
				}
			}
		}
		
		//print_r($pending_gra);
		$smarty->assign('pending_gra', $pending_gra);
		$smarty->assign('reorder_by_branch', $this->reorder_by_branch);
		$smarty->assign('show_bid', $show_bid);
		$smarty->assign('submitted_reorder_bid', $this->reorder_bid);
		$smarty->assign('show_type', 'gra');
		$this->display('report.stock_reorder.pending_po.tpl');
	}
	
	function ajax_generate_do_request(){
		global $con, $smarty, $config, $sessioninfo, $appCore;
		
		$form = $_REQUEST;
		//print_r($form);exit;
		
		$bid = mi($sessioninfo['branch_id']);
		if($form['expect_do_date'])	$expect_do_date = date("Y-m-d", strtotime($form['expect_do_date']));
		$request_branch_id = mi($form['request_branch_id']);
		
		if(!$request_branch_id){
			die("No Supply branch is selected.");
		}
		
		if(!$form['vendor_sku'])	die("No item to generate.");
		
		$con->sql_query("select * from uom where fraction = 1 and active = 1 order by id limit 1");
		$uom = $con->sql_fetchassoc();
		$con->sql_freeresult();
		
		$items = array();
		foreach($form['vendor_sku'] as $vid=>$sid_list){
			foreach($sid_list as $sid=>$data){
				if(!$data['generate_po'])   continue;   // this item no need generate
				if(isset($items[$sid]))	continue;	// skip duplicate item
				
				$con->sql_query("select si.id as sid,sku.is_bom
				from sku_items si
				left join sku on sku.id=si.sku_id
				where si.id=$sid");
				$si = $con->sql_fetchassoc();
				$con->sql_freeresult();
				if(!$si)    die('SKU ITEM ID#'.$sid.' cannot find this item!');
				
				//$si['po_uom_id'] = $data['po_uom_id'];
				//$si['po_uom_fraction'] = $data['po_uom_fraction'];
				$si['suggest_po_qty'] = $data['suggest_po_qty'];
				
				if($config['sku_bom_additional_type'] && $si['is_bom'] && $si['bom_type']=='package'){
					$q_bi = $con->sql_query("select bi.sku_item_id as sid,bi.qty from bom_items bi where bi.bom_id=".mi($sid)." order by bi.sku_item_id");
					while($r = $con->sql_fetchassoc($q_bi)){
						$con->sql_query("select si.id as sid,sku.is_bom
						from sku_items si
						left join sku on sku.id=si.sku_id
						where si.id=".$r['sid']);
						$si = $con->sql_fetchassoc();
						$sid = mi($si['id']);
						$con->sql_freeresult();

						if(!$si)    die('SKU ITEM ID#'.$r['sid'].' cannot find this item!');
						$si['suggest_po_qty'] = $data['suggest_po_qty']*$r['qty'];
						
						$items[$sid] = $si;
					}
					$con->sql_freeresult($q_bi);
				}
				else{
					$items[$sid] = $si;
				}
			}
		}
		//print_r($items);exit;
		if(!$items) die('No item to generate DO.');
		
		// loop to collect data
		foreach($items as $sid => $r){
			$con->sql_query($q = "select si.id, sic.qty as stock_balance, sic2.qty as stock_balance2, ifnull(sip.price, si.selling_price) as selling_price,
			(select sum(sicp.qty*u2.fraction)
	from sku_items_cost sicp
	join sku_items si2 on si2.id=sicp.sku_item_id and sicp.branch_id=$bid
	left join uom u2 on u2.id=si2.packing_uom_id
	where si2.sku_id=si.sku_id) as group_stock_balance,
			(select sum(sicp.qty*u2.fraction)
	from sku_items_cost sicp
	join sku_items si2 on si2.id=sicp.sku_item_id and sicp.branch_id=$request_branch_id
	left join uom u2 on u2.id=si2.packing_uom_id
	where si2.sku_id=si.sku_id) as group_stock_balance2
			from sku_items si
			left join sku_items_cost sic on sic.branch_id=$bid and sic.sku_item_id=si.id
			left join sku_items_cost sic2 on sic2.branch_id=$request_branch_id and sic2.sku_item_id=si.id
			left join sku_items_price sip on sip.branch_id=$bid and sip.sku_item_id=si.id
			where si.id=$sid");
			//print $q;
			$tmp = $con->sql_fetchassoc();
			$con->sql_freeresult();
			
			$items[$sid]['stock_balance'] = $tmp['stock_balance'];
			$items[$sid]['stock_balance2'] = $tmp['stock_balance2'];
			$items[$sid]['group_stock_balance'] = $tmp['group_stock_balance'];
			$items[$sid]['group_stock_balance2'] = $tmp['group_stock_balance2'];
			$items[$sid]['selling_price'] = $tmp['selling_price'];
			
			$items[$sid]['sales_trend'] = $appCore->skuManager->getSKUSalesTrend($bid, $sid);
		}
		//print_r($items);exit;
		
		// loop to insert
		$item_generated = 0;
		foreach($items as $sid => $r){
			$upd = array();
			$upd['branch_id'] = $bid;
			$upd['request_branch_id'] = $request_branch_id;
			$upd['sku_item_id'] = $sid;
			$upd['user_id'] = $sessioninfo['id'];
			$upd['default_request_qty'] = $upd['request_qty'] = ceil($r['suggest_po_qty']);
			$upd['selling_price'] = $r['selling_price'];
			$upd['stock_balance'] = $r['stock_balance'];
			$upd['stock_balance2'] = $r['stock_balance2'];
			$upd['added'] = $upd['last_update'] = 'CURRENT_TIMESTAMP';
			$upd['sales_trend'] = serialize($r['sales_trend']);
			if($expect_do_date)	$upd['expect_do_date'] = $expect_do_date;
			$upd['group_stock_balance'] = $r['group_stock_balance'];
			$upd['group_stock_balance2'] = $r['group_stock_balance2'];
			$upd['comment'] = 'From Stock Reorder Report';
			$con->sql_query("insert into do_request_items ".mysql_insert_by_field($upd));
			$item_generated++;
		}
		
		if(!$item_generated)	die("No Item Generated");
		
		$ret = array();
		$ret['ok'] = 1;
		$ret['html'] = "$item_generated Item(s) generated to DO Request";
		$ret['html'] .= "<br />Go to <a href='do_request.php' target='_blank'>DO Request</a>";
		
		print json_encode($ret);
	}
	
	function get_sku_do_request($sku_id, $sid_str){
		global $con, $smarty, $sessioninfo, $config, $con_multi;
		
		if(!$sid_str)   return false;
		if(!$con_multi) $con_multi = new mysql_multi();
		$bid = mi($this->branch_id);
		
		$filter = array();
		$filter[] = "dri.active=1 and dri.status in (0,1) and dri.sku_item_id in ($sid_str)";
		$filter[] = "dri.branch_id=$bid";		
		$filter = join(' and ', $filter);
		
		$sql = "select dri.branch_id, dri.id, dri.sku_item_id, dri.request_qty, si.sku_item_code, si.mcode, si.artno, si.description
	from do_request_items dri 
	join sku_items si on si.id=dri.sku_item_id
	where $filter";
		//print $sql."<br />";
        $q1 = $con_multi->sql_query($sql);
		while($r = $con_multi->sql_fetchassoc($q1)){
			$key = $r['branch_id'].'_'.$r['id'];
			if($this->store_pending_data_in_details){
				$data['item_list'][$key] = $r;
			}
			$data['total_qty'] += $r['request_qty'];
		}
		$con_multi->sql_freeresult($q1);
		
		return $data;
	}
	
	function ajax_show_pending_do_request(){
		global $con, $smarty, $sessioninfo, $config, $con_multi;
		
		$sid = mi($_REQUEST['sid']);
		$po_reorder_by_child = mi($_REQUEST['po_reorder_by_child']);
		$this->store_pending_data_in_details = 1;	// need to store details by PO
		
		if(!$sid)    die('Invalid SKU ID');
		
		$q1 = $con->sql_query("select * from sku_items where id=$sid");
		$si_info = $con->sql_fetchassoc($q1);
		$con->sql_freeresult($q1);

		$sku_id = $si_info['sku_id'];
		// if found this item is by child
		if($po_reorder_by_child) $filter = "id=$sid";
		else{ // found it is by SKU
			$filter = "sku_id=".mi($sku_id);
		}
		
		// get sku item id list
		$con->sql_query("select GROUP_CONCAT(id) as sid_str from sku_items where $filter");
		$sid_str = trim($con->sql_fetchfield(0));
		$con->sql_freeresult();
		
		if(!$sid_str)   die('Invalid SKU Items');

		//$con_multi = new mysql_multi();
		// get data
		$do_request = $this->get_sku_do_request($sku_id, $sid_str);
		//$con_multi->close_connection();
		
		
		//print_r($pending_gra);
		$smarty->assign('do_request', $do_request);
		$smarty->assign('show_type', 'do_request');
		$this->display('report.stock_reorder.pending_po.tpl');
	}

	// stock reorder send email with csv attachment
	function sr_send_email(){
		global $sessioninfo, $con, $smarty, $config;

		include_once("include/class.phpmailer.php");

		$mailer = new PHPMailer(true);

		$to = $_REQUEST['to'];
		$cc = $_REQUEST['cc'];
		$subject = $_REQUEST['subject'];
		$path = $_REQUEST['path'];
		$message = $_REQUEST['message'];		
		$message = str_replace("<br />", "\n", $message);

		$to_arr = explode(",", $to);
		$cc_arr = explode(",", $cc);

		foreach($to_arr as $to_addr){
			if(!$mailer->ValidateAddress($to_addr)){
				print $err = "Invalid email address. \n";
			}
		}

		if($cc){
			foreach($cc_arr as $cc_addr){
				if(!$mailer->ValidateAddress($cc_addr)){
					print $err = "Invalid CC email address. \n";
				}
			}
		}

		// get the current logged on user's email who send this PO
		$q1 = $con->sql_query("select email from user where id = ".mi($sessioninfo['id']));
		$u_info = $con->sql_fetchassoc($q1);
		$con->sql_freeresult($q1);
		
		if($u_info['email']){
			if(is_array($config['smtp_mail_settings']) && $config['smtp_mail_settings']){
				$mailer->From = $u_info['email'];
				$mailer->FromName = $sessioninfo['u'];
				if($config['smtp_mail_settings']['reply_to_user']) $mailer->addReplyTo($u_info['email'], $sessioninfo['u']);
			}else{
				$mailer->From = "noreply@arms.com.my";
				$mailer->FromName = "Stock Reorder Notification";
				$mailer->addReplyTo($u_info['email'], $sessioninfo['u']);
			}
		}else{
			$mailer->From = "noreply@arms.com.my";
			$mailer->FromName = "Stock Reorder Notification";
		}

		if(!$err){
			foreach($to_arr as $to_addr){
				$mailer->AddAddress($to_addr);
			}
			if($cc){
				foreach($cc_arr as $cc_addr){
					$mailer->AddCC($cc_addr);
				}
			}
			$mailer->Subject = $subject;
			$mailer->AddAttachment($path);
			$mailer->Body = $message;

			$send_success = phpmailer_send($mailer, $mailer_info);
		}
	}
}

$STOCK_REORDER_REPORT = new STOCK_REORDER_REPORT('Stock Reorder Report');

?>