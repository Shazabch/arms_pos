<?php/*4/7/2011 10:29:35 AM Alex- new report coupon details module4/15/2011 10:18:59 AM Alex- add department, brand and vendor filter4/20/2011 11:28:13 AM Alex- change use counter name, will found duplicate key if use all branch and counter id6/24/2011 6:02:01 PM Andy- Make all branch default sort by sequence, code.2/1/2012 2:35:20 PM Alex- change filter of searching code to match all if over 12 digit*/include("include/common.php");include("include/class.report.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");class REPORT_COUPON_DETAILS extends Module{     function __construct($title){        global $con, $smarty, $sessioninfo;		//default assign        if (!$_REQUEST['to_date']) $_REQUEST['to_date'] = date('Y-m-d');		if (!$_REQUEST['from_date']) $_REQUEST['from_date'] = date('Y-m-d', strtotime("-1 month"));		//Branches		$con->sql_query("select * from branch where active=1 order by sequence,code");		while($r = $con->sql_fetchrow()){			$branches[$r['id']] = $r;			$this->branches[$r['id']]=$r['code'];		}		$smarty->assign("branches", $branches);        $bid  = get_request_branch(true);        $this->bid=$bid;		$this->get_counter_name(false);				$this->date_from = $_REQUEST['from_date'];		$this->date_to = $_REQUEST['to_date'];		//sessioninfo privilge        $filter[]= "cp.dept_id in (0, $sessioninfo[department_ids])";        if ($sessioninfo['brands'])            $filter[]= "cp.brand_id in (".join(",",array_keys($sessioninfo['brands'])).")";        if ($sessioninfo['vendors'])            $filter[]= "cp.vendor_id in (".join(",",array_keys($sessioninfo['vendors'])).")";		$this->ses_filter=join(' and ', $filter);		$sql="select cp.*, if(cp.dept_id = 0, 'All', c.description) as dept_desc			from coupon cp			left join category c on c.id=cp.dept_id			where $this->ses_filter			group by cp.dept_id			order by dept_desc";		$res_id2=$con->sql_query($sql);		while($cp = $con->sql_fetchassoc($res_id2)){			$dept_descrip[$cp['dept_id']]=$cp['dept_desc'];		}		$smarty->assign('dept_descrip',$dept_descrip);       	$smarty->assign('form',$_REQUEST);    	parent::__construct($title);    }	function _default(){		$this->display();		exit;	}	function show_report(){		$this->generate_report();		$this->display();	}	function output_excel(){	    global $smarty, $sessioninfo;				$this->generate_report();        include_once("include/excelwriter.php");    	$smarty->assign('no_header_footer', true);    	$filename = "coupon_details_".time().".xls";    	log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Coupon Details Report To Excel($filename)");    	Header('Content-Type: application/msexcel');		Header('Content-Disposition: attachment;filename='.$filename);		print ExcelWriter::GetHeader();		$this->display();		print ExcelWriter::GetFooter();	    exit;	}	function get_counter_name($ajax=true){	    global $con,$smarty;      $filter = array();      if ($this->bid)	$where = "where p.branch_id=$this->bid";		      $sql="select p.id as counter_id, p.network_name			from counter_settings p			$where group by p.network_name order by p.network_name";					$con->sql_query($sql);		while($r = $con->sql_fetchrow())		{			$this->pos_counters[$r['network_name']] = $r;		}		$con->sql_freeresult();		//if not ajax call		if (!$ajax){	      $smarty->assign('counters',$this->pos_counters);	      return;		}				$options="<select name='counter_name' >";		if ($this->pos_counters){			if (count($this->pos_counters)>1)	$options .= "<option value='all'>- All -</option>";			foreach ($this->pos_counters as $counter_name => $data){		        if ($_REQUEST['counter_name'] == $counter_name) $selected="selected";		        else  $selected="";							$options .= "<option value='$counter_name' $selected >$data[network_name]</option>";			}		}else{			$options .= "<option value=''>No Data</option>";		}		$options.="</select>";		print $options;	}	function generate_report(){		global $con, $smarty, $sessioninfo, $LANG;		$form=$_REQUEST;        	$con_multi=new mysql_multi();        	//$con_multi = $con;                	//===============Page Title===========    		if ($form['branch_id'] != 'all'){        		$filter[] = "pp.branch_id= $this->bid";			$counter_filter = " and p.branch_id=$this->bid";	  	}else{			$report_title_arr[] = "Branch: All";		}				//counter		if ($form['counter_name']){			if ($form['counter_name'] != 'all'){        	$counter_sql="select p.id as counter_id      			from counter_settings p      			where p.network_name=".ms($form['counter_name']). $counter_filter;      			 				$cs_id=$con->sql_query($counter_sql);        while ($cs=$con->sql_fetchassoc($cs_id)){          $counter_id_arr[]=$cs['counter_id'];          }        $con->sql_freeresult($cs_id);        	      $filter[] = "pp.counter_id in (".join(",",$counter_id_arr).")";			}else{		        $report_title_arr[] = "Counter: All";			}		}else		    $err[]=sprintf($LANG['COUP_MISS_DATA'], "counter");		if ($form['dept_id'] != ""){				if ($form['dept_id'] != "0"){	      	$filter[]= "cp.dept_id = $form[dept_id]";          $res_did=$con->sql_query("select description from category where id=$form[dept_id]");          $d=$con->sql_fetchassoc($res_did);          $con->sql_freeresult($res_did);	            $report_title_arr[] = "Department: $d[description]";			}else{            $report_title_arr[] = "Department: All";			}  		}else{			      $err[]=sprintf($LANG['COUP_MISS_DATA'], "department");		}		if ($form['r_type'] == "brand"){			if ($form['brand_id'] != ""){				if ($form['brand_id'] != "all"){		            $filter[]= "cp.brand_id = $form[brand_id]";		            $res_bid=$con->sql_query("select description from brand where id=$form[brand_id]");		            $b=$con->sql_fetchassoc($res_bid);		            $con->sql_freeresult($res_bid);		            $report_title_arr[] = "Brand: $b[description]";				}else{		            $report_title_arr[] = "Brand: All";				}			}else{				$err[]=sprintf($LANG['COUP_MISS_DATA'], "brand");			}		}elseif ($form['r_type'] == "vendor"){			if ($form['vendor_id'] != ""){				if ($form['vendor_id'] != "all"){		            $filter[]= "cp.vendor_id = $form[vendor_id]";		            $res_vid=$con->sql_query("select description from vendor where id=$form[vendor_id]");		            $v=$con->sql_fetchassoc($res_vid);		            $con->sql_freeresult($res_vid);		            $report_title_arr[] = "Vendor: $v[description]";				}else{                    $report_title_arr[] = "Vendor: All";				}			}else{				$err[]=sprintf($LANG['COUP_MISS_DATA'], "vendor");			}		}				//status		if ($form['status'])    $report_title_arr[] = "Status ".ucfirst($form['status']);        $report_title_arr[] = "Date: $this->date_from to $this->date_to";		//search code		if ($form['search_code']){		    $code_length = strlen($form['search_code']);		    if ($code_length == 7 )		    	$filter[]="cp.code=".ms($form['search_code']);            elseif ($code_length < 7 )                $filter[]="(cp.code = '".str_pad($form['search_code'],7,"0",STR_PAD_LEFT)."' or pp.remark = ".ms($form['search_code']).")";			else			    $filter[]="pp.remark=".ms($form['search_code']);	        $report_title_arr[] = "Code: $form[search_code]";		}		if ($err){       	$smarty->assign('err',$err);				return;		}		$report_title=join("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", $report_title_arr);		$smarty->assign('report_title',$report_title);        //====================================		//================start filter===================		//date		$from_date=ms($this->date_from);		$to_date=ms($this->date_to);		$filter[]="pp.type='Coupon'";		$filter[]= "pp.date between $from_date and $to_date";        $filter[]= "pos.cancel_status=0";		$filter[]=$this->ses_filter;		if ($form['status'] == "normal"){			$having="having coupon_code is not null and LENGTH(remark) = 12";		}elseif ($form['status'] == "abnormal"){			$having="having coupon_code is null or LENGTH(remark) <12 or LENGTH(remark) > 12";		}		if ($filter)    $where = "where ".join(" and ", $filter);		//==============end filter====================		$sql="select pp.*,count(pp.remark) as used, sum(pp.amount) as amount, pos.receipt_no,cp.code as coupon_code, branch.code as branch_code,cs.network_name, u.l as approved_by			from pos_payment pp			left join coupon cp on SUBSTRING(pp.remark,1,7) = cp.code			left join pos on pp.branch_id=pos.branch_id and pp.counter_id=pos.counter_id and pp.pos_id=pos.id and pp.date=pos.date			left join counter_settings cs on pp.branch_id=cs.branch_id and pp.counter_id=cs.id			left join branch on pp.branch_id=branch.id			left join user u on pp.approved_by=u.id			$where			group by pp.branch_id,pp.counter_id, pp.pos_id,pp.date,pos.receipt_no,pp.remark			$having			order by pp.date,receipt_no,coupon_code";		//print $sql;		$con_multi->sql_query($sql);		if ($con_multi->sql_numrows()>0){		    $n=0;			while($r=$con_multi->sql_fetchrow()){				$remark = $r['remark'];								if (!$r['coupon_code']){					$status = "Code not exist";                    $r['coupon_code'] = "Empty";				}elseif (strlen($remark) < 12) $status = 'Invalid code';				else				$status = 'OK';				$branch_id = $r['branch_id'];				$counter_id = $r['counter_id'];				$pos_id = $r['pos_id'];				$receipt_no = $r['receipt_no'];				$date = $r['date'];				$top_head[$branch_id]=$r['branch_code'];				$mid_head[$branch_id][$counter_id]=$r['network_name'];				//$detail[$branch_id][$counter_id][$date][$remark][$receipt_no]['remark'] = $r['remark'];        $detail[$branch_id][$counter_id][$date][$receipt_no][$remark]['pos_id'] += $pos_id;        $detail[$branch_id][$counter_id][$date][$receipt_no][$remark]['used'] += $r['used'];				$detail[$branch_id][$counter_id][$date][$receipt_no][$remark]['amount'] += $r['amount'];				$detail[$branch_id][$counter_id][$date][$receipt_no][$remark]['date'] = $r['date'];				$detail[$branch_id][$counter_id][$date][$receipt_no][$remark]['approved_by'] = $r['approved_by'];				$detail[$branch_id][$counter_id][$date][$receipt_no][$remark]['status'] = $status;				$n++;			}		}    $table=true;    $smarty->assign('table', $table);		$smarty->assign('top_head', $top_head);		$smarty->assign('mid_head', $mid_head);		$smarty->assign('detail', $detail);	}}$report = new REPORT_COUPON_DETAILS('Coupon Details Report');?>