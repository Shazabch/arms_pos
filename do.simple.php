<?php/**/include("include/common.php");include("do.include.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('DO_PREPARATION')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'DO_PREPARATION', BRANCH_CODE), "/index.php");class DO_PREPARATION extends Module{    function __construct($title){		global $con, $smarty, $config, $sessioninfo;		// load branches		$q1 = $con->sql_query("select * from branch where active=1 and id>0 order by sequence,code");		while($r = $con->sql_fetchassoc($q1)){			$this->branches[$r['id']] = $r;		}		$con->sql_freeresult($q1);		$smarty->assign('branch',$this->branches);				// load branch group		$this->load_branch_group();				$q1 = $con->sql_query("select id, code, fraction from uom where active order by code");		while($r = $con->sql_fetchassoc($q1)){			$uom[$r['id']] = $r;		}		$con->sql_freeresult($q1);		$smarty->assign("uom", $uom);				if($_REQUEST['do_type'] == "transfer"){			$this->do_type_label = "Transfer";			if($_REQUEST['branch_id']) $branch_id = $_REQUEST['branch_id'];			else $branch_id = $sessioninfo['branch_id'];						if($config['enable_gst'] && !$config['consignment_modules']){				// load gst interbranch				$gst_interbranch = array();				$q1 = $con->sql_query("select * from gst_interbranch where branch_id_1=$branch_id or branch_id_2=$branch_id");				while($r = $con->sql_fetchassoc($q1)){					if($r['branch_id_1']>0 && $r['branch_id_1'] != $branch_id){						$gst_interbranch[$r['branch_id_1']] = $r;					}elseif($r['branch_id_2']>0 && $r['branch_id_2'] != $branch_id){						$gst_interbranch[$r['branch_id_2']] = $r;					}				}				$con->sql_freeresult($q1);				//print_r($gst_interbranch);				$smarty->assign('gst_interbranch', $gst_interbranch);			}		}else{			if($_REQUEST['do_type'] == "credit_sales") $this->do_type_label = "Credit Sales";			else $this->do_type_label = "Cash Sales";						// load debtor list			$con->sql_query("select * from debtor where active=1 order by code");			while($r = $con->sql_fetchassoc()){				if($_REQUEST["do_type"] == "credit_sales"){					$block=unserialize($r["credit_sales_do_block_list"]);					if (!isset($block[$sessioninfo["branch_id"]])){						$debtor[$r['id']] = $r;					}				}else{					$debtor[$r['id']] = $r;				}			}			$smarty->assign("debtor", $debtor);		}				$smarty->assign("do_type_label", $this->do_type_label);		    	parent::__construct($title);    }		function _default(){		$this->display('do.simple.home.tpl');		exit;	}		function ajax_load_do_list(){		global $con, $sessioninfo, $smarty, $config;				$form = $_REQUEST;		$filters = array();		if (!$t) $t = intval($form['t']);		// always filter branch ID		$filters[] = "(do.do_branch_id=".mi($sessioninfo['branch_id'])." or do.branch_id=".mi($sessioninfo['branch_id']).")";		// always filter user ID		$filters[] = "do.user_id=".mi($sessioninfo['id']);				// always show draft DO only		$filters[] = "do.status = 0 and do.approved = 0 and do.active = 1";				$start = intval($form['s']);		switch($t){			case 0:				if ($form['search']==''){					print "<p align=center>I won't search empty string</p>";					exit;				}				$str = ' do.active=1 and (do.id = ' . mi($form['search']) . ' or do.do_no like '.ms('%'.replace_special_char($form['search'])).' or do.po_no like '.ms('%'.replace_special_char($form['search'])).' or do.inv_no like '.ms('%'.replace_special_char($form['search'])).' or b2.code='.ms($form['search']);				$form['search'] = trim($form['search']);				if ($form['do_type'] == 'credit_sales') {					$str .= 'or debtor.code like '.ms('%'.replace_special_char($form['search']).'%').' or debtor.description like '.ms('%'.replace_special_char($form['search']).'%');				}				else {					$str .= 'or b2.code like '.ms('%'.replace_special_char($form['search']).'%');					$str .= 'or do.open_info like '.ms('%'.replace_special_char($form['search']).'%');										$q4 = $con->sql_query('select id from branch where code like '.ms('%'.replace_special_char($form['search']).'%'));					while ($r4 = $con->sql_fetchassoc($q4)) {						$str .= 'or do.deliver_branch like '.ms('%"'.mi($r4['id']).'"%'); //search within a serialized array					}				}								if($config['do_generate_receipt_no']){					$str .= ' or do.do_receipt_no = '.mi($form['search']).')';				}else $str .= ')';								$filters[] = $str;				break;			case 1: // show saved DO				// do nothing				break;							case 2: // show inactive				$filters[] = "(do.status = 4 or do.status = 5) and do.active = 1";				break;							case 3: // search branch (consignment modules only)				if (BRANCH_CODE == "HQ" && $config['consignment_modules']){					$filters[] = "do.do_branch_id=".mi($form['search'])." or do.deliver_branch like '%\"".replace_special_char($form['search'])."\";%'" ;				}				break;		}		if (isset($form['sz']))			$sz = intval($form['sz']);		else{			if(isset($config['document_page_size'])) $sz=$config['document_page_size'];			else $sz = 25;		}		if(isset($form['do_type'])){			$do_type = $form['do_type'];			$filters[] = "do_type=".ms($do_type);		}				$q1 = $con->sql_query("select count(*) from do left join branch b2 on do.do_branch_id = b2.id left join debtor on do.debtor_id = debtor.id where ".join(" and ", $filters));				$r = $con->sql_fetchrow($q1);		$con->sql_freeresult($q1);		$total = $r[0];		if ($total > $sz){			if ($start > $total) $start = 0;			// create pagination			$pg = "<b>Goto Page</b> <select onchange=\"DO_PREPARATION_MODULE.tab_sel($t,this.value)\">";			for ($i=0,$p=1;$i<$total;$i+=$sz,$p++){				$pg .= "<option value=$i";				if ($i == $start){					$pg .= " selected";				}				$pg .= ">$p</option>";			}			$pg .= "</select>";			$smarty->assign("pagination", "<div style=\"padding:4px;\">$pg</div>");		}				$q2=$con->sql_query("select do.*, category.description as dept_name, branch.report_prefix as branch_prefix, branch.code as branch_name_1, b2.code as branch_name_2, 							bah.approvals, user.u as user_name,bah.approval_order_id, debtor.code as debtor_code, debtor.description as debtor_description 							from do 							left join category on do.dept_id = category.id 							left join branch on do.branch_id = branch.id 							left join branch b2 on do.do_branch_id = b2.id 							left join user on user.id = do.user_id 							left join branch_approval_history bah on bah.id = do.approval_history_id and bah.branch_id = do.branch_id 							left join debtor on do.debtor_id = debtor.id 							where ".join(" and ", $filters)."							order by do.last_update desc							limit $start, $sz");		$do_list = array();		$debtors = $smarty->get_template_vars('debtor');		while ($r2= $con->sql_fetchassoc($q2)){			$r2['open_info'] = unserialize($r2['open_info']);				$r2['deliver_branch']=unserialize($r2['deliver_branch']);			if($r2['deliver_branch']){				foreach ($r2['deliver_branch'] as $k=>$v){					$q3=$con->sql_query("select code from branch where id=$v");					$r3 = $con->sql_fetchrow($q3);					$r2['d_branch']['id'][$k]=$v;					$r2['d_branch']['name'][$k]=$r3['code'];				}			}			if($r2['debtor_id'] && !$debtors[$r2['debtor_id']]){				$sql = $con->sql_query("select * from debtor where id = ".mi($r2['debtor_id']));				$debtor_info = $con->sql_fetchassoc($sql);				$con->sql_freeresult($sql);								if($debtor_info){					$debtors[$debtor_info['id']] = $debtor_info;				}			}						$do_list[]=$r2;		}		$con->sql_freeresult($q2);				if($debtors) $smarty->assign("debtor", $debtors);		$smarty->assign("do_type", $do_type);		$smarty->assign("do_list", $do_list);		$smarty->display("do.simple.list.tpl");	}		function open(){		global $con, $sessioninfo, $smarty, $config;				$form = $_REQUEST;		//if the DO ID is not NEW and it is not refresh		if($form['id'] && !$this->is_refresh){			//get Existing DO header and check DO permission			$form=load_do_header($form['id'], $form['branch_id']);			if(!$form || ($form['user_id']!= $sessioninfo['id'] && $sessioninfo['level']<9999)){				$smarty->assign("url", "/do.simple.php");				$smarty->assign("title", "DO Preparation");				if(!$form) $smarty->assign("subject", sprintf($LANG['DO_NOT_FOUND'], $id));				else $smarty->assign("subject", sprintf($LANG['DO_NO_ACCESS'], $id));				$smarty->display("redir.tpl");				exit;			}elseif($form['status'] && $form['status']!=2){ //if the DO already submit and not the reject DO, goto view only.				$smarty->assign("readonly", 1);			}		}else{ // need to assign something for display purpose for NEW DO			$form['branch_id'] = $sessioninfo['branch_id'];			$form['do_date'] = date("Y-m-d");			if($config['enable_gst'] && $form['do_date']){				$form['is_under_gst'] = check_do_gst_status($form);			}		}				if($config['enable_gst'] && $form['is_under_gst']){			// load special exemption relief claus remark if it is new DO or existing DO but does not have the remark (edit mode)			if(!$form['special_exemption_rcr']){				$q1 = $con->sql_query("select * from gst_settings where setting_name = 'special_exemption_relief_claus_remark'");				$sercr_info = $con->sql_fetchassoc($q1);				$con->sql_freeresult($q1);				$form['special_exemption_rcr'] = $sercr_info['setting_value'];				if(!$form['special_exemption_rcr']) $form['special_exemption_rcr'] = $config['se_relief_claus_remark'];			}		}				$prms = array();		$prms['do_id'] = $form['id'];		$prms['branch_id'] = $form['branch_id'];		$do_items = $this->load_do_items($prms);				$smarty->assign("do_items", $do_items);		$smarty->assign("form", $form);		$smarty->display("do.simple.new.tpl");	}		function refresh(){				$this->is_refresh = true;		$this->open();	}		function view(){		global $con, $sessioninfo, $smarty, $config;				$form = $_REQUEST;		//get Existing DO header		$smarty->assign("readonly", 1);		$this->open();	}		function save(){		global $con, $sessioninfo, $smarty, $config;				$form = $_REQUEST;				// check if got debtor got mprice set or not, otherwise load default price type from $config.do_default_price_from		if($form['debtor_id']){			$q1 = $con->sql_query("select * from debtor where id = ".mi($form['debtor_id']));			$debtor_info = $con->sql_fetchassoc($q1);			$con->sql_freeresult($q1);		}			if($debtor_info['debtor_mprice_type']){	// this debtor got mprice			$form['price_indicate'] = $debtor_info['debtor_mprice_type'];		}else{			// hardcoded since the value of price_indicate is not the same with config			if($config['do_default_price_from']){				switch($t){					case "cost":						$form['price_indicate'] = 1;						break;					case "selling":						$form['price_indicate'] = 2;						break;					case "last_do":						$form['price_indicate'] = 3;						break;				}			}else $form['price_indicate'] = 2; // hardcode it to use selling (default value from config.php)		}				$_REQUEST['price_indicate'] = $form['price_indicate'];				// validate data		$errm = $this->data_validate($form);				if($errm){			$smarty->assign("errm", $errm);			$this->is_refresh = true;			$this->open();			exit;		}						if(count($form['deliver_branch']) == 1){			$_REQUEST['do_branch_id'] = $form['do_branch_id'] = $form['deliver_branch']['0'];			$form['deliver_branch'] = '';		}				// update do		$upd = array();		$upd['do_date'] = $form['do_date'];		$upd['dept_id'] = $form['dept_id'];		if($form['deliver_branch']) $upd['deliver_branch'] = serialize($form['deliver_branch']);		else $upd['deliver_branch'] = "";		$upd['do_branch_id'] = $form['do_branch_id'];		$upd['total_ctn'] = $form['total_ctn'];		$upd['total_pcs'] = $form['total_pcs'];		$upd['price_indicate'] = $form['price_indicate'];		$upd['remark'] = $form['remark'];		$upd['debtor_id'] = $form['debtor_id'];		$upd['last_update'] = "CURRENT_TIMESTAMP";		$upd['create_type'] = 1; // normal creation		$upd['open_info'] = serialize($form['open_info']);		$upd['is_under_gst'] = $form['is_under_gst'];		$upd['is_special_exemption'] = $form['is_special_exemption'];		if($upd['is_special_exemption']) $upd['special_exemption_rcr'] = $form['special_exemption_rcr'];		$upd['amt_need_update'] = 1;				// is newly insert DO		if(!$form['id']){			$upd['branch_id'] = $form['branch_id'];			$upd['user_id'] = $sessioninfo['id'];			$upd['do_type'] = $form['do_type'];			$upd['added'] = "CURRENT_TIMESTAMP";			$upd['active'] = 1;						$con->sql_query("insert into do ".mysql_insert_by_field($upd));			$form['id'] = $con->sql_nextid();		}else{ // update do details			$con->sql_query("update do set ".mysql_update_by_field($upd)." where id = ".mi($form['id'])." and branch_id = ".mi($form['branch_id']));						// delete the current do items from database			$con->sql_query("delete from do_items where do_id = ".mi($form['id'])." and branch_id = ".mi($form['branch_id']));		}				$do_items = $this->process_do_items();				// loop do items and insert		foreach($do_items as $key=>$r){			$upd = array();			$upd['sku_item_id']=$r['sku_item_id'];			$upd['do_id']=$form['id'];			$upd['branch_id']=$form['branch_id'];			$upd['artno_mcode']=$r['artno_mcode'];			$upd['cost']=$r['cost'];			$upd['cost_price']=$r['cost_price']*$r['uom_fraction'];			$upd['foreign_cost_price']=$r['foreign_cost_price']*$r['uom_fraction'];			$upd['display_cost_price_is_inclusive'] = $r['display_cost_price_is_inclusive'];			$upd['display_cost_price'] = $r['display_cost_price']*$r['uom_fraction'];			$upd['selling_price']=$r['selling_price'];			$upd['uom_id']=$r['uom_id'];			$upd['ctn']=$r['ctn'];			$upd['pcs']=$r['pcs'];			$upd['ctn_allocation']=serialize($r['ctn_allocation']);			$upd['pcs_allocation']=serialize($r['pcs_allocation']);			$upd['selling_price_allocation']=serialize($r['selling_price_allocation']);			$upd['price_no_history'] = $r['price_no_history'];			$upd['gst_id'] = $r['gst_id'];			$upd['gst_code'] = $r['gst_code'];			$upd['gst_rate'] = $r['gst_rate'];			$upd['stock_balance1'] = $r['stock_balance1'];			$upd['stock_balance2'] = $r['stock_balance2'];			$upd['stock_balance2_allocation'] = serialize($r['stock_balance2_allocation']);			$upd['parent_stock_balance1'] = $r['parent_stock_balance1'];			$upd['parent_stock_balance2'] = $r['parent_stock_balance2'];			$upd['parent_stock_balance2_allocation'] = serialize($r['parent_stock_balance2_allocation']);			$upd['bom_id'] = $r['bom_id'];			$upd['bom_ref_num'] = $r['bom_ref_num'];			$upd['bom_qty_ratio'] = $r['bom_qty_ratio'];						if($form['do_type'] == 'credit_sales') $upd['price_indicate'] = "Credit Sales DO";				else $upd['price_indicate'] = $form['price_indicate'];						$con->sql_query("insert into do_items ".mysql_insert_by_field($upd));		}				header("Location: /do.simple.php?do_type=$form[do_type]&t=$form[a]&save_id=$form[id]");	}		function cancel(){		global $con, $sessioninfo, $smarty, $config;				$form = $_REQUEST;	}		function load_do_items($prms){		global $con, $sessioninfo, $smarty, $config;				$form = $_REQUEST;		$do_items = $si_info_list = array();		$do_id = $prms['do_id'];		$branch_id = $prms['branch_id'];		if(!$this->is_refresh){ // found it is not refreshing, load items from database			$q1 = $con->sql_query("select di.*, si.sku_item_code, si.artno, si.mcode, si.description, u.code as master_uom_code, u.fraction as master_uom_fraction,								   u2.fraction as uom_fraction								   from do_items di 								   left join sku_items si on si.id = di.sku_item_id								   left join uom u on u.id = si.packing_uom_id								   left join uom u2 on u2.id = di.uom_id								   where di.do_id = ".mi($do_id)." and di.branch_id = ".mi($branch_id)." 								   order by di.id");						while($r = $con->sql_fetchassoc($q1)){				$r['ctn_allocation'] = unserialize($r['ctn_allocation']);				$r['pcs_allocation'] = unserialize($r['pcs_allocation']);				$do_items[$r['id']] = $r;			}			$con->sql_freeresult($q1);		}else{ // need to construct the item list base on current template			if(!$form['inp_sku_item_id']) return;						foreach($form['inp_sku_item_id'] as $key=>$sid){				$do_items[$key]['sku_item_id'] = $sid;				$do_items[$key]['sku_id'] = $form['sku_id'][$key];				$do_items[$key]['artno_mcode'] = $form['artno_mcode'][$key];				$do_items[$key]['uom_id'] = $form['uom_id'][$key];				$do_items[$key]['uom_fraction'] = $form['uom_fraction'][$key];				$do_items[$key]['inp_item_doc_allow_decimal'] = $form['inp_item_doc_allow_decimal'][$key];				$do_items[$key]['bom_id'] = $form['bom_id'][$key];				$do_items[$key]['bom_ref_num'] = $form['bom_ref_num'][$key];				$do_items[$key]['bom_qty_ratio'] = $form['bom_qty_ratio'][$key];				$do_items[$key]['item_real_id'] = $form['item_real_id'][$key];				$do_items[$key]['is_first_bom'] = $form['is_first_bom'][$key];								// need to get bom parent info				if($do_items[$key]['bom_id'] && $do_items[$key]['is_first_bom']){					$q1 = $con->sql_query("select si.*, if(si.artno is null or si.artno='',si.mcode, si.artno) as artno_mcode, sku.is_bom										   from sku_items si										   join sku on sku.id=si.sku_id										   where si.id=".mi($do_items[$key]['bom_id']));					$bom_info = $con->sql_fetchassoc($q1);					$con->sql_freeresult($q1);										$do_items[$key]['bom_parent_si_code'] = $bom_info['sku_item_code'];					$do_items[$key]['bom_parent_si_desc'] = $bom_info['description'];					$do_items[$key]['bom_parent_si_artno_mcode'] = $bom_info['artno_mcode'];				}								// load sku item info				if(!isset($si_info_list[$sid])){					$q1 = $con->sql_query("select si.sku_item_code, si.artno, si.description, u.code as master_uom_code, u.fraction as master_uom_fraction										   from sku_items si										   left join uom u on u.id = si.packing_uom_id										   where si.id = ".mi($sid));										$si_info_list[$sid] = $con->sql_fetchassoc($q1);					$con->sql_freeresult($q1);									}				if($si_info_list[$sid]) $do_items[$key] = array_merge($do_items[$key], $si_info_list[$sid]);								// load qty by branch or single branch				if($form['deliver_branch']){					foreach($form['deliver_branch'] as $bid){						$do_items[$key]['ctn_allocation'][$bid] = $form['qty_ctn'][$key][$bid];						$do_items[$key]['pcs_allocation'][$bid] = $form['qty_pcs'][$key][$bid];					}				}else{					$do_items[$key]['ctn'] = $form['qty_ctn'][$key];					$do_items[$key]['pcs'] = $form['qty_pcs'][$key];				}							}		}				return $do_items;	}		function ajax_add_item(){		global $con, $sessioninfo, $smarty, $config, $LANG;				$form=$_REQUEST;			$do_branch_id = mi($form['do_branch_id']);		$is_open_item = $_REQUEST['oi'];				if($is_open_item) $sku_item_id = 0;				if (!$this->is_grn_barcode){			$sku_item_id=mi($form['sku_item_id']);			if($r) $qty_pcs=$form['qty_pcs'];			else $qty_pcs='';		}else{			$grn_barcode = trim($_REQUEST['grn_barcode']);			if ($grn_barcode){				$sku_info = get_grn_barcode_info($grn_barcode,true);				if ($sku_info['sku_item_id']){					// is inactive item					$q1 = $con->sql_query("select active from sku_items where id = ".mi($sku_info['sku_item_id'])." limit 1");					$tmp_si_info = $con->sql_fetchassoc($q1);					$con->sql_freeresult($q1);					if(!$tmp_si_info['active']){						fail($LANG['PO_ITEM_IS_INACTIVE']);					}									$sku_item_id = $sku_info['sku_item_id'];					if(!$form['deliver_branch']) $qty_pcs = mf($sku_info['qty_pcs']);					$selling_price = mf($sku_info['selling_price']);					if(isset($sku_info['new_cost_price'])) $cost_price = $sku_info['new_cost_price'];				}			}		}				// bom progress goes here		$bom_ref_num = time();		$is_bom_package = false;		$si_info_list = array();			// if got config bom additional type		if($config['sku_bom_additional_type']){			// check is bom package or not			$q1 = $con->sql_query("select si.*, if(si.artno is null or si.artno='',si.mcode, si.artno) as artno_mcode, sku.is_bom								   from sku_items si								   join sku on sku.id=si.sku_id								   where si.id=".mi($sku_item_id));			$bom_info = $con->sql_fetchassoc($q1);			$con->sql_freeresult($q1);						if($bom_info['is_bom'] && $bom_info['bom_type']=='package'){				$is_bom_package = true;				$bom_ref_num++;								$q1 = $con->sql_query("select bi.sku_item_id as sid,bi.qty from bom_items bi where bi.bom_id=".mi($sku_item_id)." order by bi.sku_item_id");				$first_bom = 1;				while($r1 = $con->sql_fetchassoc($q1)){					$tmp_sid = mi($r1['sid']);					$pcs = $r1['qty'] * $config['sku_bom_package_default_qty_in_docs'];										$si_info_list['list'][] = array(						'sid'=> $tmp_sid,						'pcs'=> $pcs,						'bom_id' => $sku_item_id,						'bom_ref_num' => $bom_ref_num,						'bom_qty_ratio' => $r1['qty'],						'first_bom' => $first_bom					);										$first_bom = 0;				}				$con->sql_freeresult($q1);			}		}				if(!$is_bom_package){			$si_info_list['list'][] = array(				'sid'=>$sku_item_id,				'pcs'=>$qty_pcs			);		}		if($form['do_type'] == "transfer" && !$form['deliver_branch']) $bid = $do_branch_id;		else $bid = $form['branch_id'];				// new item id		if($form['uom_id']) $new_item_id = end(array_keys($form['uom_id']));		else $new_item_id = 0;				$smarty->assign("bid", $bid);		$smarty->assign("do_type", $form['do_type']);		$smarty->assign("form", $form);			if(!$si_info_list['list']) fail($LANG['DO_NO_ITEM_SELECTED']);	// no item?				// check total items if created PO		if($config['do_set_max_items'] && count($si_info_list) >= $config['do_set_max_items']){			fail(sprintf($LANG['DO_MAX_ITEM_CANT_ADD'], $config['do_set_max_items']));		}				foreach($si_info_list['list'] as $tmp_di){			$item = $filter = $err_msg = array();			$sid = $tmp_di['sid'];			$qty_pcs = $tmp_di['pcs'];			$filter[] = "si.id=".mi($sid);			if($config['do_must_check_dept']) $filter[] = " c.department_id in (".join(",",array_keys($sessioninfo['departments'])).")";						$filter = "where ".join(' and ', $filter);			$q1=$con->sql_query("select si.sku_item_code, si.description as description, si.sku_id,								if(si.artno is null or si.artno='',si.mcode, si.artno) as artno_mcode, 								si.id as sku_item_id, 1 as uom_id, 1 as uom_fraction, u.code as master_uom_code,								u.fraction as master_uom_fraction, si.packing_uom_id as master_uom_id, sku.have_sn, 								si.doc_allow_decimal, si.sn_we, si.sn_we_type, si.artno, si.mcode								from sku_items si								left join sku on sku_id = sku.id								left join uom u on u.id = si.packing_uom_id								left join category c on c.id=sku.category_id								$filter");			$item = $con->sql_fetchassoc($q1);			$con->sql_freeresult($q1);						$item['bom_id'] = $tmp_di['bom_id'];			$item['bom_ref_num'] = $tmp_di['bom_ref_num'];			$item['bom_qty_ratio'] = $tmp_di['bom_qty_ratio'];						// need to load the BOM original sku information for further usage			if($item['bom_ref_num'] && $tmp_di['first_bom']){				$item['is_first_bom'] = 1;				$item['bom_parent_si_code'] = $bom_info['sku_item_code'];				$item['bom_parent_si_desc'] = $bom_info['description'];				$item['bom_parent_si_artno_mcode'] = $bom_info['artno_mcode'];			}						if(ceil($qty_pcs) != $qty_pcs && !$item['doc_allow_decimal']){ // is decimal points qty				$err_msg[] = "* SKU Item [".$item['sku_item_code']."] is not decimal points item, whereas qty auto set to empty.";				$qty_pcs = "";			}						// need to loop						if (!$item) {				fail(sprintf($LANG['DO_INVALID_ITEM'], $sid));			}						// check if item allow duplicate			if(!$config['do_item_allow_duplicate'] && $form['inp_sku_item_id'] && in_array($sid, $form['inp_sku_item_id'])){				$tmp_item = array();				$tmp_item[0]['item_existed'] = 1;				$tmp_item_id = array_search($sid, $form['inp_sku_item_id']); // get the duplicated item key				$tmp_item[0]['item_id'] = $tmp_item_id;				$tmp_item[0]['bom_ref_num'] = $ret['bom_ref_num'];				print json_encode($tmp_item);				exit;			}						if($form['deliver_branch']){				foreach($form['deliver_branch'] as $bid){					$item['pcs_allocation'][$bid] = $qty_pcs;				}			}else{				// single branch				$item['pcs'] = $qty_pcs;			}			$new_item_id += 1;			$smarty->assign("item_id", $new_item_id);			$smarty->assign("item", $item);							$tpl = $smarty->fetch("do.simple.new.items.tpl");			$temp = array();			$temp['rowdata'] = "<tr id=titem".$new_item_id.">".$tpl."</tr>";			if($err_msg) $temp['error'] = join("\n", $err_msg);						$row_item[] = $temp;		}				print json_encode($row_item);	}		function ajax_add_grn_barcode_item(){				$this->is_grn_barcode = true;		$this->ajax_add_item();	}		function process_do_items(){		global $con, $sessioninfo, $smarty, $config;				$form = $_REQUEST;		$branch_id = $form['branch_id'];		$do_branch_id = $form['do_branch_id'];		if(!$do_branch_id && ($form['do_type'] == "open" || $form['do_type'] == "credit_sales"))	$do_branch_id = $branch_id;		$do_items = array();				foreach($form['inp_sku_item_id'] as $key=>$sid){			$item = array();			$item['sku_item_id'] = $sid;			$item['sku_id'] = $form['sku_id'][$key];			$item['uom_id'] = $form['uom_id'][$key];			$item['uom_fraction'] = $form['uom_fraction'][$key];			$item['inp_item_doc_allow_decimal'] = $form['inp_item_doc_allow_decimal'][$key];			$item['bom_id'] = $form['bom_id'][$key];			$item['bom_ref_num'] = $form['bom_ref_num'][$key];			$item['bom_qty_ratio'] = $form['bom_qty_ratio'][$key];			$item['item_real_id'] = $form['item_real_id'][$key];			$item['is_first_bom'] = $form['is_first_bom'][$key];						// generate stock balance 1			$sql = "select sku_item_id,qty from sku_items_cost where branch_id=".mi($branch_id)." and sku_item_id=".mi($sid);			$con->sql_query($sql) or die(mysql_error());			$item['stock_balance1']=$con->sql_fetchfield('qty');						//generate parent stock balance 1			if($config['show_parent_stock_balance']) {				$q1 = $con->sql_query("select (sic.qty*uom.fraction) as parent_stock_balance									   from sku_items si									   left join sku_items_cost sic on sic.branch_id=".mi($branch_id)." and sic.sku_item_id=si.id									   left join uom on uom.id=si.packing_uom_id									   where si.sku_id=".mi($item['sku_id']));							$parent_stock_balance1 = 0;				while($d = $con->sql_fetchassoc($q1)){					$parent_stock_balance1 += $d['parent_stock_balance'];				}				$con->sql_freeresult($q1);				$item['parent_stock_balance1'] = $parent_stock_balance1;			}						// get stock balance 2 for DO transfer			if($form['do_type'] == "transfer"){				// generate stock balance 2				if ($form['deliver_branch']){ // is transfer DO 					foreach($form['deliver_branch'] as $bid){						// stock balance 2						$q1 = $con->sql_query("select sku_item_id, qty from sku_items_cost where branch_id=".mi($bid)." and sku_item_id=".mi($sid));						$sb2_info = $con->sql_fetchassoc($q1);						$con->sql_freeresult($q1);						$item['stock_balance2_allocation'][$bid] = $sb2_info['qty'];												//parent stock balance 2						if($config['show_parent_stock_balance']){							$sql2 = $con->sql_query("select (sic.qty*uom.fraction) as parent_stock_balance													from sku_items si													left join sku_items_cost sic on sic.branch_id=".mi($bid)." and sic.sku_item_id=si.id													left join uom on uom.id=si.packing_uom_id													where si.sku_id=".mi($item['sku_id']));													$parent_stock_balance2_allocation = 0;							while($data = $con->sql_fetchassoc($sql2)) {								$parent_stock_balance2_allocation += $data['parent_stock_balance'];							}							$item['parent_stock_balance2_allocation'][$bid] = $parent_stock_balance2_allocation;							$con->sql_freeresult($sql2);						}					}					$item['stock_balance2_allocation'] = serialize($item['stock_balance2_allocation']);					$item['parent_stock_balance2_allocation'] = serialize($item['parent_stock_balance2_allocation']);				}else{									// stock balance 2					$sql = "select sku_item_id,qty from sku_items_cost where branch_id=".mi($do_branch_id)." and sku_item_id=".mi($sid);					$con->sql_query($sql) or die(mysql_error());					$item['stock_balance2']=$con->sql_fetchfield('qty');										//parent stock balance 2					if($config['show_parent_stock_balance']) {						$sql2 = $con->sql_query("select (sic.qty*uom.fraction) as parent_stock_balance												from sku_items si												left join sku_items_cost sic on sic.branch_id=".mi($do_branch_id)." and sic.sku_item_id=si.id												left join uom on uom.id=si.packing_uom_id												where si.sku_id=".mi($item['sku_id']));											$parent_stock_balance2 = 0;						while($data= $con->sql_fetchassoc($sql2)) {							$parent_stock_balance2 += $data['parent_stock_balance'];						}						$item['parent_stock_balance2'] = $parent_stock_balance2;						$con->sql_freeresult($sql2);					}				}			}						// GST			if($config['enable_gst'] && $form['is_under_gst']){				if($form['is_special_exemption']){					$use_gst = get_special_exemption_gst();					$is_special_exemption = true;				}else{					$output_gst = get_sku_gst("output_tax", $sid);					if($output_gst){						$use_gst = $output_gst;					}				}								if(!$use_gst){					$use_gst = $gst_list[0];				}								$item['gst_id'] = $use_gst['id'];				$item['gst_code'] = $use_gst['code'];				$item['gst_rate'] = $use_gst['rate'];			}									if($config['consignment_modules'] && $config['cm_use_deliver_branch_sp']){				$sp_bid = $do_branch_id;			}else $sp_bid = $branch_id;						// load cost price			$prms = array();			$prms['sku_item_id'] = $sid;			$prms['branch_id'] = $sp_bid;			$prms['price_indicate'] = $form['price_indicate'];			$prms['use_gst'] = $use_gst;			$prms['is_special_exemption'] = $is_special_exemption;			$tmp = $this->get_item_cost_price($prms);			$item = array_merge($item, $tmp);						// load selling price			$tmp_sell = get_item_selling($sid, $form['deliver_branch'], $do_branch_id, $form['do_date']);			$item = array_merge($item, $tmp_sell);			$tmp_do_date = date("Y-m-d", strtotime($form['do_date']." +1 day"));			$tmp_cost = get_sku_item_cost_selling($branch_id, $sid, $tmp_do_date, array("cost"));			if($tmp_cost) $item = array_merge($item, $tmp_cost);						if($form['do_type'] == 'credit_sales') $item['price_indicate'] = "Credit Sales DO";				else $item['price_indicate'] = $form['price_indicate'];						if(count($form['deliver_branch']) == 1){				$item['ctn']=mf($form['qty_ctn'][$key][$do_branch_id]);				$item['pcs']=mf($form['qty_pcs'][$key][$do_branch_id]);				$item['selling_price']=doubleval($item['selling_price_allocation'][$do_branch_id]);				$item['selling_price_allocation']='';				$item['ctn_allocation']='';				$item['pcs_allocation']='';			}else{				if($form['deliver_branch']){					$item['ctn_allocation']=$form['qty_ctn'][$key];					$item['pcs_allocation']=$form['qty_pcs'][$key];				}				else{					$item['ctn']=mf($form['qty_ctn'][$key]);					$item['pcs']=mf($form['qty_pcs'][$key]);					$item['ctn_allocation']='';					$item['pcs_allocation']='';				}						}			$do_items[] = $item;		}				return $do_items;	}		function get_item_cost_price($prms){		global $con, $smarty, $config;				$tmp=array();		$form = $_REQUEST;		$sku_item_id = $prms['sku_item_id'];		$branch_id = $prms['branch_id'];		$price_indicate = $prms['price_indicate'];		$output_gst = $prms['output_gst'];		$is_special_exemption = $prms['is_special_exemption'];		$next_timestamp = ms(date("Y-m-d H:i:s",strtotime("+1 day", strtotime($form['do_date']))));				// it is credit sales DO		if($form['do_type']=='credit_sales'){			if(!$form['no_use_credit_sales_cost']){				// always get last debtor price if got history				$debtor_id = mi($form['debtor_id']);				$sql = "select (di.cost_price/uom.fraction) as cost_price, (di.display_cost_price/uom.fraction) as display_cost_price, di.display_cost_price_is_inclusive				from do_items di		left join do on do.id=di.do_id and do.branch_id=di.branch_id		left join uom on uom.id=di.uom_id		where do.do_type='credit_sales' and di.sku_item_id=".mi($sku_item_id)." and do.branch_id=".mi($branch_id)." and do.debtor_id=$debtor_id and do.id<>".mi($form['id'])." and do.approved=1 order by do.do_date desc,do.do_no desc limit 1";				$con->sql_query($sql) or die(mysql_error());				$r = $con->sql_fetchrow();				$con->sql_freeresult();						if($r){					$tmp['cost_price'] = $r['cost_price'];					$tmp['display_cost_price'] = $r['display_cost_price'];					$tmp['display_cost_price_is_inclusive'] = $r['display_cost_price_is_inclusive'];					return $tmp;				}			}						// no last debtor price, use price indicator			$tmp['price_no_history'] = 1;		}				//chk the option from user, if get from selling then get from sku_items_price if get from cost then get the price as last time.		if($price_indicate==3){			// get last DO price			$q1=$con->sql_query("select cost_price from do_items left join do on do_id = do.id and do_items.branch_id = do.branch_id where do.active=1 and do_items.sku_item_id=".mi($sku_item_id)." and do_items.branch_id=$branch_id order by do_items.id desc limit 1");			$r = $con->sql_fetchrow($q1);			$con->sql_freeresult($q1);			$decimal_points=2;		}		elseif($price_indicate==2){			// get selling price			$q1=$con->sql_query("select price from sku_items_price_history where sku_item_id=".mi($sku_item_id)." and branch_id=$branch_id and added<$next_timestamp order by added desc limit 1");			$r = $con->sql_fetchrow($q1);			$con->sql_freeresult($q1);			$decimal_points=2;		}		elseif($price_indicate==1){			// cost			$q2=$con->sql_query("select grn_cost from sku_items_cost_history where sku_item_id=".mi($sku_item_id)." and branch_id=$branch_id and date<$next_timestamp order by date desc limit 1");			$r = $con->sql_fetchrow($q2);			$con->sql_freeresult($q2);			// for DO transfer and consignment customer			if(is_array($config['consignment_multiple_currency']) && $form['exchange_rate'] && $form['exchange_rate'] != 1){				$foreign_cost = $r[0]/$form['exchange_rate'];			}						$decimal_points=$config['global_cost_decimal_points'];		}		elseif ($price_indicate==4)		{			// po cost			$q2=$con->sql_query("select order_price/order_uom_fraction from po left join po_items pi on po.branch_id = pi.branch_id and po.id = pi.po_id where po.po_no = ".ms($_REQUEST['po_no'])." and pi.sku_item_id=".mi($sku_item_id));			$r = $con->sql_fetchrow($q2);			$con->sql_freeresult($q2);			$decimal_points=$config['global_cost_decimal_points'];		}		elseif($price_indicate=="hqselling"){			// hq selling			$q2 = $con->sql_query("select hq_selling from sku_items where id = ".mi($sku_item_id));			$r = $con->sql_fetchrow($q2);			$con->sql_freeresult($q2);			$decimal_points=2;		}		else{			// other mprice type			$q1=$con->sql_query($q = "select price from sku_items_mprice_history where sku_item_id=".mi($sku_item_id)." and type=".ms($price_indicate)." and branch_id=$branch_id and added<$next_timestamp order by added desc limit 1");			//print "$q";			$r = $con->sql_fetchrow($q1);			$con->sql_freeresult($q1);			$decimal_points=2;		}			$decimal_points = 4;				if(!$r)	// if no price taken, use default master 		{			if ($price_indicate==1 or $price_indicate==3){ // DO or GRN selected				$q2=$con->sql_query("select cost_price from sku_items where id=".mi($sku_item_id));			}			else			{				$q2=$con->sql_query("select selling_price from sku_items where id=".mi($sku_item_id));			}						$r = $con->sql_fetchrow($q2);			$con->sql_freeresult($q2);				}			// for DO transfer and consignment customer		if($price_indicate != 1 && $config['consignment_modules'] && is_array($config['masterfile_branch_region']) && is_array($config['consignment_multiple_currency']) && $form['exchange_rate'] && $form['exchange_rate'] != 1){ // if the price is not from cost			$tmp['foreign_cost_price'] = round($r[0], $config['global_cost_decimal_points']);			$r[0] = $r[0]*$form['exchange_rate'];		}				$tmp['cost_price'] = round($r[0], $decimal_points);		if(!isset($tmp['display_cost_price_is_inclusive']))	$tmp['display_cost_price_is_inclusive'] = 0;		if(!isset($tmp['display_cost_price']))	$tmp['display_cost_price'] = $tmp['cost_price'];				// GST		if($config['enable_gst']){			if($form['is_under_gst']){				// get sku is inclusive				$is_sku_inclusive = get_sku_gst("inclusive_tax", $sku_item_id);				// get sku original output gst				$sku_original_output_gst = get_sku_gst("output_tax", $sku_item_id);								if($price_indicate != 1 && $price_indicate != 3  && $price_indicate != 4 && $is_sku_inclusive == 'yes'){					$price_included_gst = $tmp['cost_price'];					// is inclusive tax								if($is_special_exemption){						// find the price before tax						$gst_tax_price = $price_included_gst / ($sku_original_output_gst['rate']+100) * $sku_original_output_gst['rate'];						$price_excl_gst = $price_included_gst - $gst_tax_price;											// special exemption always use nett price						$tmp['display_cost_price'] = $tmp['cost_price'] = $price_excl_gst;					}else{						$tmp['display_cost_price_is_inclusive'] = 1;						$tmp['display_cost_price'] = $price_included_gst;											$use_gst = $output_gst ? $output_gst : $sku_original_output_gst;						$gst_tax_price = $price_included_gst / ($use_gst['rate']+100) * $use_gst['rate'];						$tmp['cost_price'] = $price_included_gst - $gst_tax_price;					}				}			}		}				return $tmp;		}	function load_branch_group($id=0){		global $con,$smarty;			// load branch group		$brn_grp_list = array();		$q1 = $con->sql_query("select bg.*, group_concat(bgi.branch_id separator ',') as grp_items from branch_group bg 								left join branch_group_items bgi on bg.id=bgi.branch_group_id group by bg.id");				while($r = $con->sql_fetchassoc($q1)){			$brn_grp_list[] = $r;		}		$con->sql_freeresult($q1);		$smarty->assign('brn_grp_list', $brn_grp_list);	}		function data_validate(){		global $con, $config, $LANG, $sessioninfo;				$errm = array();		$form = $_REQUEST;		if($form['branch_id']) $branch_id = $form['branch_id'];		else $branch_id = $sessioninfo['branch_id'];				if(!$form['uom_id']) $errm['top'][] = sprintf($LANG['DO_EMPTY']);				$arr= explode("-",$form['do_date']);		$yy=$arr[0];		$mm=$arr[1];		$dd=$arr[2];		if(!checkdate($mm,$dd,$yy)){			$errm['top'][] = $LANG['DO_INVALID_DATE'];		}		$check_date = strtotime($form['do_date']);		if (isset($config['upper_date_limit']) && $config['upper_date_limit'] >= 0){			$upper_limit = $config['upper_date_limit'];			$upper_date = strtotime("+$upper_limit day" , strtotime("now"));			if ($check_date>$upper_date){				$errm['top'][] = $LANG['DO_DATE_OVER_LIMIT'];			}		}		if (isset($config['lower_date_limit']) && $config['lower_date_limit'] >= 0){			$lower_limit = $config['lower_date_limit'];			$lower_date = strtotime("-1 day",strtotime("-$lower_limit day" , strtotime("now")));			if ($check_date<$lower_date){				$errm['top'][] = $LANG['DO_DATE_OVER_LIMIT'];			}		}		// check transaction end date		if($config['consignment_modules']){			// check deliver from			if($form['branch_id']){				$dl_fr_info = array();				$q1 = $con->sql_query("select trans_end_date from branch where id = ".mi($form['branch_id']));				$dl_fr_info = $con->sql_fetchassoc($q1);				$con->sql_freeresult($q1);				if($dl_fr_info['trans_end_date'] > 0){					$trans_end_times = strtotime($dl_fr_info['trans_end_date']);					if($check_date > $trans_end_times) $errm['top'][] = sprintf($LANG['MSTBRANCH_OVER_TRANS_END_DATE'], get_branch_code($form['branch_id']),"for Deliver From");				}			}						// check deliver to			if($form['do_branch_id']){				$dl_fr_info = array();				$q2 = $con->sql_query("select trans_end_date from branch where id = ".mi($form['do_branch_id']));				$dl_fr_info = $con->sql_fetchassoc($q2);				$con->sql_freeresult($q2);				if($dl_fr_info['trans_end_date'] > 0){					$trans_end_times = strtotime($dl_fr_info['trans_end_date']);					if($check_date > $trans_end_times) $errm['top'][] = sprintf($LANG['MSTBRANCH_OVER_TRANS_END_DATE'], get_branch_code($form['do_branch_id']), "for Deliver To");				}			}		}				if ($config['do_approval_by_department'] && !$form['dept_id'])	$errm['top'][] = sprintf($LANG['DO_NO_DATA'],"department data");				// check item qty that cannot equal to zero		if($form['uom_id']){			foreach($form['uom_id'] as $k=>$v){				$curr_ctn = $curr_pcs = 0;				if($form['deliver_branch']){					foreach($form['deliver_branch'] as $d_bid){						$curr_ctn+=mf($form['qty_ctn'][$k][$d_bid]);						$curr_pcs+=mf($form['qty_pcs'][$k][$d_bid]);					}				}else{					$curr_ctn=mf($form['qty_ctn'][$k]);					$curr_pcs=mf($form['qty_pcs'][$k]);				}								if($curr_ctn<=0 && $curr_pcs<=0){					$errm['top'][] = $LANG['DO_ITEM_ZERO_QTY'];					break;				}			}		}				return $errm;	}}$DO_PREPARATION = new DO_PREPARATION('DO Preparation');?>