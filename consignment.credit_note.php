<?php
/*
6/3/2010 6:07:08 PM Andy
- Add Export UBS for CN/DN.
- Add Multiple print.

6/9/2010 6:26:55 PM Andy
- Ignore those CN/DN with zero amount when export ubs.
- CN/DN invoice no. add /CN or /DN.

7/27/2010 5:45:23 PM Andy
- CN/DN export ubs filename change to same as invoice (UBS/GLPOST9.CSV)

8/12/2010 5:26:19 PM Andy
- Fix if CN/DN auto split by price type and directly go through approved without waiting for approval, the item stock balance will not get update.

8/13/2010 11:47:23 AM Andy
- Add script to fix all CN/DN which already approved but without inv no.

10/8/2010 3:46:01 PM Andy
- Make consignment CN/DN list auto sort base on last update and invoice no.

11/8/2010 11:34:07 AM Andy
- Change financial year dropdown to sort by descending.

11/8/2010 2:22:24 PM Alex
- add branch searching

11/9/2010 11:15:41 AM Andy
- Add checking for canceled/deleted and prevent it to be edit.

11/11/2010 9:59:20 AM Alex
- add branch searching

1/4/2011 2:00:28 PM Andy
- Fix wrong privilege checking on CN/DN.

1/14/2011 10:16:58 AM Andy
- Change CN/DN search can search partial invoice no.

4/8/2011 3:03:18 PM Justin
- Added cost field for CN and DN.

4/20/2011 9:30:18 AM Justin
- Fixed the missing field problem where it doesn't exist.

6/24/2011 3:45:15 PM Andy
- Make all branch default sort by sequence, code.

7/6/2011 11:06:13 AM Andy
- Change split() to use explode()

9/27/2011 4:05:29 PM Andy
- Fix if found no price type will use master price type.

11/3/2011 4:54:43 PM Justin
- Added new feature when using config "cm_use_deliver_branch_sp", system will take selling price and trade discount code from deliver branch instead from HQ.
- Added new feature while branch changed, system will pickup the latest trade discount code, selling price and etc to do replacement for sku items.

12/15/2011 2:28:43 PM Justin
- Added to have update foreign currency feature.
- Added to reset foreign cost price for item if it is not foreign type.

5/16/2012 10:24:34 AM Justin
- Added new validation to check do date whether it is over than transaction end date for both branches deliver from and to.

5/25/2012 10:18:23 AM Justin
- Fixed bug of comparing 0000-00-00 transaction end date with current date and show error.

11/23/2012 2:17:00 PM Fithri
- after monthly report has been printed, user cannot do further edit (reject, approval or submit) on that month - for consignment only

1/25/2013 4:49 PM Justin
- Enhanced do calculation for foreign amount while the CN/DN is operating "Split by Price Type".
- Enhanced to capture and update monthly report history to have new CN/DN IDs generated by Split by Price Type.

7/3/2013 11:32 AM Fithri
- pm notification standardization

8/1/2013 2:37 PM Fithri
- bugfix : add checking for items in temp table before save/confirm in case the document is open in more than one tab/window
- use $_SESSION to prevent clash of new document id if it is created at the same second

8/1/2013 5:39 PM Andy
- Change module to use get_pm_recipient_list2() and send_pm2() in order to compatible with latest Approval Flow Settings.

1/21/2015 5:55 PM Justin
- Enhanced to have GST calculation.

3/24/2015 11:17 AM Justin
- Enhanced to have checking and pickup Export GST Type from GST Settings while found the branch deliver to is out of country.

4/1/2015 5:23 PM Andy
- Enhanced to check branch is_export to either load export type gst or designated area gst.

4/21/2015 3:34 PM Justin
- Bug fixed on taking wrong GST ID.

5/5/2015 11:43 AM Justin
- Enhanced to round up cost and selling price base on config.

6/9/2015 1:56 PM Andy
- Enhanced to have display cost price feature for CN/DN.
- Enhanced CN/DN recalculation.
- Enhanced to always store amt2 even no gst.

*/
include("include/common.php");
if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");
if(defined('DEBIT_NOTE_MODE')){
	// debit note mode
	if (!privilege('CON_DEBIT_NOTE')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'CON_DEBIT_NOTE', BRANCH_CODE), "/index.php");
}else{
	// credit note mode
	if (!privilege('CON_CREDIT_NOTE')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'CON_CREDIT_NOTE', BRANCH_CODE), "/index.php");
}

include("consignment.include.php");
include("consignment.credit_note.include.php");

class CREDIT_NOTE extends Module{
	var $list_size = 30;

	function __construct($title){
		global $con, $smarty;

		$con->sql_query("select * from branch where active=1 order by sequence, code");

		while($r = $con->sql_fetchrow()){
			$branches[$r['id']] = $r;
		}

		$smarty->assign("branches", $branches);

		if(!$_REQUEST['skip_init_load'])    init_selection();

		parent::__construct($title);
	}

	function _default(){
	    global $con, $smarty, $config;
	    // get year list
		$con->sql_query("select distinct(year(date)) as y from ".NOTE_TBL." order by date desc") or die(mysql_error());
		$smarty->assign('year_list',$con->sql_fetchrowset());

		// get financial date
		list($dummy,$f_month,$f_date) = explode("-",$config['financial_start_date']);
		if(date('m')<$f_month)  $f_year = date('Y')-1;
		else    $f_year = date('Y');
		$smarty->assign('financial_date',array('m'=>$f_month,'y'=>$f_year));

		$this->display('consignment.credit_note.tpl');
	}

	function ajax_list_sel(){
	    global $con, $smarty, $sessioninfo, $config;
	    
	    $t = mi($_REQUEST['t']);
		$p = mi($_REQUEST['p']);
		$size = $this->list_size;
		$start = $p*$size;

		$filter = array();
		switch($t){
			case 1:	// saved
				$filter[] = "cn.status=0 and cn.active=1";
				break;
			case 2: // waiting for approve
				$filter[] = "cn.status=1 and cn.approved=0 and cn.active=1";
				break;
			case 3: // cancelled / terminted
				$filter[] = "(cn.status=4 or cn.status=5) and cn.active=1";
				break;
			case 4: // approved
			    $filter[] = "cn.status=1 and cn.approved=1 and cn.active=1";
			    break;
			case 5: // rejected
			    $filter[] = "cn.status=2 and cn.approved=0 and cn.active=1";
			    break;
			case 6: // search items
				$str = $_REQUEST['search_str'];
				if(!$str)	die('Cannot search empty string');

				//filter branch by using b: or B:
				$filter_or[] = "cn.inv_no like ".ms('%'.$str.'%');
				$filter_or[] = "cn.id=".ms(preg_replace("/[^0-9]/","", $str));

				$filter[] = "(".join(' or ',$filter_or).")";
				break;
			case 7: // search items
				$str = $_REQUEST['search_str'];
				if (BRANCH_CODE=='HQ' && $config['consignment_modules']){
					$filter[] = "b2.id=".ms($str);
				}
				break;

			default:
				die('Invalid Page');
		}
		if(BRANCH_CODE!='HQ')	$filter[] = "cn.branch_id=$sessioninfo[branch_id]";
		$filter = "where ".join(' and ',$filter);

		$con->sql_query("select count(*) from ".NOTE_TBL." cn
left join branch on branch.id=cn.branch_id
left join branch b2 on b2.id=cn.to_branch_id
left join user on user.id=cn.user_id
left join branch_approval_history bah on bah.id = cn.approval_history_id and bah.branch_id = cn.branch_id
$filter") or die(mysql_error());
		$total_rows = $con->sql_fetchfield(0);
		
		if($start>=$total_rows){
			$start = 0;
			$_REQUEST['p'] = 0;
		}
		$limit = "limit $start, $size";
		$order = "order by cn.last_update desc, cn.inv_no desc";

		$total_page = ceil($total_rows/$size);

		$sql = "select cn.*,user.u as username, branch.report_prefix as branch_prefix, branch.code as branch_code,bah.approvals, bah.approval_order_id,b2.code as cn_branch_code,b2.description as cn_branch_desc
from ".NOTE_TBL." cn
left join branch on branch.id=cn.branch_id
left join branch b2 on b2.id=cn.to_branch_id
left join user on user.id=cn.user_id
left join branch_approval_history bah on bah.id = cn.approval_history_id and bah.branch_id = cn.branch_id
$filter $order $limit";
		//print $sql;
		$q1 = $con->sql_query($sql);
		
		$is_under_gst = false;
		while($r = $con->sql_fetchassoc($q1)){
			if($r['is_under_gst']) $is_under_gst = true;
			$sheet_list[] = $r;
		}
		$smarty->assign('sheet_list',$sheet_list);
		$smarty->assign('is_under_gst',$is_under_gst);
		$smarty->assign('total_page',$total_page);
        $smarty->display("consignment.credit_note.list.tpl");
	}
	
	function open($branch_id = 0, $id = 0, $load_header = true){
        global $con, $sessioninfo, $smarty, $LANG, $config, $errm;

		// delete old tmp items
        $con->sql_query("delete from ".NOTE_TBL_TMP_ITEMS." where (".NOTE_TBL."_id>1000000000 and ".NOTE_TBL."_id<".strtotime('-1 day').") and user_id = $sessioninfo[id]");
        $form = $_REQUEST;
		//print_r($form);
        if(!$id){
			$id = mi($_REQUEST['id']);
			$branch_id = mi($_REQUEST['branch_id']);
		}

        if(!is_new_id($id)&&$branch_id){    // exists order
            if($load_header){
                $form = load_header($branch_id, $id, true);
                if($_REQUEST['a']!='view')	$this->copy_to_tmp($branch_id, $id);

                if(($form['approved']||!$form['active']) && $_REQUEST['a']!='view' && !$errm){
		            header("Location: $_SERVER[PHP_SELF]?a=view&id=$id&branch_id=$branch_id");
					exit;
				}
			}
			
		}else{  // new order
			if(!$id){
                $id=time();
				if($id <= $_SESSION['cn_last_create_time']) {$id = $_SESSION['cn_last_create_time']+1;}
				$_SESSION['cn_last_create_time'] = $id;
				$form['id']=$id;
			}

			if(!$form['date']){
				if($_SESSION['date']) $form['date'] = $_SESSION['date'];
				else $form['date'] = date("Y-m-d", time());
			}
		}
		
		if($config['enable_gst'] && $form['date'] && ($_REQUEST['a'] == 'open' || $_REQUEST['a'] == 'refresh')){
			$_REQUEST['is_under_gst'] = $form['is_under_gst'] = check_gst_status(array('date'=>$form['date'], 'branch_id'=>$branch_id));
			if($form['is_under_gst']) construct_gst_list();
		}

		//print_r($form);

		$items = load_items($branch_id, $id, ($_REQUEST['a']!='view'));
		$smarty->assign('PAGE_TITLE', $this->title.' - '.(is_new_id($id)?'New '.strtoupper(NOTE_TBL):$form['inv_no']));
		$smarty->assign('form', $form);
		$smarty->assign('items', $items);
		$smarty->display('consignment.credit_note.open.tpl');
	}
	
	function refresh(){
	    $id = mi($_REQUEST['id']);
		$branch_id = mi($_REQUEST['branch_id']);
        $this->open($branch_id, $id, false);
	}
	
	function ajax_add_item_row(){
        global $con, $smarty, $sessioninfo, $LANG, $config, $gst_list;

		$form = $_REQUEST;
		$id = mi($_REQUEST['id']);
		$branch_id = mi($_REQUEST['branch_id']);
		$to_branch_id = mi($_REQUEST['to_branch_id']);
		$sku_item_id_arr = $_REQUEST['sku_code_list'];
		$date = $_REQUEST['date'];

		$item_pcs = array();

		if(!$sku_item_id_arr){
			die($LANG['NO_ITEM_FOUND']);
		}
		if(!$config['cn_item_allow_duplicate']){  // check duplicate
			$con->sql_query("select count(*) from ".NOTE_TBL_TMP_ITEMS." where user_id=$sessioninfo[id] and branch_id=$branch_id and ".NOTE_TBL."_id=$id and sku_item_id in (".join(',',$sku_item_id_arr).")");
			if($con->sql_fetchfield(0)>0)   die($LANG['SO_ITEM_FOUND_DUPLICATE']);
		}
		
		if($config['consignment_modules'] && $config['cm_use_deliver_branch_sp']) $sp_bid = $to_branch_id;
		else $sp_bid = $branch_id;
		
		$q1 = $con->sql_query("select si.id as sku_item_id, si.sku_item_code, si.description as sku_description, ifnull(si.artno,si.mcode) as artno_mcode, 1 as uom_id, 1 as uom_fraction,si.packing_uom_id as master_uom_id,sic.qty as stock_balance1,sic2.qty as stock_balance2,ifnull(sic.grn_cost,si.cost_price) as cost_price, ifnull(sip.price,si.selling_price) as selling_price,if(sip.price is null,sku.default_trade_discount_code,sip.trade_discount_code) as trade_discount_code, sku.default_trade_discount_code
		from sku_items si
		left join sku on sku_id = sku.id
		left join sku_items_cost sic on sic.branch_id=$branch_id and sic.sku_item_id=si.id
		left join sku_items_cost sic2 on sic2.branch_id=$to_branch_id and sic2.sku_item_id=si.id
		left join sku_items_price sip on sip.branch_id=$sp_bid and sip.sku_item_id=si.id
		where si.id in (".join(',',$sku_item_id_arr).")");

		if($con->sql_numrows($q1)<=0){
            die($LANG['NO_ITEM_FOUND']);
		}
		$this->save_tmp_items($branch_id, $id);
		
		$is_export = 0;
		if($config['enable_gst'] && $form['is_under_gst']){
			// check if having to_branch_id and it is stock to be exported
			if($form['is_export']){
				$is_export = 1;
			}elseif($form['to_branch_id']){
				$q2 = $con->sql_query("select * from branch where id = ".mi($form['to_branch_id'])." and is_export>0");
				$export_info = $con->sql_fetchassoc($q2);
				$con->sql_freeresult($q2);
				
				if($export_info['is_export']>0){
					$export_gst = get_export_type_gst($export_info['is_export']);
				}
				
			}
			
			/*if($is_export){
				$q2 = $con->sql_query("select * from gst_settings where setting_name = 'export_gst_type'");
				$gst_settings = $con->sql_fetchassoc($q2);
				$con->sql_freeresult($q2);
				
				if($gst_settings){
					$q2 = $con->sql_query("select * from gst where id = ".mi($gst_settings['setting_value']));
					$export_gst = $con->sql_fetchassoc($q2);
					$con->sql_freeresult($q2);
				}else{
					$is_export = 0;
				}
			}*/
		}
		
		// hidden the foreign fields if found it is not foreign item
		if(!$_REQUEST['currency_code'] || $_REQUEST['currency_code'] == "RM") $smarty->assign("hide_currency_field", 1);
		$trade_discount_type_arr = array();
		$trade_discount_per = array();
		while($item = $con->sql_fetchrow($q1)){
			$tmp = array();
			$tmp = get_sku_item_cost_selling($sp_bid, $item['sku_item_id'], $date, array("cost"));
		    $sid = $item['sku_item_id'];
		    //$pcs = $item_pcs[$sid];
		    //if($pcs)    $item['pcs'] = $pcs;
		    $item['branch_id'] = $branch_id;
		    $item[NOTE_TBL.'_id'] = $id;
		    $item['user_id'] = $sessioninfo['id'];
		    $item['cost'] = $tmp['cost'];
		    $item['cost_price'] = $item['selling_price']; // using selling as price
		    
		    if($config['sku_always_show_trade_discount']&&!$item['trade_discount_code']){
				$item['trade_discount_code'] = $item['default_trade_discount_code'];
			}
			
		    $trade_discount_type = $item['trade_discount_code'];
		    
		    
		    if(!$trade_discount_type_arr[$trade_discount_type]){    // find price type id
				$con->sql_query("select id from trade_discount_type where code=".ms($trade_discount_type));
				$price_type_id = mi($con->sql_fetchfield(0));
				$trade_discount_type_arr[$trade_discount_type] = $price_type_id;
				
				$con->sql_query("select value from branch_trade_discount where branch_id=$to_branch_id and trade_discount_id=$price_type_id");
				$trade_discount_per[$trade_discount_type] = $con->sql_fetchfield(0);
			}
			$item['price_type_id'] = $trade_discount_type_arr[$trade_discount_type];
			$item['discount_per'] = $trade_discount_per[$trade_discount_type];
			$item['discount_amt'] = 0;
			
			// GST
			if($config['enable_gst'] && $form['is_under_gst']){
				construct_gst_list();
				// get sku is inclusive
				$is_sku_inclusive = get_sku_gst("inclusive_tax", $item['sku_item_id']);
				// get sku original output gst
				$gst_info = get_sku_gst("output_tax", $item['sku_item_id']);
				if($is_sku_inclusive == 'yes')	$item['display_cost_price_is_inclusive'] = 1;
				$item['display_cost_price'] = $item['cost_price'];
				
				if($export_gst){
					$item['gst_id'] = $export_gst['id'];
					$item['gst_code'] = $export_gst['code'];
					$item['gst_rate'] = $export_gst['rate'];
				}elseif($gst_info){
					$item['gst_id'] = $gst_info['id'];
					$item['gst_code'] = $gst_info['code'];
					$item['gst_rate'] = $gst_info['rate'];
				}else{ // pre load gst id, code and rate if not found
					$item['gst_id'] = $gst_list[0]['id'];
					$item['gst_code'] = $gst_list[0]['code'];
					$item['gst_rate'] = $gst_list[0]['rate'];
				}
			
				
				
				if($form['exchange_rate']){
					// got currency
					$item['foreign_cost_price'] = $item['cost_price'];
					$item['cost_price'] = $item['display_cost_price'] = round($item['foreign_cost_price']*$form['exchange_rate'], 3);					
				}

				if(!$is_export && $is_sku_inclusive == 'yes'){
					// is inclusive tax
					// find the price before tax
					$gst_tax_price = round($item['selling_price'] / ($item['gst_rate']+100) * $item['gst_rate'], $config['global_cost_decimal_points']);
					$item['selling_price'] -= $gst_tax_price;
					
					$gst_tax_price = round($item['display_cost_price'] / ($item['gst_rate']+100) * $item['gst_rate'], $config['global_cost_decimal_points']);
					//print "gst_tax_price: $gst_tax_price";
					$item['cost_price'] = round($item['display_cost_price']-$gst_tax_price, $config['global_cost_decimal_points']);
					
				}
				//print_r($item);exit;
				
			}else{
				if($form['exchange_rate']){
					// got currency
					$item['foreign_cost_price'] = $item['cost_price'];
					$item['cost_price'] = round($item['foreign_cost_price']*$form['exchange_rate'], 3);
				}
			}
			
			
						
			$con->sql_query("insert into ".NOTE_TBL_TMP_ITEMS." ".mysql_insert_by_field($item, array('branch_id',NOTE_TBL.'_id','user_id','sku_item_id','cost','cost_price','selling_price','uom_id','stock_balance1','stock_balance2','price_type_id','discount_per')));
			$item['id'] = $con->sql_nextid();
			$smarty->assign('item', $item);
			$smarty->assign('form', $form);
			$smarty->display('consignment.credit_note.open.sheet.item_row.tpl');
		}
	}
	
	private function save_tmp_items($branch_id, $id){
		global $con, $sessioninfo;

		$form=$_REQUEST;

		if($form['uom_id']){
            foreach($form['uom_id'] as $item_id=>$uom_id){
				$upd = array();
				$upd['ctn'] = mf($form['ctn'][$item_id]);
				$upd['pcs'] = mf($form['pcs'][$item_id]);
				$upd['cost'] = mf($form['cost'][$item_id]);
				$upd['cost_price'] = mf($form['cost_price'][$item_id]);
				$upd['foreign_cost_price'] = mf($form['foreign_cost_price'][$item_id]);
				$upd['selling_price'] = mf($form['selling_price'][$item_id]);
				$upd['uom_id'] = $uom_id;
				$upd['stock_balance1'] = mf($form['stock_balance1'][$item_id]);
                $upd['stock_balance2'] = mf($form['stock_balance2'][$item_id]);
                $upd['price_type_id'] = mi($form['price_type_id'][$item_id]);
                $upd['discount_per'] = $form['discount_per'][$item_id];
                $upd['discount_amt'] = $form['discount_amt'][$item_id];
                $upd['foreign_discount_amt'] = $form['foreign_discount_amt'][$item_id];
                
				// gst
				$upd['gst_id'] = $form['gst_id'][$item_id];
				$upd['gst_code'] = $form['gst_code'][$item_id];
				$upd['gst_rate'] = $form['gst_rate'][$item_id];
				
				// row amount & amount include gst
				$upd['item_disc_amt2'] = $form['item_disc_amt2'][$item_id];
				$upd['item_amt'] = $form['item_amt'][$item_id];
				$upd['item_gst'] = $form['item_gst'][$item_id];
				$upd['item_gst_amt'] = $form['item_gst_amt'][$item_id];
				$upd['item_amt2'] = $form['item_amt2'][$item_id];
				$upd['item_gst2'] = $form['item_gst2'][$item_id];
				$upd['item_gst_amt2'] = $form['item_gst_amt2'][$item_id];
				
				// row foreign amount & amount include gst
				$upd['item_foreign_disc_amt2'] = $form['item_foreign_disc_amt2'][$item_id];
				$upd['item_foreign_amt'] = $form['item_foreign_amt'][$item_id];
				$upd['item_foreign_gst'] = $form['item_foreign_gst'][$item_id];
				$upd['item_foreign_gst_amt'] = $form['item_foreign_gst_amt'][$item_id];
				$upd['item_foreign_amt2'] = $form['item_foreign_amt2'][$item_id];
				$upd['item_foreign_gst2'] = $form['item_foreign_gst2'][$item_id];
				$upd['item_foreign_gst_amt2'] = $form['item_foreign_gst_amt2'][$item_id];
				
				// display cost price
				$upd['display_cost_price_is_inclusive'] = $form['display_cost_price_is_inclusive'][$item_id];
				$upd['display_cost_price'] = $form['display_cost_price'][$item_id];
				
				$con->sql_query("update ".NOTE_TBL_TMP_ITEMS." set ".mysql_update_by_field($upd)." where id=".mi($item_id)." and branch_id=$branch_id and user_id=$sessioninfo[id]");

			}
		}
	}
	
	function ajax_delete_item(){
        global $con, $smarty, $sessioninfo, $LANG, $config;

		$cn_id = mi($_REQUEST['cn_id']);
		$branch_id = mi($_REQUEST['branch_id']);
		$item_id = mi($_REQUEST['id']);
		$con->sql_query("delete from ".NOTE_TBL_TMP_ITEMS." where branch_id=$branch_id and ".NOTE_TBL."_id=$cn_id and id=$item_id and user_id=$sessioninfo[id]");
		print "OK";
	}
	
	function confirm(){
		$this->save(true);
	}
	
	function save($is_confirm = false){
		global $con, $smarty, $sessioninfo, $LANG, $config;
		$id = mi($_REQUEST['id']);
		$branch_id = mi($_REQUEST['branch_id']);
		$to_branch_id = mi($_REQUEST['to_branch_id']);
		
		if(!is_new_id($id)){
            check_must_can_edit($branch_id, $id);
		}
		
		$form=$_REQUEST;
		//print_r($form);exit;
		$this->save_tmp_items($branch_id, $id);

		// validation
		$errm = array();
		if(!$form['uom_id']) $errm['top'][] = sprintf($LANG[strtoupper(NOTE_TBL).'_EMPTY']);
		
		$mod = defined('DEBIT_NOTE_MODE') ? 'dn':'cn';
		if ($config['consignment_global_disable_documents_after_monthly_report'] && $config['consignment_modules'] && is_monthly_report_printed($form['date'],$branch_id,$mod)) {
			$errm['top'][] = $LANG['CONSIGNMENT_MONTHLY_REPORT_ALREADY_PRINTED'];
		}
		

		$arr=explode("-",$form['date']);
		$yy=$arr[0];
		$mm=$arr[1];
		$dd=$arr[2];
		if(!checkdate($mm,$dd,$yy)){
		   	$errm['top'][] = $LANG[strtoupper(NOTE_TBL).'_INVALID_DATE'];
			$form['date']='';
		}
		
		// check transaction end date
		// check deliver from
		$check_times = strtotime($form['date']);
		if($form['branch_id']){
			$dl_fr_info = array();
			$q1 = $con->sql_query("select trans_end_date from branch where id = ".mi($form['branch_id']));
			$dl_fr_info = $con->sql_fetchassoc($q1);
			$con->sql_freeresult($q1);
			if($dl_fr_info['trans_end_date'] > 0){
				$trans_end_times = strtotime($dl_fr_info['trans_end_date']);
				if($check_times > $trans_end_times) $errm['top'][] = sprintf($LANG['MSTBRANCH_OVER_TRANS_END_DATE'], get_branch_code($form['branch_id']),"for Deliver From");
			}
		}
		
		// check deliver to
		if($form['to_branch_id']){
			$dl_fr_info = array();
			$q2 = $con->sql_query("select trans_end_date from branch where id = ".mi($form['to_branch_id']));
			$dl_fr_info = $con->sql_fetchassoc($q2);
			$con->sql_freeresult($q2);
			if($dl_fr_info['trans_end_date'] > 0){
				$trans_end_times = strtotime($dl_fr_info['trans_end_date']);
				if($check_times > $trans_end_times) $errm['top'][] = sprintf($LANG['MSTBRANCH_OVER_TRANS_END_DATE'], get_branch_code($form['to_branch_id']), "for Deliver To");
			}
		}

		if(!$to_branch_id) $errm['top'][]= $LANG[strtoupper(NOTE_TBL).'_NO_INVOICE_TO'];

		if(!$errm && $is_confirm){
            $params = array();
            if(NOTE_TBL=='cn')	$params['type'] = 'CREDIT_NOTE';
            else    $params['type'] = 'DEBIT_NOTE';
		    $params['reftable'] = NOTE_TBL;
		    $params['user_id'] = $sessioninfo['id'];
		    $params['branch_id'] = $branch_id;
			$params['doc_amt'] = $form['total_amount'];
			
			if($form['approval_history_id']) $params['curr_flow_id'] = $form['approval_history_id']; // use back the same id if already have
			$astat = check_and_create_approval2($params, $con);

	  	  	if(!$astat) $errm['top'][] = $LANG[strtoupper(NOTE_TBL).'_NO_APPROVAL_FLOW'];
	  		else{
	  			 $form['approval_history_id'] = $astat[0];
	     		 if ($astat[1] == '|'){
	     		 	$last_approval = true;
	     		 	if($astat['direct_approve_due_to_less_then_min_doc_amt'])	$direct_approve_due_to_less_then_min_doc_amt = 1;	// direct approve because no qualify for min doc amt
	     		 } 
	  		}

		}

		if($errm){
			$smarty->assign("errm", $errm);
			$this->open($branch_id, $id, false);
			exit;
		}

		if ($is_confirm) $form['status'] = 1;
	    if ($last_approval) $form['approved'] = 1;
	    $form['last_update'] = 'CURRENT_TIMESTAMP';

		// for consignment customer that using exchange rate only...
		if(is_array($config['masterfile_branch_region']) && is_array($config['consignment_multiple_currency'])){
			//print $_REQUEST['do_branch_id'];
			$con->sql_query("select region from branch where id = ".mi($form['to_branch_id']));
			$to_branch_info = $con->sql_fetchrow();
			$con->sql_freeresult();

			$currency_code = $config['masterfile_branch_region'][$to_branch_info['region']]['currency'];
			
			// physically unset all foreign amount if found it is not foreign type
			if(!$currency_code || $currency_code == "RM"){
				$form['exchange_rate'] = 1;
				$form['total_foreign_amount'] = 0;
				$form['foreign_discount_amount'] = 0;
			}
		}
		
		if (is_new_id($id)){
			$form['added'] = 'CURRENT_TIMESTAMP';
            $form['user_id'] = $sessioninfo['id'];

			$con->sql_query("insert into ".NOTE_TBL." ".mysql_insert_by_field($form, array('branch_id', 'to_branch_id', 'date','discount', 'status', 'approved', 'user_id', 'total_ctn','total_pcs', 'total_amount', 'total_foreign_amount', 'total_qty','remark','added', 'last_update','approval_history_id','auto_split_by_price_type','total_selling','discount_amount', 'foreign_discount_amount','exchange_rate', 'is_under_gst', 'total_gross_amt', 'sheet_gst_discount', 'total_gst_amt', 'gross_discount_amount', 'sub_total_gross_amt', 'total_foreign_gross_amt', 'sheet_foreign_gst_discount', 'total_foreign_gst_amt', 'gross_foreign_discount_amount', 'sub_total_foreign_gross_amt', 'sub_total_amt', 'sub_total_foreign_amt', 'is_export')));
			$form['id'] = $con->sql_nextid();
		}
		else{
		    $con->sql_query("update ".NOTE_TBL." set ".mysql_update_by_field($form, array('to_branch_id', 'date','discount', 'status','approved','total_ctn', 'total_pcs', 'total_amount', 'total_foreign_amount', 'total_qty', 'remark','last_update','approval_history_id','auto_split_by_price_type','total_selling','discount_amount', 'foreign_discount_amount','exchange_rate', 'is_under_gst', 'total_gross_amt', 'sheet_gst_discount', 'total_gst_amt', 'gross_discount_amount', 'sub_total_gross_amt', 'total_foreign_gross_amt', 'sheet_foreign_gst_discount', 'total_foreign_gst_amt', 'gross_foreign_discount_amount', 'sub_total_foreign_gross_amt', 'sub_total_amt', 'sub_total_foreign_amt', 'is_export'))." where branch_id=$branch_id and id=$id");
		}
		
		/*if(!$form['order_no']){
            $formatted = sprintf("%05d",$form['id']);
		    //select report prefix from branch
			$con->sql_query("select report_prefix from branch where id = ".mi($branch_id));
			$b = $con->sql_fetchrow();
			$form['order_no'] = $b['report_prefix'].$formatted;
			$con->sql_query("update sales_order set order_no=".ms($form['order_no'])." where branch_id=$branch_id and id=".mi($form['id']));
		}*/

        //copy tmp table to real items table
		$q1=$con->sql_query("select cni.*,uom.fraction as uom_fraction
		from ".NOTE_TBL_TMP_ITEMS." cni
		left join uom on uom.id=cni.uom_id
		where cni.".NOTE_TBL."_id=$id and cni.branch_id=$branch_id and cni.user_id=$sessioninfo[id]
		order by cni.id");

		$first_id = 0;
		$price_type_id_arr = array();
		while($r=$con->sql_fetchrow($q1)){
			$upd[NOTE_TBL.'_id']=$form['id'];
			$upd['branch_id']=$r['branch_id'];
			$upd['sku_item_id']=$r['sku_item_id'];
			$upd['cost']=$r['cost'];
			$upd['cost_price']=$r['cost_price'];
			$upd['selling_price']=$r['selling_price'];
			$upd['uom_id']=$r['uom_id'];
			$upd['ctn']=$r['ctn'];
			$upd['pcs']=$r['pcs'];
			$upd['stock_balance1'] = $r['stock_balance1'];
            $upd['stock_balance2'] = $r['stock_balance2'];
            $upd['price_type_id'] = $r['price_type_id'];
            $upd['discount_per'] = $r['discount_per'];
			$upd['discount_amt'] = $r['discount_amt'];

			if(!$currency_code || $currency_code == "RM"){
				$upd['foreign_cost_price'] = 0;
				$upd['foreign_discount_amt'] = 0;
			}else{
				$upd['foreign_cost_price'] = $r['foreign_cost_price'];
				$upd['foreign_discount_amt'] = $r['foreign_discount_amt'];
			}
			
			if(!in_array($r['price_type_id'], $price_type_id_arr)) $price_type_id_arr[] = $r['price_type_id'];
			
			if($form['is_under_gst']){
				$upd['gst_id'] = $r['gst_id'];
				$upd['gst_code'] = $r['gst_code'];
				$upd['gst_rate'] = $r['gst_rate'];
				
				$upd['display_cost_price_is_inclusive'] = $r['display_cost_price_is_inclusive'];
				$upd['display_cost_price'] = $r['display_cost_price'];
			}

			$upd['item_amt'] = $r['item_amt'];
			$upd['item_gst'] = $r['item_gst'];
			$upd['item_gst_amt'] = $r['item_gst_amt'];
			$upd['item_amt2'] = $r['item_amt2'];
			$upd['item_gst2'] = $r['item_gst2'];
			$upd['item_gst_amt2'] = $r['item_gst_amt2'];
			$upd['item_disc_amt2'] = $r['item_disc_amt2'];
			$upd['item_foreign_amt'] = $r['item_foreign_amt'];
			$upd['item_foreign_gst'] = $r['item_foreign_gst'];
			$upd['item_foreign_gst_amt'] = $r['item_foreign_gst_amt'];
			$upd['item_foreign_amt2'] = $r['item_foreign_amt2'];
			$upd['item_foreign_gst2'] = $r['item_foreign_gst2'];
			$upd['item_foreign_gst_amt2'] = $r['item_foreign_gst_amt2'];
			$upd['item_foreign_disc_amt2'] = $r['item_foreign_disc_amt2'];
			
			
            
			$con->sql_query("insert into ".NOTE_TBL_ITEMS." ".mysql_insert_by_field($upd)) or die(mysql_error());
			if ($first_id==0) $first_id = $con->sql_nextid();
		}

		if ($first_id>0) {
			if(!is_new_id($id)){
				$con->sql_query("delete from ".NOTE_TBL_ITEMS." where branch_id=$branch_id and ".NOTE_TBL."_id=$id and id<$first_id");
			}

			$con->sql_query("delete from ".NOTE_TBL_TMP_ITEMS." where branch_id=$branch_id and ".NOTE_TBL."_id=$id and user_id=$sessioninfo[id]");
		}
		else{
			die("System error: Insert items failed. Please do not open multiple ".strtoupper(NOTE_TBL)." page, close all other opened ".strtoupper(NOTE_TBL)." page and try again. If problem still exists please contact ARMS technical support.");
		}

		$t = '';
		/*$formatted=sprintf("%05d",$form['id']);
	    //select report prefix from branch
		$con->sql_query("select report_prefix from branch where id = ".mi($branch_id));
		$b = $con->sql_fetchrow();*/

		if ($is_confirm){
	        log_br($sessioninfo['id'], SHEET_NAME, $form['id'], "Confirmed: (ID#".$form['id'].", Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:".sprintf("%.2f",$form['total_amount']).")");
	        if($form['auto_split_by_price_type']){  // split CN
				$this->split_cn_by_price_type($form['branch_id'], $form['id']); 
				//exit;  if success split, it will automaticaly terminated
			}

			$con->sql_query("update branch_approval_history set ref_id=$form[id] where id=$form[approval_history_id] and branch_id = $branch_id");
			
		    if ($last_approval){
		    	if($direct_approve_due_to_less_then_min_doc_amt)	$_REQUEST['direct_approve_due_to_less_then_min_doc_amt'] = 1;
                cn_approval($branch_id, $form['id'], $form['status'], true);
                $t = 'approve';
			}
			else{
                $t = 'confirme';
				if(NOTE_TBL=='cn'){
					$to = get_pm_recipient_list2($form['id'],$form['approval_history_id'],0,'confirmation',$branch_id,'cn');
					send_pm2($to, SHEET_NAME." Approval (ID#$form[id])", "consignment.credit_note.php?a=view&id=$form[id]&branch_id=$branch_id", array('module_name'=>'cn'));
				}
				else {
					$to = get_pm_recipient_list2($form['id'],$form['approval_history_id'],0,'confirmation',$branch_id,'dn');
					send_pm2($to, SHEET_NAME." Approval (ID#$form[id])", "consignment.debit_note.php?a=view&id=$form[id]&branch_id=$branch_id", array('module_name'=>'dn'));
				}
			}

		}
		else{
	        log_br($sessioninfo['id'], SHEET_NAME, $form['id'], "Saved: (ID#".$form['id']." ,Pcs:$form[total_pcs], Ctn:$form[total_ctn], Amt:".sprintf("%.2f",$form['total_amount']).")");
	        $t = 'saved';
		}

		header("Location: $_SERVER[PHP_SELF]?t=$form[a]&save_id=$form[id]");
		exit;
	}
	
	private function copy_to_tmp($branch_id, $id){
		global $con, $sessioninfo;
		//delete ownself items in tmp table
		$con->sql_query("delete from ".NOTE_TBL_TMP_ITEMS." where ".NOTE_TBL."_id=$id and branch_id = $branch_id and user_id = $sessioninfo[id]");

		//copy items to tmp table
		$q1=$con->sql_query("insert into ".NOTE_TBL_TMP_ITEMS."
	(".NOTE_TBL."_id, branch_id, user_id, sku_item_id, cost, cost_price, foreign_cost_price, selling_price, uom_id, ctn, pcs, stock_balance1, stock_balance2,price_type_id,discount_per,discount_amt,
	foreign_discount_amt,gst_id,gst_code,gst_rate,item_disc_amt2,item_amt,item_gst,item_gst_amt,item_amt2,item_gst2,item_gst_amt2,item_foreign_disc_amt2,item_foreign_amt,item_foreign_gst,
	item_foreign_gst_amt,item_foreign_amt2,item_foreign_gst2,item_foreign_gst_amt2,display_cost_price_is_inclusive,display_cost_price)
	select
	$id, branch_id, $sessioninfo[id], sku_item_id, cost, cost_price, foreign_cost_price, selling_price, uom_id, ctn, pcs, stock_balance1, stock_balance2,price_type_id,discount_per,discount_amt,
	foreign_discount_amt,gst_id,gst_code,gst_rate,item_disc_amt2,item_amt,item_gst,item_gst_amt,item_amt2,item_gst2,item_gst_amt2,item_foreign_disc_amt2,item_foreign_amt,item_foreign_gst,
	item_foreign_gst_amt,item_foreign_amt2,item_foreign_gst2,item_foreign_gst_amt2,display_cost_price_is_inclusive,display_cost_price
	from ".NOTE_TBL_ITEMS." where ".NOTE_TBL."_id=$id and branch_id=$branch_id order by id");
	}
	
	function delete(){
        global $con, $sessioninfo;
		$form = $_REQUEST;
        $id = $form['id'];
        $branch_id = $form['branch_id'];

        check_must_can_edit($branch_id, $id);
        
	    $type = 'delete';
	    $status = 4;
		$reason = ms($form['reason']);

	    $con->sql_query("update ".NOTE_TBL." set cancelled_by=$sessioninfo[id], reason=$reason, status=$status where id=$id and branch_id=$branch_id");

	    $con->sql_query("delete from ".NOTE_TBL_TMP_ITEMS." where ".NOTE_TBL."_id=$id and branch_id=$branch_id and user_id=$sessioninfo[id]");
	    log_br($sessioninfo['id'], SHEET_NAME, $form['id'], "Delete: (ID#".$form['id'].")");
	    header("Location: $_SERVER[PHP_SELF]?t=$type&save_id=$id");
	}
	
	function view(){
	    global $smarty;

	    $id = mi($_REQUEST['id']);
		$branch_id = mi($_REQUEST['branch_id']);
		if(is_new_id($id)){
            $this->open();
            exit;
		}

		$smarty->assign('readonly', 1);
		$this->open($branch_id, $id, true);
	}
	
	function do_reset(){
		global $con, $smarty, $errm, $LANG, $config;
		$form = $_REQUEST;
		//print_r($form);
		
		$mod = defined('DEBIT_NOTE_MODE') ? 'dn':'cn';
		if ($config['consignment_global_disable_documents_after_monthly_report'] && $config['consignment_modules'] && is_monthly_report_printed($form['curr_date'],$form['branch_id'],$mod)) {
			$errm['top'][] = $LANG['CONSIGNMENT_MONTHLY_REPORT_ALREADY_PRINTED'];
			$smarty->assign("errm", $errm);
			$this->view();
			exit;
		}

		reset_cn($form['branch_id'], $form['id']);
	}
	
	private function split_cn_by_price_type($branch_id, $cn_id){
		global $con, $sessioninfo, $config;
		
		// get header
		$con->sql_query("select * from ".NOTE_TBL." where branch_id=$branch_id and id=$cn_id");
		$form = $con->sql_fetchrow();
		$con->sql_freeresult();
		$to_branch_id = mi($form['to_branch_id']);
		
		// get items
		$items = array();
		$con->sql_query("select cni.*,uom.fraction as uom_fraction
		from ".NOTE_TBL_ITEMS." cni
		left join uom on uom.id=cni.uom_id
		where cni.branch_id=$branch_id and cni.".NOTE_TBL."_id=$cn_id order by cni.id");
		while($r = $con->sql_fetchrow()){
			$price_items_arr[$r['price_type_id']][] = $r;
		}
		$con->sql_freeresult();
		
		$price_type_count = count($price_items_arr);
		if($price_type_count<=1) return false;    // return if only one price type
		
		$loop_count = 0;
		$item_id_need_to_delete_arr = $new_id_list = array();
		foreach($price_items_arr as $price_type_id=>$items){
		    $loop_count++;
		    $last_approval = false;
		    $total_ctn = 0;
		    $total_pcs = 0;
		    $sub_total_amount = $sub_total_foreign_amount = 0;
		    //$total_amount = $total_foreign_amount = 0;
		    $total_qty = 0;
		    $total_selling = 0;
		    $sheet_discount_amt = $sheet_foreign_discount_amt = 0;
		    $total_item_discount = $total_item_foreign_discount = 0;
		    
		    if($loop_count>=$price_type_count)  $update_self = true;
		    
		    $upd = array();
		    $upd['branch_id'] = $form['branch_id'];
		    $upd['to_branch_id'] = $form['to_branch_id'];
		    $upd['discount'] = $form['discount'];
		    $upd['date'] = $form['date'];
		    $upd['active'] = $form['active'];
		    $upd['status'] = $form['status'];
		    $upd['user_id'] = $form['user_id'];
		    $upd['remark'] = $form['remark'];
		    $upd['added'] = 'CURRENT_TIMESTAMP';
		    $upd['last_update'] = 'CURRENT_TIMESTAMP';
		    $upd['auto_split_by_price_type'] = $form['auto_split_by_price_type'];
			$upd['exchange_rate'] = $form['exchange_rate'];
			$upd['mr_branch_id'] = $form['mr_branch_id'];
			$upd['mr_month'] = $form['mr_month'];
			$upd['mr_year'] = $form['mr_year'];
			$upd['is_under_gst'] = $form['is_under_gst'];
		    
			if(!$update_self){
                // check approval
				$params = array();
				if(NOTE_TBL=='cn')	$params['type'] = 'CREDIT_NOTE';
				else    $params['type'] = 'DEBIT_NOTE';
				
			    $params['reftable'] = NOTE_TBL;
			    $params['user_id'] = $sessioninfo['id'];
			    $params['branch_id'] = $branch_id;
				$astat = check_and_create_approval2($params, $con);

		  	  	if(!$astat) die($LANG['inv_no_APPROVAL_FLOW']);
		  		else{
		  			 $upd['approval_history_id'] = $astat[0];
		     		 if ($astat[1] == '|') $last_approval = true;
		  		}
		  		if($last_approval)  $upd['approved'] = 1;

		  		// insert header
				$con->sql_query("insert into ".NOTE_TBL." ".mysql_insert_by_field($upd));
				$new_id_list[] = $new_cn_id = $con->sql_nextid();
				$use_cn_id = $new_cn_id;
			}else   $use_cn_id = $cn_id;
			
			if($items){
				foreach($items as $r){  // loop items	
					if(!$r['uom_fraction']) $r['uom_fraction'] = 1;  // set fraction as 1 if cant find uom fraction
					
					$row_price = round(($r['ctn']*$r['cost_price'])+(($r['cost_price']/$r['uom_fraction'])*$r['pcs']),2);
					$row_foreign_price = round(($r['ctn']*$r['foreign_cost_price'])+(($r['foreign_cost_price']/$r['uom_fraction'])*$r['pcs']),2);
					$row_selling = round(($r['ctn']*$r['selling_price'])+(($r['selling_price']/$r['uom_fraction'])*$r['pcs']),2);
					
					if($r['discount'])	$disc_arr = explode("+", $r['discount']);
					if($disc_arr[0]){   // got first discount
						$row_price = $row_price - ($row_price*$disc_arr[0]/100);
						$row_foreign_price = $row_foreign_price - ($row_foreign_price*$disc_arr[0]/100);
					}
					if($disc_arr[1]){   // got second discount
						$row_price = $row_price - ($row_price*$disc_arr[1]/100);
						$row_foreign_price = $row_foreign_price - ($row_foreign_price*$disc_arr[1]/100);
					}
					
     				if(!$update_self){
                        $upd2 = array();
						$upd2['branch_id'] = $r['branch_id'];
						$upd2[NOTE_TBL.'_id'] = $use_cn_id;
						$upd2['user_id'] = $r['user_id'];
						$upd2['sku_item_id'] = $r['sku_item_id'];
						$upd2['cost'] = $r['cost'];
						$upd2['cost_price'] = $r['cost_price'];
						$upd2['foreign_cost_price'] = $r['foreign_cost_price'];
						$upd2['selling_price'] = $r['selling_price'];
						$upd2['uom_id'] = $r['uom_id'];
						$upd2['ctn'] = $r['ctn'];
						$upd2['pcs'] = $r['pcs'];
						$upd2['stock_balance1'] = $r['stock_balance1'];
						$upd2['stock_balance2'] = $r['stock_balance2'];
						$upd2['price_type_id'] = $r['price_type_id'];
						$upd2['discount_per'] = $r['discount_per'];
						$upd2['discount_amt'] = $r['discount_amt'];
						$upd2['foreign_discount_amt'] = $r['foreign_discount_amt'];
						$upd2['gst_id'] = $r['gst_id'];
						$upd2['gst_code'] = $r['gst_code'];
						$upd2['gst_rate'] = $r['gst_rate'];
						
						$upd2['item_disc_amt2'] = $r['item_disc_amt2'];
						$upd2['item_amt'] = $r['item_amt'];
						$upd2['item_gst'] = $r['item_gst'];
						$upd2['item_gst_amt'] = $r['item_gst_amt'];
						$upd2['item_amt2'] = $r['item_amt2'];
						$upd2['item_gst2'] = $r['item_gst2'];
						$upd2['item_gst_amt2'] = $r['item_gst_amt2'];
						$upd2['item_foreign_disc_amt2'] = $r['item_foreign_disc_amt2'];
						$upd2['item_foreign_amt'] = $r['item_foreign_amt'];
						$upd2['item_foreign_gst'] = $r['item_foreign_gst'];
						$upd2['item_foreign_gst_amt'] = $r['item_foreign_gst_amt'];
						$upd2['item_foreign_amt2'] = $r['item_foreign_amt2'];
						$upd2['item_foreign_gst2'] = $r['item_foreign_gst2'];
						$upd2['item_foreign_gst_amt2'] = $r['item_foreign_gst_amt2'];
						$upd2['display_cost_price_is_inclusive'] = $r['display_cost_price_is_inclusive'];
						$upd2['display_cost_price'] = $r['display_cost_price'];
						
                        $item_id_need_to_delete_arr[] = $r['id'];   // store item id for later delete
						// insert item
						$con->sql_query("insert into ".NOTE_TBL_ITEMS." ".mysql_insert_by_field($upd2));
					}
					
					
					// sum total
					$total_ctn += $r['ctn'];
					$total_pcs += $r['pcs'];
					$total_qty += ($r['ctn']*$r['uom_fraction'])+$r['pcs'];
					$sub_total_amount += $row_price;
					$sub_total_foreign_amount += $row_foreign_price;
					$total_selling += $row_selling;
				}
			}
			
			$total_amount = $sub_total_amount;
			$total_foreign_amount = $sub_total_foreign_amount;
			
			if($upd['discount']){
				list($disc1, $disc2) = explode("+", $upd['discount']);
				$sheet_discount_amt = $sheet_foreign_discount_amt = 0;
				if($disc1){
					$disc1_amt = $total_amount*($disc1/100);
					$disc1_foreign_amt = $total_foreign_amount*($disc1/100);
					$sheet_discount_amt += $disc1_amt;
					$sheet_foreign_discount_amt += $disc1_foreign_amt;
					$total_amount -= $disc1_amt;
					$total_foreign_amount -= $disc1_foreign_amt;
				}
				if($disc2){
					$disc2_amt = $total_amount*($disc2/100);
					$disc2_foreign_amt = $total_foreign_amount*($disc2/100);
					$sheet_discount_amt += $disc2_amt;
					$sheet_foreign_discount_amt += $disc2_foreign_amt;
					$total_amount -= $disc2_amt;
					$total_foreign_amount -= $disc2_foreign_amt;
				}
			}

			// update discount and total
			$upd_total = array();
			$upd_total['discount'] = $upd['discount'];
			$upd_total['discount_amount'] = $sheet_discount_amt;
			$upd_total['foreign_discount_amount'] = $sheet_foreign_discount_amt;
			$upd_total['total_ctn'] = $total_ctn;
			$upd_total['total_pcs'] = $total_pcs;
			$upd_total['total_amount'] = $total_amount;
			$upd_total['sub_total_amt'] = $sub_total_amount;
			$upd_total['total_foreign_amount'] = $total_foreign_amount;
			$upd_total['sub_total_foreign_amt'] = $sub_total_foreign_amount;
			$upd_total['total_selling'] = $total_selling;
			$upd_total['total_qty'] = $total_qty;
			$con->sql_query("update ".NOTE_TBL." set ".mysql_update_by_field($upd_total)." where branch_id=$branch_id and id=$use_cn_id");
			
			if($form['approved']){
                cn_approval($branch_id, $use_cn_id, 1, true, false);
			}
			recalculate_cn_dn_amount($use_cn_id, $branch_id);
		}

		if($update_self&&$item_id_need_to_delete_arr){   // delete other price type item in this sheet
			$con->sql_query("delete from ".NOTE_TBL_ITEMS." where branch_id=$branch_id and ".NOTE_TBL."_id=$cn_id and id in(".join(',',$item_id_need_to_delete_arr).")");
			// calculate gst again cause due to the item have been deleted
			recalculate_cn_dn_amount($cn_id, $branch_id);
		}
		
		if($new_id_list){
			$q1 = $con->sql_query("select * from consignment_report_export_history where branch_id=".mi($form['mr_branch_id'])." and year=".mi($form['mr_year'])." and month=".mi($form['mr_month'])." and active=1 limit 1");
			$creh_info = $con->sql_fetchassoc($q1);
			$con->sql_freeresult($q1);
			
			if(NOTE_TBL == "dn") $curr_id_list = explode(",", $creh_info['lost_list']);
			else $curr_id_list = explode(",", $creh_info['over_list']);
			
			foreach($curr_id_list as $r=>$val){
				$val = trim($val);
				if(!in_array($val, $new_id_list)) $new_id_list[] = $val;
			}
			asort($new_id_list);
			
			$creh_upd = array();
			if(NOTE_TBL == "dn") $creh_upd['lost_list'] = join(",", $new_id_list);
			else $creh_upd['over_list'] = join(",", $new_id_list);
			$creh_upd['timestamp'] = "CURRENT_TIMESTAMP";
			
			$con->sql_query("update consignment_report_export_history set ".mysql_update_by_field($creh_upd)." where branch_id=".mi($form['mr_branch_id'])." and year=".mi($form['mr_year'])." and month=".mi($form['mr_month'])." and active=1 and id = ".mi($creh_info['id']));
		}
		
		if($last_approval)  $t = 'approve';
		else    $t = 'confirm';
		
		header("Location: $_SERVER[PHP_SELF]?t=$t&save_id=$cn_id");
		exit;
	}
	
	function print_cn(){
        $id = $_REQUEST['id'];
        $branch_id = $_REQUEST['branch_id'];

        print_cn($branch_id, $id);
	}
	
	function ajax_change_cn_branch(){
		global $con, $sessioninfo, $config;
		$branch_id = mi($_REQUEST['branch_id']);
		$cn_id = mi($_REQUEST['id']);
		$to_branch_id = mi($_REQUEST['to_branch_id']);
		$date = $_REQUEST['date'];
		if(!$to_branch_id)  exit;

		if($config['consignment_modules'] && $config['cm_use_deliver_branch_sp']){
			$sp_bid = $to_branch_id;
			$select = ", ifnull(sip.price,si.selling_price) as selling_price,if(sip.price is null,sku.default_trade_discount_code, sip.trade_discount_code) as trade_discount_code, sku.default_trade_discount_code";
			$left_join = "left join sku_items si on si.id = cni.sku_item_id
						  left join sku on sku_id = sku.id
						  left join sku_items_price sip on sip.branch_id=$sp_bid and sip.sku_item_id=si.id";
		}else $sp_bid = $branch_id;
		
		$sql = "select cni.* , btd.value as new_discount_per,sic.qty as sb2 $select
		from ".NOTE_TBL_TMP_ITEMS." cni
		left join branch_trade_discount btd on btd.branch_id=$to_branch_id and btd.trade_discount_id=cni.price_type_id
		left join sku_items_cost sic on sic.branch_id=$to_branch_id and sic.sku_item_id=cni.sku_item_id
		$left_join
		where cni.branch_id=$branch_id and cni.".NOTE_TBL."_id=$cn_id and cni.user_id=$sessioninfo[id]";
		$q1 = $con->sql_query($sql);

		$trade_discount_type_arr = array();
		while($r = $con->sql_fetchrow($q1)){
			$upd = array();
			if($config['consignment_modules'] && $config['cm_use_deliver_branch_sp']){
				// cost
				$tmp = array();
				$q2 = $con->sql_query("select cost_price, grn_cost, avg_cost, date
									   from sku_items si
									   left join sku_items_cost_history sich on (sich.sku_item_id = si.id and date < ".ms($date)." and branch_id=".mi($sp_bid).")
									   where si.id = ".mi($r['sku_item_id'])."
									   order by sich.date desc limit 1");
				$tmp = $con->sql_fetchrow($q2);
				$con->sql_freeresult($q2);

				$upd['cost'] = ($tmp['grn_cost']>0) ? $tmp['grn_cost'] : $tmp['cost_price'];

				$upd['selling_price'] = $upd['cost_price']  = $r['selling_price'];
				$upd['trade_discount_code'] = $r['trade_discount_code'];
				
			    if($config['sku_always_show_trade_discount'] && !$upd['trade_discount_code']){
					$upd['trade_discount_code'] = $r['default_trade_discount_code'];
				}

				$trade_discount_type = $upd['trade_discount_code'];

				if(!$trade_discount_type_arr[$trade_discount_type]){    // find price type id
					$q3 = $con->sql_query("select id from trade_discount_type where code=".ms($trade_discount_type));
					$tmp1 = $con->sql_fetchrow($q3);
					$con->sql_freeresult($q3);
					$trade_discount_type_arr[$trade_discount_type] = $tmp1['id'];
					
					$q4 = $con->sql_query("select value from branch_trade_discount where branch_id=$to_branch_id and trade_discount_id=".mi($tmp1['id']));

					$tmp2 = $con->sql_fetchrow($q4);
					$con->sql_freeresult($q4);
					$trade_discount_per[$trade_discount_type] = $tmp2['value'];
				}
				$upd['price_type_id'] = $trade_discount_type_arr[$trade_discount_type];
				$upd['discount_per'] = $trade_discount_per[$trade_discount_type];
			}else $upd['discount_per'] = $r['new_discount_per'] ? $r['new_discount_per'] : 0;
			$upd['id'] = $r['id'];
			$upd['sb2'] = mf($r['sb2']);
			$ret[$r['id']] = $upd;
		}
		$con->sql_freeresult($q1);
		
		$con->sql_query("select con_lost_ci_discount from branch where id=$to_branch_id");
		$ret['sheet_discount'] = $con->sql_fetchfield(0);
		print json_encode($ret);
		exit;
	}
	
	function ajax_change_export_ubs_status(){
		global $con, $sessioninfo,$config;
		
		// check whether user allow to update ubs status
		$required_level = $config['ci_toggle_ubs_status_level']? $config['ci_toggle_ubs_status_level']:1000;
		if($sessioninfo['level']<$required_level){
			print "Error: You are not allow to change the status";exit;
		}
	    
		$branch_id = mi($_REQUEST['branch_id']);
		$id = mi($_REQUEST['id']);
		$update_to_status = mi($_REQUEST['update_to_status']);
	
        $con->sql_query("update ".NOTE_TBL." set export_ubs=$update_to_status ,last_update=last_update where branch_id=$branch_id and id=$id");
        print "OK";
	}
	
	function export_ubs(){
		global $con, $smarty, $sessioninfo, $config;
		
		$financial_date = sprintf('%04d%02d',$_REQUEST['financial_year'],$_REQUEST['financial_month']);
		$month = mi($_REQUEST['month']);
		$year = mi($_REQUEST['year']);
		$to_branch_id = mi($_REQUEST['branch_id']);
		
		$from_date = $year."-".$month."-1";
		$to_date = $year."-".$month."-".days_of_month($month,$year);

		$filter = array();
		$filter[] = "cn.date between ".ms($from_date)." and ".ms($to_date);
		$filter[] = "cn.active=1 and cn.status=1 and cn.approved=1 and cn.export_ubs=0";
		if($to_branch_id) $filter[] = "cn.to_branch_id=$to_branch_id";

		$filter = join(' and ',$filter);

		$sql = "select branch_id,to_branch_id as ci_branch_id,date as ci_date,inv_no as ci_no,total_amount as sub_total, discount_amount,1+PERIOD_DIFF(DATE_FORMAT(cn.date,'%Y%m'),$financial_date) as period,branch.code,branch.description
	from ".NOTE_TBL." cn
	left join branch on branch.id=cn.to_branch_id
	where $filter order by inv_no";
		//print $sql;exit;

		$con->sql_query($sql) or die(mysql_error());
		//$data = $con->sql_fetchrowset();
		while($r = $con->sql_fetchrow()){
			$r['total_amount'] = round($r['sub_total'] - $r['discount_amount'],2);
			if($r['total_amount']<=0)   continue;
			$data[] = $r;
		}
		
		if($data){
		    $smarty->assign('data',$data);
	        if (!is_dir('UBS')) mkdir('UBS',0777);
	        //$filename = 'UBS/'.SHEET_NAME.'.CSV';
	        $filename = 'UBS/GLPOST9.CSV';
			file_put_contents($filename, $smarty->fetch('consignment_invoice.export_inv.tpl'));

			$sql = "update ".NOTE_TBL." cn set export_ubs=1,last_update=last_update where $filter";
		    $con->sql_query($sql) or die(mysql_error());
		    
			print "<script>alert('Export successful. (Saved to $filename)');</script>";
	        print "<script>window.parent.refresh_list_after_ubs_export();</script>";

		}else{
	        print "<script>alert('Export Failed. No data to export.');</script>";
		}
	}
	
	function ajax_search_inv_no(){
        global $con, $sessioninfo, $smarty, $config;

		$inv_no_from = trim($_REQUEST['inv_no_from']);
		$inv_no_to = trim($_REQUEST['inv_no_to']);

		if(!$inv_no_from||!$inv_no_to) die('No Data');

		$filter = array();
		$filter[] = "cn.active=1 and cn.status=1 and cn.approved=1";
		$filter[] = "cn.inv_no between ".ms($inv_no_from)." and ".ms($inv_no_to);
		$filter = "where ".join(' and ', $filter);

		$sql = "select cn.*,branch.code as to_branch_code,branch.description as to_branch_desc
	from ".NOTE_TBL." cn
	left join branch on branch.id=cn.to_branch_id
	$filter order by cn.inv_no";
		$con->sql_query($sql);
		$smarty->assign('sheet_list', $con->sql_fetchrowset());
		$con->sql_freeresult();
		$smarty->display('consignment.credit_note.multiple_print.list.tpl');
	}
	
	function multiple_print(){
		global $con, $sessioninfo, $smarty, $config;

		$sheet_list = $_REQUEST['sheet_list'];
		if(!$sheet_list)   exit;

		foreach($sheet_list as $v){
		    //$smarty->clear_all_assign();
			list($bid, $id) = explode(",", $v);
			print_cn($bid, $id);
		}
	}
	
	function fix_empty_inv_no(){
		global $con;
		
		$q1 = $con->sql_query("select branch_id, id from ".NOTE_TBL." where approved=1 and inv_no is null");
		while($r = $con->sql_fetchrow($q1)){
            assign_inv_no($r['branch_id'], $r['id']);
		}
		print "Done";
	}
	
	function check_tmp_item_exists() {
		global $con, $sessioninfo;
		
		if ($_REQUEST['pcs']) {
			$sql = "select count(*) as c from tmp_".NOTE_TBL."_items where id in (".join(',',array_keys($_REQUEST['pcs'])).") and branch_id = ".mi($_REQUEST['branch_id'])." limit 1";
			$con->sql_query($sql);
			if ($con->sql_fetchfield('c') == count($_REQUEST['pcs'])) print 'OK';
			else print "Error saving document : Probably it is opened & saved before in other window/tab";
			exit;
		}
		else {
			print 'OK';
			exit;
		}
	}
	
	function recalculate_gst_amount(){
		recalculate_cn_dn_amount($_REQUEST['id'], $_REQUEST['branch_id']);
	}
}

$CREDIT_NOTE = new CREDIT_NOTE('Consignment '.ucwords(strtolower(SHEET_NAME)));
?>
