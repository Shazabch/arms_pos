<?php/*3/2/2010 10:00:30 AM Andy- Change to only allow user with privilege to cancel redemption8/18/2010 11:19:09 AM Justin- Added Verification feature (Approval Flow).- Amended some existing codes to have approval info.- Added branch option selection.- Added new tab to view Waiting for Verification redemption.8/25/2010 6:30:34 PM Justin- Added Cash column.- Added cancel button is visible for cancel when it is within limit of cancel days.  -> If config on, limit of cancel days will based on config['membership_redemption_limit_cancel_days']  -> If without config, the limit of cancel days will default as 7 days  9/9/2010 5:46:35 PM Justin- Disabled some of the checking for privilege REDEMPTION_CANCEL_RE since it is not required10/8/2010 5:44:41 PM Justin- Fixed the wrong msg display while it is approved.10/28/2010 12:01:17 PM Justin- Added the link to user table to get who user fullname of make redemption.- Modified the cancel function to insert new membership points to add up the canceled redemption instead of delete existing one.11/4/2010 10:50:17 AM Justin- Fixed the bugs where cannot display the scanned IC image.11/9/2010 4:13:50 PM Justin- Added the updates for member when redemption that is being canceled.11/24/2010 2:57:02 PM Justin- Modified the slip printing to connect to HQ.12/17/2010 6:23:44 PM Justin- Fixed the Scan IC image problem when view in completed redemption items.2/17/2011 11:56:55 AM Justin- Assigned the cancel days limit into tpl use.4/8/2011 5:03:18 PM Justin- Converted most of the connection to HQ to use local connection except those update/retrieve points query.4/21/2011 4:21:32 PM Justin- Fixed the membership info cannot extract, this is due to the membership applied new card no and unable to trace back existing member info.8/16/2011 1:32:21 PM Justin- Removed the checking status=0 while doing cancellation.2/14/2012 11:51:32 AM Justin- Modified to always get the Redemption Verification list base on current logged on branch.1/11/2013 5:18 PM Justin- Enhanced to pickup voucher codes from serialize field.7/3/2013 11:32 AM Fithri- pm notification standardization7/31/2013 5:12 PM Andy- Change module to use get_pm_recipient_list2() and send_pm2() in order to compatible with latest Approval Flow Settings.- Fix Membership Redemption Verify show wrong Approval sequence in Waiting for Approval list.12/23/2013 10:23 AM Fithri- new module 'Stucked Documents Approval'3/7/2014 5:34 PM Justin- Enhanced to have new feature that print prefix receipt no if found config set.3/24/2014 5:56 PM Justin- Modified the wording from "Canceled" to "Cancelled".2/17/2015 1:50 PM Andy- Enhance to print tax invoice after print slip.10/7/2016 11:46 AM Andy- Fixed stucked approval redirect to wrong php.10/7/2016 2:13 PM Andy- Hide print invoice at print slip module.1/3/2020 9:42 AM William- Enhanced to insert "membership_guid" field for membership_points table. 1/30/2020 5:17 Andy- Increased maintenance checking to v438.*/include("include/common.php");//ini_set("display_errors",1);if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('MEMBERSHIP_CANCEL_RE')&&!privilege('MEMBERSHIP_REDEEM')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'MEMBERSHIP_CANCEL_RE and MEMBERSHIP_REDEEM', BRANCH_CODE), "/index.php");$maintenance->check(438);$con->sql_query("select id, code from branch");while($r = $con->sql_fetchrow()){	$branches[$r['code']] = $r['id'];}$smarty->assign("branches", $branches);$hqcon = connect_hq();class Membership_Redemption_History extends Module{	var $page_size = 30;    // this is the item show in list, not print, use $config['redemption_print_item_per_page'] to change print item	    function _default(){		global $con, $smarty;	    $this->display();	}		function ajax_list_sel(){        global $con, $smarty, $sessioninfo;        $page_size = $this->page_size;		//print_r($_REQUEST);		$t = mi($_REQUEST['t']);		$p = mi($_REQUEST['p']);		$size = $page_size;		$start = $p*$size;		$branch_id = $sessioninfo['branch_id'];		switch($t){			case 1: // verification list				// old				//$filter[] = "bah.approvals like '%|$sessioninfo[id]|%' and mr.status=0 and verified=0";				// new				$filter[] = "((bah.approvals like '|$sessioninfo[id]|%' and bah.approval_order_id=1) or (bah.approvals like '%|$sessioninfo[id]|%' and bah.approval_order_id in (2,3))) and mr.status=0 and verified=0";				break;			case 2: // waiting for verification				$filter[] = "mr.status=0 and verified=0";				break;			case 3:	// completed				$filter[] = "mr.status=0 and verified=1";				break;			case 4: // cancelled				$filter[] = "mr.status=1";				break;			case 5: // search items				$str = $_REQUEST['search_str'];				if(!$str)	die('Cannot search empty string');				if(mi($str))	$filter_or[] = "mr.id=".mi($str);				$filter_or[] = "mr.card_no=".ms($str);				$filter_or[] = "mr.nric=".ms($str);				$filter_or[] = "mr.redemption_no=".ms($str);				$filter[] = "(".join(' or ',$filter_or).")";				$smarty->assign('search_str', $str);				break;			default:				die('Invalid Page');		}		if($_REQUEST['do_verify']) $filter[] = "mr.status=0 and verified=0";		if($_REQUEST['date']) $filter[] = "mr.date=".ms($_REQUEST['date']);				$filter[] = "mr.active=1";		if($branch_id) $filter[] = "mr.branch_id=".mi($branch_id);		//if(!privilege('MEMBERSHIP_CANCEL_RE'))  $filter[] = "user_id=".mi($sessioninfo['id']);				$filter = "where ".join(' and ',$filter);		$sql = "select count(*) from membership_redemption mr left join branch_approval_history bah on mr.approval_history_id = bah.id and mr.branch_id = bah.branch_id $filter";		//print $sql;		$con->sql_query($sql) or die(mysql_error());		$total_rows = $con->sql_fetchfield(0);		if($start>=$total_rows){			$start = 0;			$_REQUEST['p'] = 0;		}		$limit = "limit $start, $size";		$order = "order by last_update desc";		$total_page = ceil($total_rows/$size);		$sql = "select mr.*,user.u,u2.u as cancel_by_u, bah.approvals, bah.flow_approvals, bah.approval_order_id		from membership_redemption mr		left join branch_approval_history bah on mr.approval_history_id = bah.id and mr.branch_id = bah.branch_id		left join user on user.id=mr.user_id		left join user u2 on u2.id=mr.cancel_by		$filter $order $limit";		//echo $sql;		//print $sql;		$con->sql_query($sql) or die(mysql_error());		while($r = $con->sql_fetchrow()){			$items[] = $r;		}		$con->sql_freeresult();		$smarty->assign('items',$items);		$smarty->assign('total_page',$total_page);		$smarty->assign('item_counter',$start+1);		$smarty->display('membership.redemption_history.table.tpl');	}		function print_slip(){        global $con, $smarty, $sessioninfo, $LANG, $config;		$id = mi($_REQUEST['id']);		$branch_id = mi($_REQUEST['branch_id']);		// load header		$con->sql_query("select * from membership_redemption mr left join user on mr.user_id = user.id where mr.id=$id and mr.branch_id=$branch_id and mr.active=1") or die(mysql_error());		$form = $con->sql_fetchrow();		if(!$form){            js_redirect(sprintf($LANG['REDEMPTION_INVALID_ID'], 'MEMBERSHIP_REDEEM', BRANCH_CODE), "$_SERVER[PHP_SELF]");		}		// load items		$sql = $con->sql_query("select mri.*,si.description,si.receipt_description,si.sku_item_code,artno,mcode								from membership_redemption_items mri								left join membership_redemption mr on mr.id = mri.membership_redemption_id and mr.branch_id = mri.branch_id								left join sku_items si on si.id=mri.sku_item_id								where mri.membership_redemption_id=".mi($id)." and mri.branch_id=".mi($branch_id));		//print $sql;		while($r = $con->sql_fetchassoc($sql)){			if($r['is_voucher'] && $r['voucher_code']) $r['voucher_code'] = join(", ", unserialize($r['voucher_code']));			$items[] = $r;		}		$card_no = $form['card_no'];		$nric = $form['nric'];		// check card no and nric		$con->sql_query("select * from membership where nric=".ms($nric)) or die(mysql_error());		$membership = $con->sql_fetchrow();		// from_branch		$con->sql_query("select * from branch where id=$branch_id") or die(mysql_error());		$from_branch = $con->sql_fetchrow();		//print_r($user_info);        $upd = array();		if(!$form['redemption_no']){            $form['redemption_no'] = $from_branch['report_prefix'].sprintf('%05d',$id);            $upd['redemption_no'] = $form['redemption_no'];		}		$upd['print_count'] = $form['print_count']+1;		$upd['last_update'] = 'CURRENT_TIMESTAMP';		$con->sql_query("update membership_redemption set ".mysql_update_by_field($upd)." where id=$id and branch_id=$branch_id") or die(mysql_error());		        log_br($sessioninfo['id'], 'Redemption', $id, "Print Redemption Slip (Branch#$branch_id, Redemption ID#$id)");        		// got gst		if($form['is_under_gst']){			// construct gst			$gst_summary = array();					foreach($items as $idx=>$r){				$gst_key = $r['gst_indicator'].'_'.mi($r['gst_rate']);				$gst_summary[$gst_key]['tax_indicator'] = $r['gst_indicator'];				$gst_summary[$gst_key]['tax_rate'] = mi($r['gst_rate']);				$gst_summary[$gst_key]['before_tax_price'] += $r['line_gross_amt'];				$gst_summary[$gst_key]['tax_amount'] += $r['line_gst_amt'];									//$items[$idx]['unit_price_incl_gst'] = round($r['line_amt']/$r['qty'], 2);			}						$smarty->assign('gst_summary', $gst_summary);		}				$smarty->assign('membership_info',$membership);		$smarty->assign('from_branch',$from_branch);		$smarty->assign('form',$form);		if($config['membership_redemption_print_receipt']){			$smarty->assign("items", $items);			$smarty->display('membership.redemption.print_receipt.tpl');						// print tax invoice			if($form['is_under_gst']){				//$smarty->display('membership.redemption.print_receipt_tax_invoice.tpl');			}		}else{			$item_per_page = $config['redemption_print_item_per_page']>0?$config['redemption_print_item_per_page']:30;			$item_per_lastpage = $item_per_page - 5;			if($item_per_lastpage < 0)	$item_per_lastpage = 1;				$totalpage = 1 + ceil((count($items)-$item_per_lastpage)/$item_per_page);				for ($i=0,$page=1;$page<=$totalpage;$i+=$item_per_page,$page++){				$smarty->assign("PAGE_SIZE", ($page < $totalpage)?$item_per_page:$item_per_lastpage);				$smarty->assign("is_lastpage", ($page >= $totalpage));		        $smarty->assign("page", "Page $page of $totalpage");		        $smarty->assign("start_counter", $i);		        $smarty->assign("items", array_slice($items,$i,$item_per_page));				$smarty->display('membership.redemption.print_slip.tpl');				$smarty->assign("skip_header",1);	 		}						// print tax invoice			if($form['is_under_gst']){				/*$item_per_page = $config['membership_redemption_print_tax_invoice_per_page']>0 ? $config['membership_redemption_print_tax_invoice_per_page']:20;				$item_per_lastpage = $item_per_page - 5;				if($item_per_lastpage < 0)	$item_per_lastpage = 1;								$totalpage = 1 + ceil((count($items)-$item_per_lastpage)/$item_per_page);								for ($i=0,$page=1;$page<=$totalpage;$i+=$item_per_page,$page++){					$smarty->assign("PAGE_SIZE", ($page < $totalpage)?$item_per_page:$item_per_lastpage);					$smarty->assign("is_lastpage", ($page >= $totalpage));					$smarty->assign("page", "Page $page of $totalpage");					$smarty->assign("start_counter", $i);					$smarty->assign("items", array_slice($items,$i,$item_per_page));					$smarty->display('membership.redemption.print_tax_invoice.tpl');					//$smarty->assign("skip_header",1);				}*/			}	 	}	}		function view(){		global $con,$smarty,$sessioninfo,$LANG,$config;				$id = mi($_REQUEST['id']);		$branch_id = mi($_REQUEST['branch_id']);		$t = mi($_REQUEST['t']);				if ($_REQUEST['on_behalf_of'] && $_REQUEST['on_behalf_by']) {			$con->sql_query("select group_concat(u separator ', ') as u from user where id in (".str_replace('-',',',$_REQUEST['on_behalf_of']).")");			$on_behalf_of_u = $con->sql_fetchfield(0);			$con->sql_query("select u from user where id = ".mi($_REQUEST['on_behalf_by'])." limit 1");			$on_behalf_by_u = $con->sql_fetchfield(0);			$approval_on_behalf = array(				'on_behalf_of' => str_replace('-',',',$_REQUEST['on_behalf_of']),				'on_behalf_by' => mi($_REQUEST['on_behalf_by']),				'on_behalf_of_u' => $on_behalf_of_u,				'on_behalf_by_u' => $on_behalf_by_u,			);		}		else {			$approval_on_behalf = false;		}		$smarty->assign('approval_on_behalf', $approval_on_behalf);				$filter[] = "mr.id=$id and mr.branch_id=$branch_id";		//if(!privilege('MEMBERSHIP_CANCEL_RE'))  $filter[] = "mr.user_id=".mi($sessioninfo['id']);		$filter = "where ".join(' and ',$filter);				// extract the limit of cancel days from config		if($config['membership_redemption_limit_cancel_days']){			$days_limit = $config['membership_redemption_limit_cancel_days'];		}else{ // else set 7 days as default			$days_limit = 7;		}				$sql = "select mr.*,user.u, bah.approvals,				if(date_format(date_add(mr.date, interval $days_limit day), '%Y-%m-%d') >= CURDATE(), 1, '') can_cancel				from membership_redemption mr				left join branch_approval_history bah on mr.approval_history_id = bah.id and mr.branch_id = bah.branch_id				left join user on user.id=mr.user_id				$filter";		$con->sql_query($sql) or die(myqsl_error());		$form = $con->sql_fetchrow();				if(preg_match("/\|$sessioninfo[id]\|/", $form['approvals'])) $form['is_approval'] = 1;				if ($approval_on_behalf) {			$form['is_approval'] = 1;		}				if(!$form){            js_redirect(sprintf($LANG['REDEMPTION_INVALID_ID'], 'MEMBERSHIP_REDEEM', BRANCH_CODE), "$_SERVER[PHP_SELF]");		}		/*		if(!privilege('MEMBERSHIP_CANCEL_RE')&&$form['user_id']!=$sessioninfo['id']){            js_redirect(sprintf($LANG['REDEMPTION_INVALID_VIEW'], 'MEMBERSHIP_REDEEM', BRANCH_CODE), "$_SERVER[PHP_SELF]");		} */ 		        $card_no = $form['card_no'];		$nric = $form['nric'];		// check card no and nric		$con->sql_query("select *, branch.code as apply_branch_code, branch.ip as icfile_ip from membership left join branch on membership.apply_branch_id = branch.id where membership.nric=".ms($nric)) or die(mysql_error());		$membership = $con->sql_fetchrow();		$hurl = get_branch_file_url($membership['apply_branch_code'], $membership['icfile_ip']);		$ic_path = "$hurl/$config[scanned_ic_path]/$membership[nric].JPG";				$sql = $con->sql_query("select mri.*,si.description,si.sku_item_code,artno,mcode, cs.id as counter_id								from membership_redemption_items mri								left join sku_items si on si.id=mri.sku_item_id								left join counter_settings cs on cs.network_name = mri.counter_no and cs.branch_id = mri.branch_id								where mri.membership_redemption_id=".mi($id)." and mri.branch_id=".mi($branch_id));		while($r = $con->sql_fetchassoc($sql)){			if (unserialize($r['voucher_code'])) $r['voucher_code'] = join(", ", unserialize($r['voucher_code']));			$items[] = $r;		}		$con->sql_freeresult($sql);		//print $sql;		$smarty->assign('items',$items);		$smarty->assign('membership_info',$membership);		$smarty->assign('form',$form);		$smarty->assign('t', $t);		$smarty->assign('ic_path', $ic_path);		$smarty->assign('search_str', $_REQUEST['search_str']);		$smarty->assign('days_limit', $days_limit);		$smarty->display('membership.redemption_history.view.tpl');	}		function cancel(){		global $con,$hqcon,$smarty,$sessioninfo,$LANG;	    		if(!privilege('MEMBERSHIP_CANCEL_RE')&&!$_REQUEST['is_approval'])  js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'MEMBERSHIP_CANCEL_RE', BRANCH_CODE), "$_SERVER[PHP_SELF]");            	$id = mi($_REQUEST['id']);		$branch_id = mi($_REQUEST['branch_id']);				if ($_REQUEST['on_behalf_of'] && $_REQUEST['on_behalf_by']) {			$con->sql_query("select group_concat(u separator ', ') as u from user where id in (".str_replace('-',',',$_REQUEST['on_behalf_of']).")");			$on_behalf_of_u = $con->sql_fetchfield(0);			$con->sql_query("select u from user where id = ".mi($_REQUEST['on_behalf_by'])." limit 1");			$on_behalf_by_u = $con->sql_fetchfield(0);			$approval_on_behalf = array(				'on_behalf_of' => str_replace('-',',',$_REQUEST['on_behalf_of']),				'on_behalf_by' => mi($_REQUEST['on_behalf_by']),				'on_behalf_of_u' => $on_behalf_of_u,				'on_behalf_by_u' => $on_behalf_by_u,			);		}		else {			$approval_on_behalf = false;		}    	//if(!privilege('MEMBERSHIP_CANCEL_RE'))  $filter[] = "mr.user_id=".$sessioninfo['id'];		$filter[] = "mr.id=$id and mr.branch_id=$branch_id";		$filter[] = "active=1";		$filter = "where ".join(' and ',$filter);		// header		$sql = "select mr.*,membership.membership_guid from membership_redemption mr left join membership on mr.card_no = membership.card_no $filter";		$con->sql_query($sql) or die(myqsl_error());		$form = $con->sql_fetchrow();				if(!$form){            js_redirect(sprintf($LANG['REDEMPTION_INVALID_ID'], 'MEMBERSHIP_REDEEM', BRANCH_CODE), "$_SERVER[PHP_SELF]");		}				// member points		$mem_filter = "where date(date)=".ms($form['date'])." and type='CANCELED' and branch_id=$branch_id and card_no=".ms($form['card_no']);		$sql = "select * from membership_points $mem_filter";				$hqcon->sql_query($sql) or die(myqsl_error());		$mem_points = $hqcon->sql_fetchrow();		$new_point = $mem_points['points']+$form['total_pt_need'];		/*		if($new_point==0){  // delete            //$hqcon->sql_query("delete from membership_points $mem_filter") or die(myqsl_error());		}else{  // update            $hqcon->sql_query("update membership_points set points=".mf($new_point)." $mem_filter") or die(myqsl_error());		}*/        // insert into membership_points as for history view record        if(!$mem_points){			$mp['membership_guid'] = $form['membership_guid'];	        $mp['nric'] = $form['nric'];	        $mp['card_no'] = $form['card_no'];	        $mp['branch_id'] = $branch_id;			$mp['date'] = 'CURRENT_TIMESTAMP';			$mp['points'] = $form['total_pt_need'];			$mp['remark'] = "Redemption Cancelled";			$mp['type'] = 'CANCELED';			$mp['user_id'] = $sessioninfo['id'];			$hqcon->sql_query("insert into membership_points ".mysql_insert_by_field($mp)) or die(mysql_error());		}else{			$hqcon->sql_query("update membership_points set points=".mf($new_point)." $mem_filter") or die(myqsl_error());		}		// adjustment		$adjustment_id = mi($form['adjustment_id']);		if($adjustment_id)	$con->sql_query("update adjustment set active=0 where id=$adjustment_id and branch_id=$branch_id") or die(myqsl_error());		$sku_item_id_list = array();		// items		$con->sql_query("select * from membership_redemption_items where branch_id=$branch_id and membership_redemption_id=$id") or die(myqsl_error());		while($r = $con->sql_fetchrow()){            $sku_item_id_list[$r['sku_item_id']] = $r['sku_item_id'];		}		// update into membership to get the latest points....		$hqcon->sql_query("update membership set points = points + ".mi($form['total_pt_need']).", points_update = ".ms(date('Y-m-d'))." where nric = ".ms($form['nric']));				// update cost		if($sku_item_id_list){            $con->sql_query("update sku_items_cost set changed=1 where branch_id=$branch_id and sku_item_id in (".join(',',$sku_item_id_list).")") or die(myqsl_error());		}				if($_REQUEST['is_approval']){			$do_verify="&t=1&do_verify=1";			$this->verify();		}else{			log_br($sessioninfo['id'], 'MEMBERSHIP_REDEMPTION', $id, "Membership Redemption Cancelled by $sessioninfo[u] (Branch#$branch_id, ID#$id)");		}				// update header		$upd = array();		$upd['status'] = 1;		$upd['last_update'] = 'CURRENT_TIMESTAMP';		$upd['cancel_by'] = $sessioninfo['id'];		$con->sql_query("update membership_redemption set ".mysql_update_by_field($upd)." where id=$id and branch_id=$branch_id") or die(myqsl_error());		if($_REQUEST['ajax']){			header("Location: $_SERVER[PHP_SELF]?a=ajax_list_sel&ajax=1&t=$_REQUEST[t]&p=$_REQUEST[p]&search_str=$_REQUEST[search_str]");		}else   header("Location: $_SERVER[PHP_SELF]?id=$id&verified=0$do_verify");			}	function verify(){		global $con,$smarty,$sessioninfo,$config;				$form=$_REQUEST;	 	$approved=0;		$id = $form['id'];	 	$branch_id = $form['branch_id'];		$aid=$form['approval_history_id'];		$approvals=$form['approvals'];		$status=$form['status'];				if ($_REQUEST['on_behalf_of'] && $_REQUEST['on_behalf_by']) {			$con->sql_query("select group_concat(u separator ', ') as u from user where id in (".str_replace('-',',',$_REQUEST['on_behalf_of']).")");			$on_behalf_of_u = $con->sql_fetchfield(0);			$con->sql_query("select u from user where id = ".mi($_REQUEST['on_behalf_by'])." limit 1");			$on_behalf_by_u = $con->sql_fetchfield(0);			$approval_on_behalf = array(				'on_behalf_of' => str_replace('-',',',$_REQUEST['on_behalf_of']),				'on_behalf_by' => mi($_REQUEST['on_behalf_by']),				'on_behalf_of_u' => $on_behalf_of_u,				'on_behalf_by_u' => $on_behalf_by_u,			);		}		else {			$approval_on_behalf = false;		}			if($status == 1){			$comment="Verified";			$params = array();			$params['approve'] = $status;			$params['user_id'] = $sessioninfo['id'];			$params['id'] = $aid;			$params['branch_id'] = $branch_id;			$params['update_approval_flow'] = true;			if($auto_approve) $params['auto_approve'] = true;		    	$is_last = check_is_last_approval_by_id($params, $con);	    	if($is_last)  $approved = 1;		}else{		  	$comment="Membership Redemption Cancelled (ID#$id)";	    	$con->sql_query("update branch_approval_history set status=$status, approvals = ".ms($approvals)." where id = $aid and branch_id = $branch_id") or die(mysql_error());		}		if ($approval_on_behalf) {			$comment .= " (by ".$on_behalf_by_u." on behalf of ".$on_behalf_of_u.")";		}		$comment = ms($comment);				$con->sql_query("insert into branch_approval_history_items (approval_history_id, branch_id, user_id, status, log) values ($aid, $branch_id, $sessioninfo[id], $status, $comment)") or die(mysql_error());				// due to the programmer fix the active status = 0 and cancelled status = 1, 		// need to manually configure the status to update for main table  		if($status == 1){ // verified			$status_msg="Verified";			$mstatus = 0;		}elseif($status == 5){ // cancelled			$status_msg="Cancelled";			$mstatus = 1;		}				$con->sql_query("update membership_redemption set status=".mi($mstatus).", verified=".mi($approved).", last_update=CURRENT_TIMESTAMP where id=$id and branch_id=$branch_id");		//$this->send_pm_to_user($id, $branch_id, $aid, $status_msg);		$to = get_pm_recipient_list2($id,$aid,$status,'approval',$branch_id,'membership_redemption');		send_pm2($to, "Membership Redemption Verification (ID#$id) $status_msg", "membership.redemption_history.php?a=view&id=$id&branch_id=$branch_id", array('module_name'=>'membership_redemption'));			log_br($sessioninfo['id'], 'MEMBERSHIP_REDEMPTION', $id, "Membership Redemption $status_msg by $sessioninfo[u] (Branch#$branch_id, ID#$id)");		if($status == 1){					if ($approval_on_behalf) {				header("Location: /stucked_document_approvals.php?m=membership_redemption");				exit;			}					header("Location: /membership.redemption_history.php?t=1&verified=1&do_verify=$_REQUEST[do_verify]&id=$id");			exit;		}	}		/*	function send_pm_to_user($id, $branch_id, $aid, $status_msg){		global $con, $sessioninfo, $smarty;		// get the PM list		$con->sql_query("select notify_users from branch_approval_history where id=$aid and branch_id = $branch_id");		$r = $con->sql_fetchrow();			$recipients = $r[0];		$recipients = str_replace("|$sessioninfo[id]|", "|", $recipients);		$to = preg_split("/\|/", $recipients);			// send pm		send_pm($to, "Membership Redemption Verification (ID#$id) $status_msg", "membership.redemption_history.php?a=view&id=$id&branch_id=$branch_id");	}	*/}$Membership_Redemption_History = new Membership_Redemption_History('Redemption History');?>