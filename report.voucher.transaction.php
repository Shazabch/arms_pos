<?php/*4/18/2011 5:36:15 PM Alex- created by me4/28/2011 3:53:41 PM Alex- add show group monthly6/27/2011 10:09:31 AM Andy- Make all branch default sort by sequence, code.10/11/2011 3:05:56 PM Alex- Change filter of searching code2/1/2012 2:35:20 PM Alex- change filter of searching code to match all if over 12 digit1/31/2013 1:56 PM Andy- commit the changes done by alex.- Fix report to show duplicate data if got payment adjust in counter collection.*/include("include/common.php");include("include/class.report.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");include("masterfile_voucher.include.php");class REPORT_VOUCHER_TRANSACTION extends Module{     function __construct($title){        global $con, $smarty, $sessioninfo;		//default assign        if (!$_REQUEST['to_date']) $_REQUEST['to_date'] = date('Y-m-d');		if (!$_REQUEST['from_date']) $_REQUEST['from_date'] = date('Y-m-d', strtotime("-1 month"));        $this->date_from = $_REQUEST['from_date'];        $this->date_to = $_REQUEST['to_date'];		//Branches		$con->sql_query("select * from branch where active=1 order by sequence,code");		while($r = $con->sql_fetchrow()){			$branches[$r['id']] = $r;			$this->branches[$r['id']]=$r['code'];		}		$smarty->assign("branches", $branches);        $bid  = get_request_branch(true);        $this->bid=$bid;       	$smarty->assign('form',$_REQUEST);    	parent::__construct($title);    }	function _default(){		$this->display();		exit;	}	function show_report(){		$this->generate_report();		$this->display();	}	function output_excel(){	    global $smarty, $sessioninfo;				$this->generate_report();        include_once("include/excelwriter.php");    	$smarty->assign('no_header_footer', true);    	$filename = "voucher_transaction_".time().".xls";    	log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Voucher Transaction Report To Excel($filename)");    	Header('Content-Type: application/msexcel');		Header('Content-Disposition: attachment;filename='.$filename);		print ExcelWriter::GetHeader();		$this->display();		print ExcelWriter::GetFooter();	    exit;	}		function generate_report(){	    global $con, $smarty, $sessioninfo, $LANG;		$form=$_REQUEST;		$this->by_monthly=$form['by_monthly'];		        $con_multi=new mysql_multi();        //$con_multi = $con;		$this->generate_header_date_label();        //===============Report Title===========        if ($form['branch_id'] != 'all'){            $branch_code = get_branch_code($this->bid);            $filter[] = "pp.branch_id= $this->bid";		}else		    $branch_code = "All";        $report_title_arr[] = "Branch: $branch_code";        $report_title_arr[] = "Date: $this->date_from to $this->date_to";        		//search code		if ($form['search_code'] != ""){		    $code_length = strlen(trim($form['search_code'])); 		    if ($code_length < 12)                $filter[]="(pp.remark like ".ms($form['search_code'].'%').")";			else			    $filter[]="pp.remark=".ms($form['search_code']);	        $report_title_arr[] = "Code: $form[search_code]";		}		$report_title=join("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", $report_title_arr);		$smarty->assign('report_title',$report_title);        //====================================		//================start filter===================		$filter[]="pp.type='Voucher'";		//date		$from_date=ms($this->date_from);		$to_date=ms($this->date_to);//		$to_timestamp=ms(date("Y-m-d",strtotime('+1 days'.$form['to_date'])));		$filter[]= "pp.date between $from_date and $to_date";        $filter[]= "pos.cancel_status=0 and pp.adjust=0";		if ($filter)    $where = "where ".join(" and ", $filter);		//==============end filter====================		$sql="select pp.*,count(pp.remark) as used,sum(pp.amount) as amount, branch.code as branch_code, mv.code as voucher_code			from pos_payment pp			left join mst_voucher mv on mv.code = SUBSTRING(pp.remark,1,7)			left join pos on pp.branch_id=pos.branch_id and pp.counter_id=pos.counter_id and pp.pos_id=pos.id and pp.date=pos.date			left join branch on pp.branch_id=branch.id			$where			group by pp.branch_id,pp.date,pp.remark			order by pp.remark,pp.date";		//print $sql;		$con_multi->sql_query($sql);		if ($con_multi->sql_numrows()>0){			while($r = $con_multi->sql_fetchrow()){			    $date_key = date("Ymd", strtotime($r['date']));				//if no remark				if (!$r['remark'])				    $vc_code="Unknown";				else					$vc_code=$r['remark'];				$tb[$vc_code]['data'][$date_key]['amt'] += $r['amount'];				$tb[$vc_code]['data'][$date_key]['used'] += $r['used'];				$date_ori[$date_key]=$r['date'];				if ($r['voucher_code'] == '' || strlen($r['remark']) != 12)					$unknown_code[$vc_code]=1;				else{													$amount_code=substr($r['remark'],-5,5);				    $code_amount[$vc_code]['amount']=mf(substr($amount_code,-5,5)/100);			    }			}		}				// construct total table		if($tb){			foreach($tb as $vc_code=>$data){				if($data['data']){					foreach($data['data'] as $date_key=>$r){					    $tb[$vc_code]['data']['total']['amt']+=$r['amt'];					    $tb[$vc_code]['data']['total']['cost']+=$r['cost'];					    $tb[$vc_code]['data']['total']['used']+=$r['used'];						//                      $tb_total['data'][$date_key]['amt'] += $r['amt'];//				    	$tb_total['data'][$date_key]['cost'] += $r['cost'];//				    	$tb_total['data'][$date_key]['used'] += $r['used'];//				    	$tb_total['data']['total']['amt'] += $r['amt'];//				    	$tb_total['data']['total']['cost'] += $r['cost'];//				    	$tb_total['data']['total']['used'] += $r['used'];				    	$tb_total['total']['total']['amt'] += $r['amt'];				    	$tb_total['total']['total']['cost'] += $r['cost'];				    	$tb_total['total']['total']['used'] += $r['used'];				    	$tb_total['total'][$date_key]['amt'] += $r['amt'];				    	$tb_total['total'][$date_key]['cost'] += $r['cost'];				    	$tb_total['total'][$date_key]['used'] += $r['used'];						if ($code_amount[$vc_code]){	                        $total_arms_voucher[$date_key]['amt'] += $r['amt'];					    	$total_arms_voucher[$date_key]['cost'] += $r['cost'];					    	$total_arms_voucher[$date_key]['used'] += $r['used'];					    	$total_arms_voucher['total']['used'] += $r['used'];					    	$total_arms_voucher['total']['amt'] += $r['amt'];						}else{	                        $total_not_arms_voucher[$date_key]['amt'] += $r['amt'];					    	$total_not_arms_voucher[$date_key]['cost'] += $r['cost'];					    	$total_not_arms_voucher[$date_key]['used'] += $r['used'];					    	$total_not_arms_voucher['total']['used'] += $r['used'];					    	$total_not_arms_voucher['total']['amt'] += $r['amt'];						}					}				}			}		}		if($this->by_monthly){  // report group by month			$this->group_data_to_monthly($tb, $tb_total);		}		$smarty->assign('table', 1);		$smarty->assign('tb', $tb);		$smarty->assign('tb_total', $tb_total);		$smarty->assign('total_arms_voucher',$total_arms_voucher);		$smarty->assign('total_not_arms_voucher',$total_not_arms_voucher);		$smarty->assign('code_amount',$code_amount);		$smarty->assign('code_qty',count($code_amount));		$smarty->assign('date_ori',$date_ori);		$smarty->assign('unknown_code',$unknown_code);		$smarty->assign('unknown_qty',count($unknown_code));	}	private function group_data_to_monthly(&$tb, &$tb_total){	    //print_r($tb_total);        if($tb){    // group category data			foreach($tb as $id=>$cat){				if($cat['data']){				    $new_data = array();                    foreach($cat['data'] as $date_key=>$r){ // loop for daily data to convert to monthly data                        // no need skip, since 0-4, and and 5-6 = total                        //if($date_key=='total')  continue;   // skip total row						$ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key						$new_data[$ym]['amt'] += $r['amt'];						$new_data[$ym]['cost'] += $r['cost'];						$new_data[$ym]['used'] += $r['used'];						///$new_data['total']['amt'] += $r['amt'];						//$new_data['total']['cost'] += $r['cost'];						//$new_data['total']['qty'] += $r['qty'];					}					$tb[$id]['data'] = $new_data;  // replace the daily data to monthly data					unset($new_data);				}			}		}        $tb_total['total'] = array();		if($tb_total['data']){  // group total row data		    $new_data = array();			foreach($tb_total['data'] as $date_key=>$r){			    // no need skip, since 0-4, and and 5-6 = total			    //if($date_key=='total')  continue;   // skip total row                $ym = substr($date_key, 0, 4).substr($date_key, 4, 2);  // make year month key                $new_data[$ym]['amt'] += $r['amt'];				$new_data[$ym]['cost'] += $r['cost'];				$new_data[$ym]['used'] += $r['used'];				$tb_total['total'][$ym]['amt'] += $r['amt'];				$tb_total['total'][$ym]['cost'] += $r['cost'];				$tb_total['total'][$ym]['used'] += $r['used'];			}			$tb_total['data'] = $new_data;			unset($new_data);		}	}	private function generate_header_date_label(){	    global $smarty;        $d1 = strtotime($this->date_from);		$d2 = strtotime($this->date_to);		$uq_cols = array();		while($d1<=$d2){		    $temp = array('y'=>date('Y', $d1), 'm'=>mi(date('m', $d1)));		    if($this->by_monthly){	            $key = date('Ym', $d1);			}else{			    $key = date('Ymd', $d1);	            $temp['d'] = date('d', $d1);			}		    $uq_cols[$key] = $temp;			$d1 += 86400;		}		$this->uq_cols = $uq_cols;		$smarty->assign('uq_cols', $this->uq_cols);		$smarty->assign('columnspan', count($this->uq_cols));	}	}$report = new REPORT_VOUCHER_TRANSACTION('Voucher Transaction Report');?>