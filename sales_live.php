<?php/*1/13/2011 2:34:04 PM Justin- Add checking if found $config['counter_collection_server'] will popup windows to use remote server.1/17/2011 12:27:05 PM Justin- Fixed the blank sales when login from sub branch and found no location set for counter.1/17/2011 5:37:26 PM Justin- Fixed the bugs generate sql errors during loading location list. 3/4/2011 11:34:26 AM Justin- Assigned current date for the use of delay the refresh sales tables. 3/29/2011 11:46:54 AM Justin- Disabled the item details since redirected below functions to counter_collection.php- Modified the transaction detail to use template from counter collection 5/4/2011 5:17:59 PM Justin- Amended the hourly sales to base on pos time instead of start time.6/27/2011 10:11:56 AM Andy- Make all branch default sort by sequence, code.7/6/2011 2:46:55 PM Andy- Change split() to use explode()12/30/2011 10:28:43 AM Justin- Fixed the category shows empty description.3/29/2012 10:45:21 AM Justin- Added to pickup Mix & Match discount amount.4/12/2012 2:28:32 PM Justin- Enhanced system to have "Short/Over" under payment type sales.8/9/2012 4:11 PM Justin- Bug fixed on Short/Over calculation.8/13/2012 3:26 PM Justin- Fixed bug on Short/Over filter.8/14/2012 3:27 PM Justin- Enhanced to take off qty filter for Short/Over.9/12/2012 10:52 AM Justin- Enhanced to set member race become "Others" while found it is not preset in pos_settings.11/22/2012 12:06 PM Justin- Bug fixed on system to skip zero amt POS that created unnecessary "Uncategory" column.- Re-aligned the category to follow sequence by character.12/11/2012 4:13 PM Justin- Enhanced to include extra payment type from both config and POS Settings.12/12/2012 12:18 PM Justin- Enhanced to exclude branch sales base on the config 'sales_report_branches_exclude'.- Enhanced to redirect user to main page if found it is login into subbranch and it is under excluded list.12/18/2012 9:27 AM Justin- Bug fixed on system that cause calculate wrong figure for department sales.12/26/2012 5:45 PM Justin- Enhanced to arrange department sales  order by top to low sales.1/9/2013 2:27 PM Justin- Bug fixed on wrong calculation for member - buying power.2/1/2013 2:20 PM Justin- Bug fixed on system calculate the wrong values for member and non-member sales.3/4/2013 2:19 PM Justin- Bug fixed on changing "Others" to "O".4/2/2015 3:02 PM Andy- Fix wrong short/over calculation.1/19/2016 1:52 PM Qiu Ying- Total amount deduct receipt discount and service charges1/25/2016 3:52 PM Qiu Ying- Fix total amount deduct receipt discount and service charges1/25/2016 4:52 PM Qiu Ying- Fix discount not show7/1/2016 2:24 PM Andy- Enhanced to set time limit zero.8/3/2016 1:54 PM Andy- Removed the checking of active counter.- Fix location description empty bug.8/16/2016 10:07 AM Andy- Enhanced to check Over and Deposit.9/1/2016 2:47 PM Andy- Fixed deposit column bugs.4/18/2017 11:44 AM Justin- Enhanced to allow user can go into sub-category until last level.4/26/2017 10:35 AM Khausalya- Enhanced changes from RM to use config setting. 3/26/2018 3:28 PM Justin- Bug fixed on transaction count from Payment Type Sales have gone wrong.4/23/2018 11:01 AM Justin- Bug fixed on clicking "Untitled" for counter's location will also load all counters from other branches.8/2/2018 2:07 PM Andy- Fixed Buying Power Accumulated Total calculation error.- Fixed Department count calculation error.4/17/2019 3:44 PM Justin- Bug fixed on eWallet payment amount couldn't load out from Payment Type Sales section.2/18/2020 3:13 PM Andy- Fixed to only replace "_" to " " for credit card payment.2/18/2020 1:34 PM William- Enhanced to change $con connection to use $con_multi.10/05/2020 4:18 PM Shane- Added Sales Qty tab for Hourly Sales, Department Sales, Member Sales.10/09/2020 4:13 PM Shane- Fixed wrong variable $h (should be $m) used in get_member_list10/12/2020 2:06 PM Shane- Fixed ambiguous counter_id in where clause from get_member_list. Changed to pos.counter_id10/12/2020 5:41 PM Shane- Fixed Sales Qty not showing correctly for member sales.*/include("include/common.php");set_time_limit(0);if(!$con_multi)	$con_multi = $appCore->reportManager->connectReportServer();// check if user is access to subbranch but it is under excluded list, prompt errorif(BRANCH_CODE != "HQ" && $config['sales_report_branches_exclude'] && in_array(BRANCH_CODE, $config['sales_report_branches_exclude'])){	js_redirect(sprintf($LANG['BRANCH_EXCLUDED'], 'POS Live', BRANCH_CODE), "/index.php");}if (isset($_REQUEST['remote'])==1){	$_SESSION[$_SERVER['HTTP_HOST']]['is_remote'] = 1;	$uid = mi($_REQUEST['id']);	$bid = mi($_REQUEST['branch']);	// make sure user can login this branch	$con_multi->sql_query("select * from user_privilege where user_id=$uid and branch_id=$bid and privilege_code='LOGIN'");	$user = $con_multi->sql_fetchrow();	$con_multi->sql_freeresult();	if (!$user) { die("You do not have permission."); }    $con->sql_query("delete from session where ssid = ".ms($ssid));	$con->sql_query("replace into session (user_id, ssid) values ($uid, ".ms($ssid).")");	// set login branch and redirect	setcookie('arms_login_branch', get_branch_code($bid));	header("Location: $_SERVER[PHP_SELF]");	exit;}if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('POS_BACKEND')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'POS_BACKEND', BRANCH_CODE), "/index.php");if($config['counter_collection_server']){	$smarty->assign('no_menu_templates', 1);	$smarty->display('header.tpl');	print "<script>open_from_dc('".$config['counter_collection_server']."/sales_live.php?','".$sessioninfo['id']."','".$sessioninfo['branch_id']."', 'Sales Live');</script>";	print "Please refer to popup.";	$smarty->display('footer.tpl');	exit;}$smarty->register_modifier('random_color', 'smarty_random_color');//$con = new sql_db("hq.aneka.com.my", "arms_slave", "arms_slave", "armshq");//$con = new sql_db('gmark-hq.arms.com.my:4001','arms','4383659','armshq');if(!$_REQUEST['tab_slctd']) $_REQUEST['tab_slctd'] = 1;$smarty->assign('tab_slctd', $_REQUEST['tab_slctd']);if(BRANCH_CODE == 'HQ'){	$bid = $_REQUEST['branch_id'];	$sql = "select id,code from branch where active=1 order by sequence,code";	$q1 = $con_multi->sql_query($sql) or die(mysql_error());	while($r = $con_multi->sql_fetchassoc($q1)){		if($config['sales_report_branches_exclude'] && in_array($r['code'], $config['sales_report_branches_exclude'])) continue;		$branch_list[$r['id']]=$r;	}	$con_multi->sql_freeresult($q1);	$smarty->assign('level_priv', 1);	$smarty->assign('branch_list',$branch_list);}else{	if(!isset($_REQUEST['a'])){        $_REQUEST['submits'] = 'submit';	}	$smarty->assign('level_priv', 2);	$bid = get_request_branch(true);}if($_REQUEST['branch_id']){	$bid = $_REQUEST['branch_id'];	$smarty->assign('level_priv', 2);}if(!$_REQUEST['date']) $_REQUEST['date'] = date('Y-m-d');$smarty->assign("curr_date", date('Y-m-d'));// get the list of column display, 1 = branch; 2 = counter location; 3 = countersif($_REQUEST['level'] == 1){	$sort_list = get_branch_list($bid);}elseif($_REQUEST['level'] == 2){	$sort_list = get_location_list($bid);}elseif($_REQUEST['level'] == 3){	$sort_list = get_counter_list($bid, $_REQUEST['lid']);}if (isset($_REQUEST['a'])){	switch($_REQUEST['a']){		case 'ajax_hourly_list':		    get_hourly_list($bid);		    exit;		case 'ajax_department_list':		    get_department_list($bid);		    exit;		case 'ajax_member_list':			get_member_list($bid);		    exit;		case 'ajax_payment_type_list':			get_payment_type_list($bid);		    exit;		case 'tran_details':		    tran_details();		    exit;		case 'item_details':		    item_details();		    exit;		default:		    print "<h1>Unhandled Request</h1>";		    print_r($_REQUEST);		    exit;	}}if (BRANCH_CODE=='HQ'){	// if found Branch ID from drop down list is not empty	// show information for user start from level 2 (location)	if($bid || $_REQUEST['branch_id']){		$_REQUEST['level'] = 2;		$sort_list = get_location_list($bid);	}else{		$sort_list = get_branch_list($bid);	}}else{	$sort_list = get_location_list($bid);}get_hourly_list($bid);get_department_list($bid);get_member_list($bid);get_payment_type_list($bid);$smarty->assign('PAGE_TITLE', 'Sales Live');$smarty->display("sales_live.tpl");exit;function get_branch_list($bid){	global $con,$smarty,$config,$con_multi;	if($bid) $filter = "and id = ".mi($bid);    $sql = "select id,code from branch where active=1 $filter order by sequence, code";	$q1 = $con_multi->sql_query($sql) or die(mysql_error());	while($r = $con_multi->sql_fetchassoc($q1)){		if($config['sales_report_branches_exclude'] && in_array($r['code'], $config['sales_report_branches_exclude'])) continue;		$branch_list[$r['id']]=$r['code'];	}	$con_multi->sql_freeresult($q1);		$smarty->assign("curr_lvl","1");	$smarty->assign("next_lvl","2");	$smarty->assign("col_list",$branch_list);	return $branch_list;}function get_location_list($bid){	global $con,$smarty,$sessioninfo,$con_multi;    //$sql = "select id,ifnull(location, 'Untitled') as location from counter_settings where 1";    $sql = "select id,if(location is null or location='', 'Untitled',location) as location from counter_settings where 1";	if($_REQUEST['hourly_lvl2_bid'] || $_REQUEST['department_lvl2_bid'] || $_REQUEST["member_lvl2_bid"] || $_REQUEST['payment_type_lvl2_bid']){		$sql .= " and branch_id = ".$_REQUEST['hourly_lvl2_bid'].$_REQUEST['department_lvl2_bid'].$_REQUEST["member_lvl2_bid"].$_REQUEST['payment_type_lvl2_bid'];	}elseif($bid){		$sql .= " and branch_id = ".ms($bid);	}  	$sql .= " order by location";	$q1 = $con_multi->sql_query($sql) or die(mysql_error());	while($r = $con_multi->sql_fetchassoc($q1)){		if(!trim($r['location'])) $r['loc_desc'] = "Untitled";		else $r['loc_desc'] = $r['location'];		$location_list[$r['loc_desc']]=$r['location'];	}	$con_multi->sql_freeresult($q1);	$smarty->assign("prev_lvl","1");	$smarty->assign("curr_lvl","2");	$smarty->assign("next_lvl","3");	//print_r($location_list);	$smarty->assign("col_list",$location_list);	return $location_list;}function get_counter_list($bid, $loc_code){	global $con,$smarty,$con_multi;	    $sql = "select id,network_name from counter_settings where 1";	if($_REQUEST['hourly_lvl2_bid'] || $_REQUEST['department_lvl2_bid'] || $_REQUEST["member_lvl2_bid"] || $_REQUEST['payment_type_lvl2_bid']){		$sql .= " and branch_id = ".$_REQUEST['hourly_lvl2_bid'].$_REQUEST['department_lvl2_bid'].$_REQUEST["member_lvl2_bid"].$_REQUEST['payment_type_lvl2_bid'];	}elseif($bid){		$sql .= " and branch_id = ".ms($bid);	}		if($loc_code){		if($loc_code != "Untitled") $sql .= " and location = ".ms($loc_code);		else $sql .= " and (location is null or location = '')";	}  	$sql .= " order by network_name";	$q1 = $con_multi->sql_query($sql) or die(mysql_error());	while($r = $con_multi->sql_fetchassoc($q1)){		$counter_list[$r['id']]=$r['network_name'];	}	$con_multi->sql_freeresult($q1);		$smarty->assign("prev_lvl","2");	$smarty->assign("curr_lvl","3");	$smarty->assign("col_list",$counter_list);	return $counter_list;}function get_hourly_list($bid){	global $con,$smarty,$sessioninfo,$sort_list,$config,$con_multi;	$min_hour = 9;	$max_hour = 22;	$date = $_REQUEST['date'];	$h = $_REQUEST['h'];	$level = $_REQUEST['level'];		$lid = $_REQUEST['lid'];	$hourly_lvl2_bid = $_REQUEST['hourly_lvl2_bid'];	$got_deposit = false;		if($h == ''){		$hourly_first_load = 1;		$h = 1;	}		if($level == ''){		if(BRANCH_CODE == 'HQ'){			$level = 1;		}else{			$level = 2;		}	}	$where[] = "pos.date = '".($date)."' and pos.cancel_status=0";		if($_REQUEST['branch_id']){		$q1 = $con_multi->sql_query("select id,code from branch order by sequence,code");		while ($r = $con_multi->sql_fetchassoc($q1))		{			$branches[] = $r['id'];			if($_REQUEST['branch_id']==$r['id']){	            $branch_code = $r['code'];			}		}		$con_multi->sql_freeresult($q1);	}	if(strpos($_REQUEST['branch_id'],'bg,')===0){   // is branch group		list($dummy,$bg_id) = explode(",",$_REQUEST['branch_id']);		$branch_group = $this->branch_group;		foreach($branch_group['items'][$bg_id] as $bid=>$r){			$ids[] = $bid;		}		$where[] = "branch_id in (".join(',',$ids).")";		$branch_code = $branch_group['header'][$bg_id]['code'];	}else{		if (BRANCH_CODE != 'HQ'){			$bid  = get_request_branch(true);            $_REQUEST['branch_id'] = $bid;            $branch_code = BRANCH_CODE;		}else{			if($_REQUEST['branch_id']==''){                $branch_code = "All";			}else{                $con_multi->sql_query("select code from branch where id=".mi($bid)) or die(mysql_error());				$branch_code = $con_multi->sql_fetchfield(0);				$con_multi->sql_freeresult();			}		}		$where[] = $_REQUEST['branch_id']!=''?'pos.branch_id = '.mi($_REQUEST['branch_id']):1;	}		// switch between sales, promotion and count	switch ($h){	    case 1:			$val_type = "sum(if(pp.type='Cash',pp.amount-pos.amount_change,pp.amount))";			$h_amt_type = "Sales Amt: " . $config["arms_currency"]["symbol"];						$deposit_select = ", sum(if(pp.type='Deposit',pp.amount,0)) as deposit_amt, sum(if(pp.type='Deposit' and pos.amount_change>0,if((select count(*) from pos_payment pp_cash where pp_cash.branch_id=pos.branch_id and pp_cash.counter_id=pos.counter_id and pp_cash.date=pos.date and pp_cash.pos_id=pos.id and pp_cash.type='Cash' and pp_cash.adjust=0)=0,pos.amount_change/(select count(*) from pos_payment pp_cash where pp_cash.branch_id=pos.branch_id and pp_cash.counter_id=pos.counter_id and pp_cash.date=pos.date and pp_cash.pos_id=pos.id and pp_cash.type='Deposit' and pp_cash.adjust=0),0),0)) as deposit_refund_amt";			break;	    case 2:			$val_type = "pi.price-pi.discount";			$where1 = " and (pi.discount > 0 or pi.discount2 > 0)";	    	$h_amt_type = "Promotion: " . $config["arms_currency"]["symbol"];	    	break;	    case 3:	    	$val_type = "count(distinct pos.id, pos.counter_id, pos.cashier_id, pos.date)";	    	$h_amt_type = "No of Trans.: ";	    	break;	    case 4:	    	$val_type = "count(distinct pos.id, pos.counter_id, pos.cashier_id, pos.date) as trans_count, sum(if(pp.type='Cash',pp.amount-pos.amount_change,pp.amount))";	    	$h_amt_type = "Buying Power: " . $config["arms_currency"]["symbol"];	    	$smarty->assign("h_is_bp", 1);	    	break;	    case 5:			$val_type = "sum(pi.qty)";			$h_amt_type = "Sales Qty: ";			break;	}	// here is where switches the levels of view	switch ($level){		case 1:	// by Branch			$select_id = "b.id";			$select_desc = "b.code";			$left_join = "left join branch b on b.id = pos.branch_id";			$where[] = "pos.branch_id = ";			break;		case 2: // by Location			$select_id = "cs.location";			$select_desc = "cs.location";			$left_join = "left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id";			if($lid){				$where[] = "pos.branch_id = ".$lid;				$branch_code = get_branch_code($lid);			}			//$where[] = "cs.location = ";						$smarty->assign("lvl_desc", $branch_code);			$smarty->assign("hourly_lvl2_bid", $lid);			break;			case 3: // by Counter			$select_id = "cs.id";			$select_desc = "cs.network_name";			$left_join = "left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id";			if($hourly_lvl2_bid){				$where[] = "pos.branch_id = ".$hourly_lvl2_bid;			}			if($lid){				$where[] = "cs.id = ";				$loc_code = $lid;			}else{				$loc_code = "Untitled";			}			$smarty->assign("lvl_desc", $loc_code);			$smarty->assign("hourly_lvl2_bid", $hourly_lvl2_bid);			break;	}	if (isset($sort_list)){		foreach($sort_list as $slid=>$dummy){ // loop by sorting list such as branch, location or counter					if($slid == "Untitled" && $level == 2){				$loc_where = "and (cs.location is null or cs.location = '')";				$slid = "";			}elseif($slid != "Untitled" && $level == 2){				$loc_where = "and cs.location = ";				$slid = ms($slid);			}else $slid = ms($slid);			// here starts with the listing of row			if ($h == 1 || $h == 3 || $h == 4){				$sql = $con_multi->sql_query($q = "select $select_id as id, ifnull($select_desc, 'Untitled') as description, hour(pos.pos_time) as hour, $val_type as amount $deposit_select				from pos 				left join pos_payment pp on pos.id = pp.pos_id and pos.branch_id = pp.branch_id and pos.counter_id = pp.counter_id and pos.date = pp.date and pp.adjust = 0				$left_join				where ".join(' and ', $where)." $loc_where ".$slid." and 				(pp.type != 'Discount' and pp.type !='Rounding' and pp.type != 'Mix & Match Total Disc')				group by id, hour 				order by description, hour");				//print "$q<br>";			}elseif($h == 5){				$sql = $con_multi->sql_query($q = "select $select_id as id, ifnull($select_desc, 'Untitled') as description, hour(pos.pos_time) as hour, $val_type as amount				from pos 				left join pos_items pi on pi.pos_id = pos.id and pi.branch_id = pos.branch_id and pi.date = pos.date and pi.counter_id = pos.counter_id				$left_join				where ".join(' and ', $where)." $loc_where ".$slid."				group by id, hour 				order by description, hour");			}else{				$sql = $con_multi->sql_query("select $select_id as id, ifnull($select_desc, 'Untitled') as description, hour(pos.pos_time) as hour, pos.pos_time, pos.service_charges, pos.branch_id, pos.counter_id, pi.pos_id,				$val_type as amount				from pos				left join pos_items pi on pi.pos_id = pos.id and pi.branch_id = pos.branch_id and pi.date = pos.date and pi.counter_id = pos.counter_id 				$left_join				where ".join(' and ', $where)." $loc_where ".$slid." $where1				order by pos_time asc				");			}			$id = ""; $count = $acc_trans_count = 0;			while ($r = $con_multi->sql_fetchassoc($sql)){				if($r['deposit_amt']>0){					$got_deposit = true;				}				if($h == 1 || $h == 4){					$r['amount'] -= $r['deposit_amt'] + $r['deposit_refund_amt'];				}				if(!$r['description'])	$r['description'] = 'Untitled';				if ($id == "")	$id = $r['pos_id'];								if ($id == $r['pos_id']) $count += 1;				else{					$id = $r['pos_id'];					$count = 1;				}								if ($h == 2 && $count == 1){					$q1 = $con_multi->sql_query("select pp.type, pp.amount as amt					from pos					left join pos_payment pp on pp.pos_id = pos.id and pp.counter_id = pos.counter_id and pp.branch_id = pos.branch_id and pp.date = pos.date and pp.adjust = 0					where pos.date = " . ms($date). " and pos.counter_id = ". mi($r["counter_id"]) ." 					and pos.branch_id = ". mi($r["branch_id"]) . " and pos.id = ". mi($r["pos_id"]) ." and (pp.type = 'Discount' or pp.type ='Rounding' or pp.type = 'Mix & Match Total Disc')");					$discount = $rounding = $mm_disc = 0;					while ($r1 = $con_multi->sql_fetchassoc($q1)){						if ($r1["type"] == "Discount")							$discount += $r1["amt"];						elseif ($r1["type"] == "Rounding")							$rounding += $r1["amt"];						elseif ($r1["type"] == "Mix & Match Total Disc")							$mm_disc += $r1["amt"];					}					$con_multi->sql_freeresult($q1);					$r["amount"] = $r["amount"] + $r["service_charges"] - $discount - $mm_disc + $rounding;				}								if($h==4){					$acc_trans_count += $r['trans_count'];					$hourly_data[$r['description']][$r['hour']]['amt'] += $r['amount'] / $r['trans_count'];					$hourly_row_total[$r['description']]['count'] += $r['trans_count'];					$hourly_col_total[$r['hour']]['count'] += $r['trans_count'];					$hourly_col_total[$r['hour']]['acc_trans_count'] = $acc_trans_count;	// Accumulate Transaction Count					$hourly_grand_total_count += $r['trans_count'];				}else{					$hourly_data[$r['description']][$r['hour']]['amt'] += $r['amount'];					$hourly_row_total[$r['description']]['count'] = 1;					$hourly_col_total[$r['hour']]['count'] = 1;					$hourly_col_total[$r['hour']]['acc_trans_count'] = 1;					$hourly_grand_total_count = 1;				}				$hourly_row_total[$r['description']]['amt'] += $r['amount'];				$hourly_col_total[$r['hour']]['amt'] += $r['amount'];				$hourly_grand_total_amt += $r['amount'];						if($min_hour != '' && $min_hour > $r['hour']){					$min_hour = $r['hour'];				}								if($max_hour != '' && $max_hour < $r['hour']){					$max_hour = $r['hour'];				}			}			$con_multi->sql_freeresult($sql);		}	}		// if found total count...	if($hourly_grand_total_count){		$hourly_grand_total = $hourly_grand_total_amt/$hourly_grand_total_count;	}		// assign looping for the hourly	for($i=$min_hour;$i<=$max_hour;$i++){    	if($i == 0){			$hour[$i]="12 AM";		}elseif($i<13){    		if($i == 12){        		$hour[$i]=$i." PM";        	}else{				$hour[$i]=$i." AM";			}        }else{            $h = $i-12;                        if($i=='24'){            	$new = $i-24;                $hour[$new]=$h." AM";            }else{                $hour[$i]=$h." PM";            }        }    }	$smarty->assign("h_amt_type", $h_amt_type);	$smarty->assign("hour", $hour);	$smarty->assign("hourly_col_total", $hourly_col_total);	$smarty->assign("hourly_row_total", $hourly_row_total);	$smarty->assign("hourly_grand_total", $hourly_grand_total);	$smarty->assign("hourly_data", $hourly_data);	if($got_deposit)	$smarty->assign("got_deposit", $got_deposit);	if(!$hourly_first_load){		$smarty->display("sales_live.hourly.tpl");	}}function get_department_list($bid){	global $con,$smarty,$sort_list, $config,$con_multi;		$date = $_REQUEST['date'];	$d = $_REQUEST['d'];	$level = $_REQUEST['level'];	$col_level_id = intval($_REQUEST['col_level_id']);	$cat_level = intval($_REQUEST['cat_level']);	$lid = $_REQUEST['lid'];	$department_lvl2_bid = $_REQUEST['department_lvl2_bid'];	$got_deposit = false;	$counts = 0;	$top = 10; // set top 10 as default		if($d == ''){		$department_first_load = 1;		$d = 1;	}	if($level == ''){		if(BRANCH_CODE == 'HQ'){			$level = 1;		}else{			$level = 2;		}	}		if($col_level_id == 0){		$cat_level = 1;		$left_join_cat = "left join category c on c.id = cc.p$cat_level";	}else{		$root_level_id = $cat_level;		$cat_level = $cat_level+1;		$left_join_cat = "left join category c on c.id = cc.p$cat_level";		$where[] = "cc.p$root_level_id = ".mi($col_level_id);		$q1 = $con_multi->sql_query("select description from `category` where id = ".mi($col_level_id));		$catdesc = $con_multi->sql_fetchassoc($q1);		$con_multi->sql_freeresult($q1);		$cat_desc = $catdesc[0];		$smarty->assign("cat_desc", $cat_desc);		$smarty->assign("level_priv", $level);	}		$where[] = "pos.date = ".ms($date)." and pos.cancel_status=0";			if($_REQUEST['branch_id']){		$q1 = $con_multi->sql_query("select id,code from branch order by sequence,code");		while ($r = $con_multi->sql_fetchassoc($q1))		{			$branches[] = $r['id'];			if($_REQUEST['branch_id']==$r['id']){	            $branch_code = $r['code'];			}		}		$con_multi->sql_freeresult($q1);	}		if(strpos($_REQUEST['branch_id'],'bg,')===0){   // is branch group		list($dummy,$bg_id) = explode(",",$_REQUEST['branch_id']);		$branch_group = $this->branch_group;		foreach($branch_group['items'][$bg_id] as $bid=>$r){			$ids[] = $bid;		}		$where[] = "branch_id in (".join(',',$ids).")";		$branch_code = $branch_group['header'][$bg_id]['code'];	}else{		if (BRANCH_CODE != 'HQ'){			$bid  = get_request_branch(true);            $_REQUEST['branch_id'] = $bid;            $branch_code = BRANCH_CODE;		}else{			if($_REQUEST['branch_id']==''){                $branch_code = "All";			}else{                $q1 = $con_multi->sql_query("select code from branch where id=".mi($bid)) or die(mysql_error());				$branch_code = $con_multi->sql_fetchfield(0);				$con_multi->sql_freeresult($q1);			}		}		if($_REQUEST['branch_id'] > 0){			$where[] = $_REQUEST['branch_id']!=''?'pos.branch_id = '.mi($_REQUEST['branch_id']):1;		}	}		// switch between sales, promotion and count	switch ($d){	    case 1:	    	$val_type = "sum(pi.price-pi.discount)";	    	$d_amt_type = "Sales Amt: " . $config["arms_currency"]["symbol"];	    	break;	    case 2:	    	$val_type = "sum(pi.price-pi.discount)";	    	$where[] = "(pi.discount > 0 or pi.discount2 > 0)";	    	$d_amt_type = "Promotion: " . $config["arms_currency"]["symbol"];	    	break;	    case 3:	    	$val_type = "count(distinct pos.id, pos.counter_id, pos.date)";	    	$d_amt_type = "No of Trans.: ";	    	break;	    case 4:	    	$val_type = "count(distinct pos.id, pos.counter_id, pos.date) as trans_count, sum(pi.price-pi.discount)";	    	$d_amt_type = "Buying Power: " . $config["arms_currency"]["symbol"];	    	$smarty->assign("d_is_bp", 1);	    	break;	    case 5:	    	$val_type = "sum(pi.qty)";	    	$d_amt_type = "Sales Qty: ";	    	break;	}	// here is where switches the levels of view	switch ($level){		case 1:	// by Branch			$select_id = "b.id";			$select_desc = "b.code";			$left_join = "left join branch b on b.id = pos.branch_id";			$where[] = "pos.branch_id = ";			break;		case 2: // by Location			$select_id = "cs.location";			$select_desc = "cs.location";			$left_join = "left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id";			if($lid){				$where[] = "pos.branch_id = ".$lid;			}			//$where[] = "cs.location = ";			$branch_code = get_branch_code($lid);						$smarty->assign("lvl_desc", $branch_code);			$smarty->assign("department_lvl2_bid", $lid);						if($bid) $smarty->assign("level_priv", 2);			else $smarty->assign("level_priv", 1);			break;			case 3: // by Counter			$select_id = "cs.id";			$select_desc = "cs.network_name";			$left_join = "left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id";			if($department_lvl2_bid){				$where[] = "pos.branch_id = ".$department_lvl2_bid;			}			if($lid){				$where[] = "cs.id = ";				$loc_code = $lid;			}else{				$loc_code = "Untitled";			}			$smarty->assign("lvl_desc", $loc_code);			$smarty->assign("lid", $lid);			$smarty->assign("department_lvl2_bid", $department_lvl2_bid);			$smarty->assign("level_priv", 2);			break;	}		if (isset($sort_list)){		$temp = array();		foreach($sort_list as $slid=>$dummy){ // loop by sorting list such as branch, location or counter			if($slid == "Untitled" && $level == 2){				$loc_where = "and (cs.location is null or cs.location = '')";				$slid = "";			}elseif($slid != "Untitled" && $level == 2){				$loc_where = "and cs.location = ";				$slid = ms($slid);			}else $slid = ms($slid);			// here starts with the listing of row			$sql = $con_multi->sql_query($q = "select $select_id as id, $select_desc as description, 									c.id as cid, c.description as cat,									$val_type as amount, pos.id as pos_id, pos.branch_id, pos.date, pos.counter_id,									pos.service_charges, pos.amount as pos_amt, pos.amount_tender, pos.amount_change, pos.deposit as is_deposit_rcv									from pos									left join pos_items pi on pi.pos_id = pos.id and pi.branch_id = pos.branch_id and pi.date = pos.date and pi.counter_id = pos.counter_id									left join sku_items on pi.sku_item_id = sku_items.id									left join sku on sku_items.sku_id = sku.id 									left join category_cache cc on cc.category_id = sku.category_id									$left_join_cat									$left_join									where ".join(' and ', $where)." $loc_where ".$slid."									group by pos.id, pi.id, pos.branch_id, pos.date, pos.counter_id									order by pos.branch_id, pos.date, pos.id, pos.counter_id");			//print "$q<br>";			$counter_id = $id = $temp_service_charges = $temp_mm_disc = $temp_discount = $temp_rounding = "";			$num = 0;			$over_amt = 0;			$temp_deposit_rcv = $temp_deposit_used = 0;			while ($r = $con_multi->sql_fetchassoc($sql)){				if(!trim($r['description'])) $r['description'] = "Untitled";								//if(!$r['amount'] && !$r['trans_count']) continue;								if ($id == ""){					$id = $r['pos_id'];					$counter_id = $r['counter_id'];				}								if ($id == $r['pos_id'] && $counter_id == $r['counter_id']) $num += 1;				else{					$id = $r['pos_id'];					$counter_id = $r['counter_id'];					$num = 1;				}								if ($num == 1 && $d != 3){					if($r['is_deposit_rcv']){						$temp_deposit_rcv = $dept_deposit_rcv[$r['description']]['amt'] += $r["pos_amt"];						$dept_total[$r['description']]['amt'] += $r["pos_amt"];						$got_deposit = true;					}else{						$temp_service_charges = $dept_service_charges_total[$r['description']]['amt'] += $r['service_charges'];						$dept_total[$r['description']]['amt'] += $r['service_charges'];												$q1 = $con_multi->sql_query("select pp.type,  sum(pp.amount) as amt						from pos						left join pos_payment pp on pp.pos_id = pos.id and pp.counter_id = pos.counter_id and pp.branch_id = pos.branch_id and pp.date = pos.date and pp.adjust = 0						where pos.date = " . ms($date). " and pos.counter_id = ". mi($r["counter_id"]) ." 						and pos.branch_id = ". mi($r["branch_id"]) . " and pos.id = ". mi($r["pos_id"]) ." and pp.type <> 'Cash'						group by pos.id, pp.type");						while ($r1 = $con_multi->sql_fetchassoc($q1)){							if ($r1["type"] == "Rounding"){								$temp_rounding = $dept_rounding[$r['description']]['amt'] += $r1["amt"];								$dept_total[$r['description']]['amt'] += $r1["amt"];							}							elseif ($r1["type"] == "Discount"){								$temp_discount = $dept_discount[$r['description']]['amt'] -= $r1["amt"];								$dept_total[$r['description']]['amt'] -= $r1["amt"];							}							elseif ($r1["type"] == "Mix & Match Total Disc"){									$temp_mm_disc = $dept_mm_disc[$r['description']]['amt'] -= $r1["amt"];								$dept_total[$r['description']]['amt'] -= $r1["amt"];							}							elseif ($r1["type"] == "Deposit"){									$temp_deposit_used = $dept_deposit_used[$r['description']]['amt'] -= $r1["amt"];								$dept_total[$r['description']]['amt'] -= $r1["amt"];								$got_deposit = true;							}						}						$con_multi->sql_freeresult($q1);												$tmp_over_amt = $r['amount_tender'] - $r['amount_change'] - $r['service_charges'] - $r['pos_amt'];						$over_amt += $tmp_over_amt;												$dept_over[$r['description']]['amt']  += $tmp_over_amt;						$dept_total[$r['description']]['amt']  += $tmp_over_amt;					}				}								if($r['amount'] || $r['trans_count']){					$pos_key = $r['branch_id']."_".$r['date']."_".$r['counter_id']."_".$r['pos_id'];										if($d==4){	// Buying Power						$tmp_dept_data[$r['cid']][$r['description']]['amt'] += $r['amount'];						if(!$pos_list[$r['pos_id']][$r['branch_id']][$r['date']][$r['counter_id']]){							// All Transaction Count							$dept_grand_total_count += 1;	// Buying Power need to divide by transaction count						}												// Transaction Count by Category by Counter's Location						$tmp_dept_data[$r['cid']][$r['description']]['pos_key'][$pos_key] = 1;												// Transaction Count by Category						$tmp_dept_data[$r['cid']]['pos_key'][$pos_key] = 1;												// Transaction Count by Counter's Location						$tmp_dept_data[$r['description']]['pos_key'][$pos_key] = 1;												$tmp_dept_data[$r['cid']][$r['description']]['count'] = count($tmp_dept_data[$r['cid']][$r['description']]['pos_key']);						$dept_col_total[$r['cid']]['count'] = count($tmp_dept_data[$r['cid']]['pos_key']);						$dept_row_total[$r['description']]['count'] = count($tmp_dept_data[$r['description']]['pos_key']);												if ($tmp_dept_data[$r['cid']][$r['description']]['count']>0){							$dept_data[$r['cid']][$r['description']] = $tmp_dept_data[$r['cid']][$r['description']]['amt']/$tmp_dept_data[$r['cid']][$r['description']]['count'];						}									$dept_total[$r['description']]['amt'] += $r['amount'];						$dept_col_total[$r['cid']]['amt'] += $r['amount'];						$dept_row_total[$r['description']]['amt'] += $r['amount'];						$dept_grand_total_amt += $r['amount'];					}else{						$dept_grand_total_count = 1;	// Other tab just divide by 1												if($d == 3){	// Transaction Count							// Transaction count by category by counter							$tmp_dept_data[$r['cid']][$r['description']]['pos_key'][$pos_key] = 1;														// Transaction count by category							$tmp_dept_data[$r['cid']]['pos_key'][$pos_key] = 1;														// Transaction count by counter location							$dept_total[$r['description']]['pos_key'][$pos_key] = 1;														// Transaction total count							//$all_trans['pos_key'][$pos_key] = 1;														//$dept_col_total[$r['cid']]['count'] = count($tmp_dept_data[$r['cid']]['pos_key']);							//$dept_row_total[$r['description']]['count'] = count($tmp_dept_data[$r['cid']][$r['description']]['pos_key']);							$dept_data[$r['cid']][$r['description']] = count($tmp_dept_data[$r['cid']][$r['description']]['pos_key']);							$dept_col_total[$r['cid']]['count'] = 1;							$dept_row_total[$r['description']]['count'] = 1;							//$dept_data[$r['cid']][$r['description']] = 1;														$dept_total[$r['description']]['amt'] = count($dept_total[$r['description']]['pos_key']);							$dept_col_total[$r['cid']]['amt'] = count($tmp_dept_data[$r['cid']]['pos_key']);							$dept_row_total[$r['description']]['amt'] = count($dept_total[$r['description']]['pos_key']);														if(!$pos_list[$r['pos_id']][$r['branch_id']][$r['date']][$r['counter_id']]){								$dept_grand_total_amt++;							}													}else{							$dept_data[$r['cid']][$r['description']] += $r['amount'];														$dept_col_total[$r['cid']]['count'] = 1;							$dept_row_total[$r['description']]['count'] = 1;														$dept_total[$r['description']]['amt'] += $r['amount'];							$dept_col_total[$r['cid']]['amt'] += $r['amount'];							$dept_row_total[$r['description']]['amt'] += $r['amount'];							$dept_grand_total_amt += $r['amount'];						}					}										$pos_list[$r['pos_id']][$r['branch_id']][$r['date']][$r['counter_id']] = 1;				}						}			$con_multi->sql_freeresult($sql);						//sum up row service_charges, mm_disc, discount and rounding			$temp["service_charges"] += $temp_service_charges;			$temp["discount"] += $temp_discount;			$temp["mm_disc"] += $temp_mm_disc;			$temp["rounding"] += $temp_rounding;						// over			$temp['over_amt'] += $over_amt;						// deposit			$temp['deposit_rcv'] += $temp_deposit_rcv;			$temp['deposit_used'] += $temp_deposit_used;		}	}	if(!$got_deposit){		unset($temp['deposit_rcv'], $temp['deposit_used']);	}		// set the category levels to be extract	if ($cat_level==1) $q1 = $con_multi->sql_query("select * from category where level = $cat_level and active=1");	else $q1 = $con_multi->sql_query("select * from category where level = $cat_level and root_id=$col_level_id and active=1");	while($r = $con_multi->sql_fetchassoc($q1)){		$dept_col_total[$r['id']]['amt'] += 0;		$dept_col_total[$r['id']]['count'] += 0;		$department[$r['id']] = $r['description'];	}	$con_multi->sql_freeresult($q1);		$tmp_dept_col_total = $dept_col_total;		if($tmp_dept_col_total){		$idx = 0;		uasort($tmp_dept_col_total, "cmp");		$category_have_subcat = array();				foreach($tmp_dept_col_total as $s=>$f){			if($idx<$top){				$new_data[$s] = $dept_data[$s];				$new_dept[$s] = $department[$s];				$new_dept_col_total[$s] = $dept_col_total[$s];								// check whether got sub category				$q1 = $con_multi->sql_query("select * from category where root_id = ".mi($s));								if($con_multi->sql_numrows($q1) > 0) $category_have_subcat[$s] = 1;				$con_multi->sql_freeresult($q1);			}else{				$new_dept[0] = 'Others';				if($dept_data[$s]){					foreach($dept_data[$s] as $id=>$amt)					{						$new_data[0][$id] += $amt;					}				}				if($dept_col_total[$s]){					foreach($dept_col_total[$s] as $id=>$amt)					{						if($d == 1 && $id == "count"){							$new_dept_col_total[0][$id] = 1;							continue;						}												$new_dept_col_total[0][$id] += $amt;					}				}			}			$idx++; 		}		$department = $new_dept;		$dept_data = $new_data;		$dept_col_total = $new_dept_col_total;	}		/*asort($department);	$sequence = array_keys($department);	$idx = 0;	foreach($sequence as $s)	{		if ($idx<$top)		{			$new_data[$s] = $dept_data[$s];			$new_dept[$s] = $department[$s];			$new_dept_col_total[$s] = $dept_col_total[$s];		}		else		{			$new_dept[0] = 'Others';			if($dept_data[$s]){				foreach($dept_data[$s] as $id=>$amt)				{					$new_data[0][$id] += $amt;				}			}			if($dept_col_total[$s]){				foreach($dept_col_total[$s] as $id=>$amt)				{					$new_dept_col_total[0][$id] += $amt;				}			}		}		$idx++; 	}	$department = $new_dept;	$dept_data = $new_data;	$dept_col_total = $new_dept_col_total;*/		// if found total count...	if($dept_grand_total_count){		$dept_grand_total = $dept_grand_total_amt/$dept_grand_total_count;		$temp["service_charges"] = $temp["service_charges"]/$dept_grand_total_count;		$temp["discount"] = $temp["discount"]/$dept_grand_total_count;		$temp["mm_disc"] = $temp["mm_disc"]/$dept_grand_total_count;		$temp["rounding"] = $temp["rounding"]/$dept_grand_total_count;		$temp["over_amt"] = $temp["over_amt"]/$dept_grand_total_count;	}	//calculate accummulate total (service_charges, mm_disc, discount and rounding)	$temp_acc = array();	$total = 0;	$temp_acc["service_charges"] = $dept_grand_total + $temp["service_charges"];	$temp_acc["discount"] = $temp_acc["service_charges"] + $temp["discount"];	$temp_acc["mm_disc"] = $temp_acc["discount"] + $temp["mm_disc"];	$temp_acc["rounding"] = $temp_acc["mm_disc"] + $temp["rounding"];	$total = $temp_acc["over_amt"] = $temp_acc["rounding"] + $temp["over_amt"];		if($got_deposit){		$temp_acc['deposit_rcv'] = $temp_acc['over_amt'] + $temp['deposit_rcv'];		$total = $temp_acc['deposit_used'] = $temp_acc['deposit_rcv'] + $temp['deposit_used'];	}		//print_r($dept_data);	// calculate dept-total, row-total, col-total...	$smarty->assign("d_amt_type", $d_amt_type);	$smarty->assign("col_level_id", $col_level_id);	$smarty->assign("cat_level", $cat_level);	$smarty->assign("department", $department);	$smarty->assign("dept_data", $dept_data);	$smarty->assign("dept_col_total", $dept_col_total);	$smarty->assign("dept_row_total", $dept_row_total);	$smarty->assign("dept_grand_total", $dept_grand_total);	$smarty->assign("dept_service_charges_total", $dept_service_charges_total);	$smarty->assign("dept_discount", $dept_discount);	$smarty->assign("dept_mm_disc", $dept_mm_disc);	$smarty->assign("dept_rounding", $dept_rounding);	$smarty->assign("dept_over", $dept_over);	$smarty->assign("dept_deposit_rcv", $dept_deposit_rcv);	$smarty->assign("dept_deposit_used", $dept_deposit_used);	$smarty->assign("temp", $temp);	$smarty->assign("temp_acc", $temp_acc);	$smarty->assign("total", $total);	$smarty->assign("dept_total", $dept_total);	$smarty->assign("category_have_subcat", $category_have_subcat);	if($got_deposit)	$smarty->assign("got_deposit", $got_deposit);	if(!$department_first_load){		$smarty->display("sales_live.department.tpl");	}}function cmp($a,$b){	if (($a['amt']==$b['amt'])) return 0;    else return ($a['amt']>$b['amt']) ? -1:1;}function get_member_list(){	global $con,$smarty,$pos_config,$sort_list,$sessioninfo, $config,$con_multi;	$date = $_REQUEST['date'];	$m = $_REQUEST['m'];	$level = $_REQUEST['level'];	$lid = $_REQUEST['lid'];	$member_lvl2_bid = $_REQUEST["member_lvl2_bid"];	$got_deposit = false;		if($m == ''){		$member_first_load = 1;		$m = 1;	}		if($level == ''){		if(BRANCH_CODE == 'HQ'){			$level = 1;		}else{			$level = 2;		}	}		$where[] = "pos.date = '".($date)."' and pos.cancel_status=0";			if($_REQUEST['branch_id']){		$q1 = $con_multi->sql_query("select id,code from branch order by sequence,code");		while ($r = $con_multi->sql_fetchassoc($q1))		{			$branches[] = $r['id'];			if($_REQUEST['branch_id']==$r['id']){	            $branch_code = $r['code'];			}		}		$con_multi->sql_freeresult($q1);	}		if(strpos($_REQUEST['branch_id'],'bg,')===0){   // is branch group		list($dummy,$bg_id) = explode(",",$_REQUEST['branch_id']);		$branch_group = $this->branch_group;		foreach($branch_group['items'][$bg_id] as $bid=>$r){			$ids[] = $bid;		}		$where[] = "branch_id in (".join(',',$ids).")";		$race_filter = "and ps.branch_id in (".join(',',$ids).")";		$branch_code = $branch_group['header'][$bg_id]['code'];	}else{		//	echo $_REQUEST['branch_id'];        $bid  = get_request_branch(true);		//echo $bid;		if (BRANCH_CODE != 'HQ'){            $_REQUEST['branch_id'] = $bid;            $branch_code = BRANCH_CODE;		}else{			if($bid==0){                $branch_code = "All";			}else{                $con_multi->sql_query("select code from branch where id=".mi($bid)) or die(mysql_error());				$branch_code = $con_multi->sql_fetchfield(0);				$con_multi->sql_freeresult();			}		}		if($_REQUEST['branch_id'] > 0){			$where[] = $_REQUEST['branch_id']!=''?'pos.branch_id = '.mi($_REQUEST['branch_id']):1;			$race_filter = $_REQUEST['branch_id']!=''?'and ps.branch_id = '.mi($_REQUEST['branch_id']):1;		}	}		// switch between sales, promotion and count	switch ($m){	    case 1:			$val_type = "sum(if(pp.type='Cash',pp.amount-pos.amount_change,pp.amount))";	    	$m_amt_type = "Sales Amt: " . $config["arms_currency"]["symbol"];						$deposit_select = ", sum(if(pp.type='Deposit',pp.amount,0)) as deposit_amt, sum(if(pp.type='Deposit' and pos.amount_change>0,if((select count(*) from pos_payment pp_cash where pp_cash.branch_id=pos.branch_id and pp_cash.counter_id=pos.counter_id and pp_cash.date=pos.date and pp_cash.pos_id=pos.id and pp_cash.type='Cash' and pp_cash.adjust=0)=0,pos.amount_change/(select count(*) from pos_payment pp_cash where pp_cash.branch_id=pos.branch_id and pp_cash.counter_id=pos.counter_id and pp_cash.date=pos.date and pp_cash.pos_id=pos.id and pp_cash.type='Deposit' and pp_cash.adjust=0),0),0)) as deposit_refund_amt";			break;	    case 2:			$val_type = "pi.price-pi.discount";			$where1 = " and (pi.discount > 0 or pi.discount2 > 0)";	    	$m_amt_type = "Promotion: " . $config["arms_currency"]["symbol"];	    	break;	    case 3:	    	$val_type = "count(distinct pos.id, pos.counter_id, pos.cashier_id, pos.date)";	    	$m_amt_type = "No of Trans.: ";	    	break;	    case 4:	    	$val_type = "count(distinct pos.id, pos.counter_id, pos.cashier_id, pos.date) as trans_count, sum(if(pp.type='Cash',pp.amount-pos.amount_change,pp.amount))";	    	$m_amt_type = "Buying Power: " . $config["arms_currency"]["symbol"];	    	$smarty->assign("m_is_bp", 1);	    	break;	    case 5:	    	$val_type = "sum(pi.qty)";	    	$m_amt_type = "Sales Qty: ";	    	break;	}		// here is where switches the levels of view	switch ($level){		case 1:	// by Branch			$select_id = "b.id";			$select_desc = "b.code";			$left_join = "left join branch b on b.id = pos.branch_id";			$smarty->assign("member_level_type", "Branch");			$where[] = "pos.branch_id = ";			break;		case 2: // by Location			$select_id = "cs.location";			$select_desc = "cs.location";			$left_join = "left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id";			if($lid){				$where[] = "pos.branch_id = ".$lid;				$branch_code = get_branch_code($lid);			}			//$where[] = "cs.location = ";			$smarty->assign("lvl_desc", $branch_code);			$smarty->assign("member_level_type", "Location");			$smarty->assign("member_lvl2_bid", $lid);			break;			case 3: // by Counter			$select_id = "cs.id";			$select_desc = "cs.network_name";			$left_join = "left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id";			if($member_lvl2_bid){				$where[] = "pos.branch_id = ".$member_lvl2_bid;			}			if($lid){				$where[] = "cs.id = ";				$loc_code = $lid;			}else{				$loc_code = "Untitled";			}			$smarty->assign("lvl_desc", $loc_code);			$smarty->assign("member_level_type", "Counter");			$smarty->assign("member_lvl2_bid", $member_lvl2_bid);			break;	}	if (isset($sort_list)){		foreach($sort_list as $slid=>$dummy){ // loop by sorting list such as branch, location or counter			if($slid == "Untitled" && $level == 2){				$loc_where = "and (cs.location is null or cs.location = '')";				$slid = "";			}elseif($slid != "Untitled" && $level == 2){				$loc_where = "and cs.location = ";				$slid = ms($slid);			}else $slid = ms($slid);			if($level == 2 && $lid != ''){				$race_filter = 'and ps.branch_id = '.$lid;			}						$sql = $con_multi->sql_query("select ps.setting_value, ps.branch_id									from pos_settings ps									where ps.setting_name='race' $race_filter");						while ($r = $con_multi->sql_fetchassoc($sql)){				for($i=0; $i<strlen($r['setting_value']); $i++){					$branch_races[$r['branch_id']] = $r['setting_value'];					$race = substr($r['setting_value'], $i, 1);					$members['Member'][$race] = $race;					$members['Non Member'][$race] = $race;				}			}			$con_multi->sql_freeresult($sql);						// here starts with the listing of row			if ($m == 1 || $m == 3 || $m == 4){				$sql = $con_multi->sql_query("select $select_id as id, if($select_desc is not null, $select_desc, 'Untitled') as description, if(pos.race is null or pos.race = '', 'O', substring(pos.race,1,1)) as races, pos.member_no,				$val_type as amount, pos.branch_id $deposit_select				from pos				left join membership m on m.card_no = pos.member_no				left join pos_payment pp on pos.id = pp.pos_id and pos.branch_id = pp.branch_id and pos.counter_id = pp.counter_id and pos.date = pp.date and pp.adjust = 0				$left_join				where ".join(' and ', $where)." $loc_where ".$slid." and 				(pp.type != 'Discount' and pp.type !='Rounding' and pp.type != 'Mix & Match Total Disc')				group by pos.id, pos.branch_id, pos.date, pos.counter_id				order by description, races");			}elseif($m == 5){				$sql = $con_multi->sql_query("select $select_id as id, if($select_desc is not null, $select_desc, 'Untitled') as description, if(pos.race is null or pos.race = '', 'O', substring(pos.race,1,1)) as races, pos.member_no,				$val_type as amount, pos.branch_id				from pos				left join pos_items pi on pi.pos_id = pos.id and pi.branch_id = pos.branch_id and pi.date = pos.date and pi.counter_id = pos.counter_id 				left join membership m on m.card_no = pos.member_no 				$left_join				where ".join(' and ', $where)." $loc_where ".$slid."				group by pos.id, pos.branch_id, pos.date, pos.counter_id				order by description, races				");			}else{				$sql = $con_multi->sql_query("select $select_id as id, if($select_desc is not null, $select_desc, 'Untitled') as description, if(pos.race is null or pos.race = '', 'O', substring(pos.race,1,1)) as races, pos.member_no, $val_type as amount, pos.branch_id , pos.counter_id, pi.pos_id, pos.service_charges				from pos 				left join pos_items pi on pi.pos_id = pos.id and pi.branch_id = pos.branch_id and pi.date = pos.date and pi.counter_id = pos.counter_id 				left join membership m on m.card_no = pos.member_no 				$left_join				where ".join(' and ', $where)." $loc_where ".$slid." $where1				order by description, races, pos.id, pos.counter_id				");			}			$id = ""; $count = 0; $counter_id = 0;			while ($r = $con_multi->sql_fetchassoc($sql)){				if(!$r['description'])	$r['description'] = 'Untitled';				if ($id == ""){					$id = $r['pos_id'];					$counter_id = $r['counter_id'];				}								if($r['deposit_amt']>0){					$got_deposit = true;				}				if($m == 1 || $m == 4){					$r['amount'] -= $r['deposit_amt'] + $r['deposit_refund_amt'];				}								if ($id == $r['pos_id'] && $counter_id == $r['counter_id']) $count += 1;				else{					$id = $r['pos_id'];					$counter_id = $r['counter_id'];					$count = 1;				}								$member_info = array();				// get member info				if($r['member_no']){					$sql2 = $con_multi->sql_query("select *, if(m.race is null or m.race = '', 'O', substring(m.race,1,1)) as races											 from membership_history mh											 left join membership m on m.nric = mh.nric											 where mh.card_no = ".ms($r['member_no'])."											 order by mh.issue_date desc, mh.expiry_date desc 											 limit 1");					$member_info = $con_multi->sql_fetchrow($sql2);					$con_multi->sql_freeresult($sql2);				}												if($member_info){					$r['members'] = "Member";					$r['races'] = $member_info['races'];				}else{					$r['members'] = "Non Member";				}							if(!preg_match("/".$r['races']."/i", $branch_races[$r['branch_id']])) $r['races'] = "Others";				if ($m == 2 && $count == 1){					$q1 = $con_multi->sql_query("select pp.type, pp.amount as amt					from pos					left join pos_payment pp on pp.pos_id = pos.id and pp.counter_id = pos.counter_id and pp.branch_id = pos.branch_id and pp.date = pos.date and pp.adjust = 0					where pos.date = " . ms($date). " and pos.counter_id = ". mi($r["counter_id"]) ." 					and pos.branch_id = ". mi($r["branch_id"]) . " and pos.id = ". mi($r["pos_id"]) ." and (pp.type = 'Discount' or pp.type ='Rounding' or pp.type = 'Mix & Match Total Disc')");										$discount = $rounding = $mm_disc = 0;					while ($r1 = $con_multi->sql_fetchrow($q1)){						if ($r1["type"] == "Discount")							$discount += $r1["amt"];						elseif ($r1["type"] == "Rounding")							$rounding += $r1["amt"];						elseif ($r1["type"] == "Mix & Match Total Disc")							$mm_disc += $r1["amt"];					}					$con_multi->sql_freeresult($q1);					$r["amount"] = $r["amount"] + $r["service_charges"] - $discount - $mm_disc + $rounding;				}								if($m == 4){					$member_data[$r['description']][$r['members']][$r['races']]['tmp_amt'] += $r['amount'];					$member_data[$r['description']][$r['members']][$r['races']]['count'] += $r['trans_count'];					$member_data[$r['description']][$r['members']][$r['races']]['amt'] = $member_data[$r['description']][$r['members']][$r['races']]['tmp_amt'] / $member_data[$r['description']][$r['members']][$r['races']]['count'];					$member_row_total[$r['members']][$r['description']]['count'] += $r['trans_count'];					$member_col_total[$r['members']][$r['races']]['count'] += $r['trans_count'];					$member_row_grand_total[$r['description']]['count'] += $r['trans_count'];					$member_sub_grand_total[$r['members']]['count'] += $r['trans_count'];					$member_grand_total['count'] += $r['trans_count'];				}else{					$member_data[$r['description']][$r['members']][$r['races']]['amt'] += $r['amount'];					$member_row_total[$r['members']][$r['description']]['count'] = 1;					$member_col_total[$r['members']][$r['races']]['count'] = 1;					$member_row_grand_total[$r['description']]['count'] = 1;					$member_sub_grand_total[$r['members']]['count'] = 1;					$member_grand_total['count'] = 1;				}				$member_row_total[$r['members']][$r['description']]['amt'] += $r['amount'];				$member_col_total[$r['members']][$r['races']]['amt'] += $r['amount'];				$member_row_grand_total[$r['description']]['amt'] += $r['amount'];				$member_sub_grand_total[$r['members']]['amt'] += $r['amount'];				$member_grand_total['amt'] += $r['amount'];				$members['Member'][$r['races']] = $r['races'];				$members['Non Member'][$r['races']] = $r['races'];			}			$con_multi->sql_freeresult($sql);		}	}		$smarty->assign("members", $members);	$smarty->assign("m_amt_type", $m_amt_type);	$smarty->assign("member_data", $member_data);	$smarty->assign("member_total", $member_total);	$smarty->assign("member_row_total", $member_row_total);	$smarty->assign("member_row_grand_total", $member_row_grand_total);	$smarty->assign("member_col_total", $member_col_total);	$smarty->assign("member_sub_grand_total", $member_sub_grand_total);	$smarty->assign("member_grand_total", $member_grand_total);	if($got_deposit)	$smarty->assign("got_deposit", $got_deposit);		if(!$member_first_load){		$smarty->display("sales_live.member.tpl");	}}function get_payment_type_list(){	global $con, $smarty, $config, $pos_config, $sessioninfo, $sort_list, $branch_list, $con_multi;		$date = $_REQUEST['date'];	$pt = $_REQUEST['pt'];	$level = $_REQUEST['level'];	$lid = $_REQUEST['lid'];	$payment_type_lvl2_bid = $_REQUEST['payment_type_lvl2_bid'];	if($pt == ''){		$paytype_first_load = 1;		$pt = 1;	}		if($level == ''){		if(BRANCH_CODE == 'HQ'){			$level = 1;		}else{			$level = 2;		}	}	if($level == 1){		$blist = $branch_list;	}else{		$blist[$sessioninfo['branch_id']] = $sessioninfo['branch_id'];	}		// extract payment type from pos setting	$payment_type = array();	foreach($blist as $tmp_bid){		$q1 = $con_multi->sql_query("select * from pos_settings where setting_name = 'payment_type' and branch_id = ".mi($tmp_bid));				$ps_info = $con_multi->sql_fetchrow($q1);		$ps_payment_type = unserialize($ps_info['setting_value']);		$con_multi->sql_freeresult($q1);		if($ps_payment_type){			foreach($ps_payment_type as $ptype=>$val){				if(!$val) continue;				//$ptype = ucwords(str_replace("_", " ",$ptype));				if(strpos(strtolower($ptype), "credit_card")===0){					$ptype = str_replace("_", " ",$ptype);	// only replace "_" to " " if it is credit card				}				$ptype = ucwords($ptype);				if($ptype == "Credit Card") $ptype = "Credit Cards";								if($payment_type[$ptype])  continue;				$payment_type[$ptype] = $ptype;			}		}	}		if(!$payment_type){		foreach($pos_config['payment_type'] as $ptype){			//$ptype = ucwords(str_replace("_", " ",$ptype));			if(strpos(strtolower($ptype), "credit_card")===0){				$ptype = str_replace("_", " ",$ptype);	// only replace "_" to " " if it is credit card			}			$ptype = ucwords($ptype);			if($ptype == "Credit Card") $ptype = "Credit Cards";			$payment_type[$ptype] = $ptype;		}	}		// extract currency information	$con_multi->sql_query("select * from pos_settings where branch_id = ".mi($sessioninfo['branch_id'])." and setting_name = 'currency'");	$r = $con_multi->sql_fetchrow();	$con_multi->sql_freeresult();	$currencies = $r['setting_value'];		//unserialize it if found having any currency	if ($currencies) $currencies = unserialize($currencies);		// combine it into one array	if (is_array($currencies))	{		$payment_type = array_merge($payment_type, array_keys($currencies));	}		$where[] = "pos.date = '".($date)."' and pos.cancel_status=0";		if($_REQUEST['branch_id']){		$con_multi->sql_query("select id,code from branch order by sequence,code");		while ($r = $con_multi->sql_fetchrow())		{			$branches[] = $r['id'];			if($_REQUEST['branch_id']==$r['id']){	            $branch_code = $r['code'];			}		}		$con_multi->sql_freeresult();	}		if(strpos($_REQUEST['branch_id'],'bg,')===0){   // is branch group		list($dummy,$bg_id) = explode(",",$_REQUEST['branch_id']);		$branch_group = $this->branch_group;		foreach($branch_group['items'][$bg_id] as $bid=>$r){			$ids[] = $bid;		}		$where[] = "branch_id in (".join(',',$ids).")";		$branch_code = $branch_group['header'][$bg_id]['code'];	}else{		//echo $_REQUEST['branch_id'];        $bid  = get_request_branch(true);		//echo $bid;		if (BRANCH_CODE != 'HQ'){            $_REQUEST['branch_id'] = $bid;            $branch_code = BRANCH_CODE;		}else{			if($bid==0){                $branch_code = "All";			}else{                $con_multi->sql_query("select code from branch where id=".mi($bid)) or die(mysql_error());				$branch_code = $con_multi->sql_fetchfield(0);				$con_multi->sql_freeresult();			}		}		if($_REQUEST['branch_id'] > 0){			$where[] = $_REQUEST['branch_id']!=''?'pos.branch_id = '.mi($_REQUEST['branch_id']):1;		}	}		$deposit_select = ", (if(pp.type='Deposit' and pos.amount_change>0,if((select count(*) from pos_payment pp_cash where pp_cash.branch_id=pos.branch_id and pp_cash.counter_id=pos.counter_id and pp_cash.date=pos.date and pp_cash.pos_id=pos.id and pp_cash.type='Cash' and pp_cash.adjust=0)=0,pos.amount_change/(select count(*) from pos_payment pp_cash where pp_cash.branch_id=pos.branch_id and pp_cash.counter_id=pos.counter_id and pp_cash.date=pos.date and pp_cash.pos_id=pos.id and pp_cash.type='Deposit' and pp_cash.adjust=0),0),0)) as deposit_refund_amt";		// switch between sales, promotion and count	switch ($pt){	    case 1:	    	$val_type = "round(if(pp.type='Cash',pp.amount-pos.amount_change,pp.amount), 2)";	    	//$short_over_val_type = "round(pos.amount, 2)";			//$short_over_val_type = "round(pos.amount_tender-pos.amount-pos.amount_change-pos.service_charges, 2)";	    	$pt_amt_type = "Sales: " . $config["arms_currency"]["symbol"];	    	$number_format = 2;			break;	    case 2:	    	$val_type = "count(distinct pp.counter_id, pp.pos_id, pp.id)";	    	//$short_over_val_type = "count(distinct pos.id)";	    	$group_by = "group by id, payment_type";	    	$pt_amt_type = "No of Trans.: ";	    	$number_format = 0;	    	break;	}		// here is where switches the levels of view	switch ($level){		case 1:	// by Branch			$select_id = "b.id";			$select_desc = "b.code";			$left_join = "left join branch b on b.id = pos.branch_id";			$where[] = "pos.branch_id = ";			$smarty->assign("ptype_level_type", "Branch");			break;		case 2: // by Loation			$select_id = "cs.location";			$select_desc = "cs.location";			$left_join = "left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id";			if($lid){				$where[] = "pos.branch_id = ".$lid;				$branch_code = get_branch_code($lid);			}			//$where[] = "cs.location = ";			$smarty->assign("lvl_desc", $branch_code);			$smarty->assign("ptype_level_type", "Location");			$smarty->assign("payment_type_lvl2_bid", $lid);			break;			case 3: // by Counter			$select_id = "cs.id";			$select_desc = "cs.network_name";			$left_join = "left join counter_settings cs on cs.id = pos.counter_id and cs.branch_id = pos.branch_id";			if($payment_type_lvl2_bid){				$where[] = "pos.branch_id = ".$payment_type_lvl2_bid;			}			if($lid){				$where[] = "cs.id = ";				$loc_code = $lid;			}else{				$loc_code = "Untitled";			}			$smarty->assign("lvl_desc", $loc_code);			$smarty->assign("ptype_level_type", "Counter");			$smarty->assign("payment_type_lvl2_bid", $payment_type_lvl2_bid);			break;	}	if (isset($sort_list)){		foreach($sort_list as $slid=>$dummy){ // loop by sorting list such as branch, location or counter						if($slid == "Untitled" && $level == 2){				$loc_where = "and (cs.location is null or cs.location = '')";				$slid = "";			}elseif($slid != "Untitled" && $level == 2){				$loc_where = "and cs.location = ";				$slid = ms($slid);			}else $slid = ms($slid);			// here starts with the listing of row			$sql = $con_multi->sql_query($q = "select $select_id as id, if($select_desc is not null, $select_desc, 'Untitled') as description, 									pp.type as payment_type, pp.remark,									$val_type as amount $deposit_select									from pos									left join pos_payment pp on pos.id = pp.pos_id and pos.branch_id = pp.branch_id and pos.counter_id = pp.counter_id and pos.date = pp.date									$left_join									where ".join(' and ', $where)." $loc_where ".$slid." and pp.type != 'Rounding' and pp.changed != 1									$group_by									order by description, payment_type");			//print "$q<br>";			while ($r = $con_multi->sql_fetchrow($sql)){				if($r['payment_type']=='Deposit'){					if(!$r['deposit_refund_amt'])	continue;					$r['payment_type'] = 'Cash';					$r['amount'] = $r['deposit_refund_amt']*-1;				}				if(!$r['description'])	$r['description'] = 'Untitled';				if($r['payment_type'] == "Mix & Match Total Disc") $r['payment_type'] = "Mix & Match Disc";								// to check the amount whether it is having any currency or not				if($pt == 1){					$amount = currency_check($r['remark'],$r['amount']);				}else{					$amount = $r['amount'];				}								// discount or mix and match discount				if($r['payment_type'] == 'Mix & Match Disc' || $r['payment_type'] == 'Discount'){					//$amount *= -1;					continue;	// skip discount, because discount is not payment				}								// loop if found the payment type is equal to config's payment type, set the payment type into Credit Card				foreach($pos_config['issuer_identifier'] as $cc=>$c){					foreach($c as $c_type){						if($r['payment_type'] == $c_type){							$r['payment_type'] = "Credit Cards";						}					}				}								// if found payment type is equal to "Others", set it become Credit Card as well								if($r['payment_type'] == "Others"){					$r['payment_type'] = "Credit Cards";				}								$paytype_data[$r['description']][$r['payment_type']]['amt'] += $amount;				$paytype_row_total[$r['description']]['amt'] += $amount;				$paytype_col_total[$r['payment_type']]['amt'] += $amount;				$paytype_grand_total['amt'] += $amount;				if(!preg_match('/^ewallet_/i', $r['payment_type'])) $r['payment_type'] = ucwords($r['payment_type']);				$payment_type[$r['payment_type']] = $r['payment_type'];			}			$con_multi->sql_freeresult($sql);						// search for short/over items			/*$sql = $con->sql_query("select $select_id as id, if($select_desc is not null, $select_desc, 'Untitled') as description,									$short_over_val_type as amount									from pos									left join pos_items pi on pi.pos_id = pos.id and pi.branch_id = pos.branch_id and pi.counter_id = pos.counter_id and pi.date = pos.date									$left_join									where ".join(' and ', $where)." $loc_where ".$slid." 									and round(pos.amount_tender-pos.amount_change,2)!=round(pos.amount,2) and pos.prune_status=0 and pos.cancel_status=0									group by pos.id, pos.branch_id");			while ($r = $con->sql_fetchrow($sql)){				if(!$r['description'])	$r['description'] = 'Untitled';				$r['payment_type'] = "Short/Over";				$paytype_data[$r['description']][$r['payment_type']]['amt'] += $r['amount'];				$paytype_row_total[$r['description']]['amt'] += $r['amount'];				$paytype_col_total[$r['payment_type']]['amt'] += $r['amount'];				$paytype_grand_total['amt'] += $r['amount'];				$payment_type[$r['payment_type']] = $r['payment_type'];			}			$con->sql_freeresult($sql);*/		}	}		// join the different payment types between pos settings and pos payment	/*foreach($pos_config['payment_type'] as $s_r){		if($s_r == "Mix & Match Total Disc") $s_r = "Mix & Match Disc";		if(!$payment_type[$s_r]) $payment_type[$s_r] = $s_r;	}*/		/*if($payment_type[$r['payment_type']] != ''){		$pos_config['payment_type'] = array_merge($pos_config['payment_type'], array_keys($payment_type));	}*/		if($payment_type && $config['counter_collection_extra_payment_type']){		foreach($config['counter_collection_extra_payment_type'] as $key){			$key = ucwords($key);			if($payment_type[$key]) $payment_type[$key] = $key;		}	}	$smarty->assign("pos_config",$pos_config);	$smarty->assign("pt_amt_type", $pt_amt_type);	$smarty->assign("number_format",$number_format);	asort($payment_type);	$smarty->assign("payment_type", $payment_type);	$smarty->assign("paytype_col_total", $paytype_col_total);	$smarty->assign("paytype_row_total", $paytype_row_total);	$smarty->assign("paytype_grand_total", $paytype_grand_total);	$smarty->assign("paytype_data", $paytype_data);	if(!$paytype_first_load){		$smarty->display("sales_live.payment_type.tpl");	}}function tran_details(){	global $con, $smarty, $con_multi;		$form = $_REQUEST;	$bid = $form['branch_id'];	$counter_id = $form['counter_id'];	$date = $form['date'];	$category_id = $form['category_id'];			$filter = 'pos.branch_id='.mi($bid).' and pos.counter_id='.mi($counter_id).' and pos.date='.ms($date).' and pos.cancel_status=0';        if($category_id != 0){		$left_join = 'left join pos_items pi on pi.pos_id = pos.id and pi.branch_id = pos.branch_id and pi.date = pos.date and pi.counter_id = pos.counter_id					  left join sku_items on pi.sku_item_id = sku_items.id					  left join sku on sku_items.sku_id = sku.id 					  left join category_cache cc on cc.category_id = sku.category_id					  left join category c on c.id = cc.p2';		$filter .= ' and cc.p1 = '.mi($category_id);		$group_by = 'group by pos.id';	}    	$con_multi->sql_query("select pos.*, pos.amount as payment_amount, user.u from pos left join user on pos.cashier_id=user.id $left_join where $filter $group_by order by end_time") or die(mysql_error());	$smarty->assign('items',$con_multi->sql_fetchrowset());	$con_multi->sql_freeresult();	$smarty->assign('not_cc', 1);	$smarty->display('counter_collection.sales_details.tpl');}// not using anymore since redirected to counter_collection.php/*function item_details(){    global $con, $smarty;		$form = $_REQUEST;	$bid = $form['branch_id'];	$counter_id = $form['counter_id'];	$date = $form['date'];	$id = $form['id'];    $filter = 'pos_id = '.mi($id).' and branch_id='.mi($bid).' and counter_id='.mi($counter_id).' and date='.ms($date);    // get items	$sql = "select pos_items.*,sku_items.description,sku_items.sku_item_code,sku_items.mcode from pos_items left join sku_items on pos_items.sku_item_id=sku_items.id where $filter";	$con->sql_query($sql) or die(mysql_error());	$temp = $con->sql_fetchrowset();	foreach($temp as $r){	    $r['selling_price'] = $r['price']-$r['discount'];	    if($r['price']!=0){            $r['discount_per'] = ($r['discount']/$r['price'])*100;		}		$table[] = $r;				$total['qty'] += $r['qty'];		$total['price'] += $r['price'];		$total['discount'] += $r['discount'];		$total['selling_price'] = $total['price']-$total['discount'];		if($total['price']!=0){            $total['discount_per'] = ($total['discount']/$total['price'])*100;		}	}	// get receipt details	$filter = '';	$filter = 'pos.id = '.mi($id).' and pos.branch_id='.mi($bid).' and pos.counter_id='.mi($counter_id).' and pos.date='.ms($date).' and pos.cancel_status=0';    $sql = "select pos.*,user.u from pos left join user on pos.cashier_id=user.id where $filter";    $q_rec = $con->sql_query($sql) or die(mysql_error());    $receipt_detail = $con->sql_fetchrow($q_rec);    	$smarty->assign('item_details',$table);	$smarty->assign('total',$total);	$smarty->assign('receipt_detail',$receipt_detail);	$smarty->display('pos_live.item_details.tpl');}*/function getBranchCode($bid){	global $con,$con_multi;		$con_multi->sql_query('select code from branch where id='.mi($bid)) or die(mysql_error());	$temp = $con_multi->sql_fetchrow();	$con_multi->sql_freeresult();	return $temp['code'];}function currency_check($remark,$amount){	$is_currency = strpos($remark," @");	if($is_currency == true){        $remark = explode(" @",$remark);		$amt = $remark[0];		$rate = $remark[1];		$loc_amt = $amt/$rate;	}    else{		$loc_amt = $amount;	}	return $loc_amt;}function smarty_random_color($str){	return '#'.substr(md5($str),0,6);}?>