<?php/*10/6/2011 4:20:01 PM Alex- created11/12/2012 4:57 PM Andy- Improve report program structure.- Add report can check for form selection and return if found error.- Fix report always show all counters data even user got filter by counter.12/13/2012 3:04 PM Andy- Add extra payment type feature.- Fix payment list report will show wrong amount if got payment adjust.3/21/2014 4:33 PM Justin- Modified to change the wording from "Check" to "Cheque".06/29/2016 15:00 Edwin- Bug fixed on incorrect receipt amount.12/22/2016 2:49 PM Andy- Fixed deposit received by check cannot display.2017-09-13 10:41 AM Qiu Ying- Bug fixed on treating special characters as wildcard character6/26/2018 11:39 AM Justin- Enhanced the report to have the ability to filter payment type using foreign currency.3/15/2019 2:55 PM Andy- Enhanced to load eWallet payment type into payment type selection.2/24/2020 5:24 PM William- Enhanced to change connection "$con" to use report server connection "$con_multi".*/include("include/common.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");if (!privilege('POS_REPORT')) js_redirect(sprintf($LANG['NO_PRIVILEGE'], 'POS_REPORT', BRANCH_CODE), "/index.php");include_once('pos_report.include.php');class POS_REPORT_PAYMENT_LIST extends Module{	var $months = array(1=>'Jan',	2=>'Feb',	3=>'Mar',	4=>'Apr',	5=>'May',	6=>'Jun',	7=>'Jul',	8=>'Aug',	9=>'Sep',	10=>'Oct',	11=>'Nov',	12=>'Dec');		//var $payment = array('Cash', 'Credit Card','Voucher', 'Coupon', 'Currency');	var $branch_allowed_payment_type_list = array();	    function __construct($title){        global $con, $smarty, $sessioninfo, $config, $con_multi, $appCore;		if(!$con_multi)	$con_multi = $appCore->reportManager->connectReportServer();		//default assign		//Branches		load_branches();		load_counter();               if (!$_REQUEST['date_to']) $_REQUEST['date_to'] = date('Y-m-d');		$payment_type = array('Cash'=>'Cash', 'Check'=>'Cheque', 'Voucher'=>'Voucher', 'Coupon'=>'Coupon', 'Debit'=>'Debit Card');				// got extra payment type		if($config['counter_collection_extra_payment_type']){			foreach($config['counter_collection_extra_payment_type'] as $ptype){				$payment_type[$ptype] = $ptype;			}		}								// allowed payment type		if(BRANCH_CODE != 'HQ')	$filter_bid= "and branch_id=".mi($sessioninfo['branch_id']);				$q1 = $con_multi->sql_query("select * from pos_settings where setting_name = 'payment_type' $filter_bid");		while($r = $con_multi->sql_fetchassoc($q1)){			$r['setting_value'] = unserialize($r['setting_value']);			if($r['setting_value']){				foreach($r['setting_value'] as $ptype=>$val){					if(!$val)	continue;										$this->branch_allowed_payment_type_list[$r['branch_id']][$ptype] = 1;				}			}			if($config['foreign_currency']) $this->branch_allowed_payment_type_list[$r['branch_id']]['foreign_currency'] = 1;		}		$con_multi->sql_freeresult($q1);		//print_r($this->branch_allowed_payment_type_list);				// eWallet		$q2 = $con_multi->sql_query("select * from pos_settings where setting_name = 'ewallet_type' $filter_bid");		while($r = $con_multi->sql_fetchassoc($q2)){			$r['setting_value'] = unserialize($r['setting_value']);			if($r['setting_value']){				foreach($r['setting_value'] as $ptype=>$val){					if(!$val)	continue;										$ptype = 'ewallet_'.$ptype;					$this->branch_allowed_payment_type_list[$r['branch_id']][$ptype] = 1;					$payment_type[$ptype] = $ptype;				}			}		}		$con_multi->sql_freeresult($q2);				//print_r($this->branch_allowed_payment_type_list);		$smarty->assign('branch_allowed_payment_type_list', $this->branch_allowed_payment_type_list);		$smarty->assign("payment_type", $payment_type);    	parent::__construct($title);    }	function _default(){		global $smarty, $sessioninfo;				if($_REQUEST['show_report']){			$this->generate_report();						if($_REQUEST['export_excel']){				include_once("include/excelwriter.php");		    	$smarty->assign('no_header_footer', true);		    	$filename = "report_consignment_bearing_".time().".xls";		    	log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Category Stock Analysis To Excel($filename)");		    	Header('Content-Type: application/msexcel');				Header('Content-Disposition: attachment;filename='.$filename);			}		}		$this->display();	}/*	function show_report(){        global $smarty;		$this->generate_report();		$this->display();	}	function print_report(){        global $smarty;    	$smarty->assign('no_header_footer', true);		$this->generate_report();	    $report_cache = $smarty->fetch("pos_report.payment_list.tpl");		$smarty->assign('report_cache', $report_cache);		$this->display("pos_report.payment_list.print.tpl");		exit;	}	function output_excel(){	    global $smarty, $sessioninfo;				//Checking Form		$this->generate_report();        include_once("include/excelwriter.php");    	$smarty->assign('no_header_footer', true);    	$filename = "report_consignment_bearing_".time().".xls";    	log_br($sessioninfo['id'], 'REPORT_EXPORT', 0, "Export Category Stock Analysis To Excel($filename)");    	Header('Content-Type: application/msexcel');		Header('Content-Disposition: attachment;filename='.$filename);		print ExcelWriter::GetHeader();		$this->display();		print ExcelWriter::GetFooter();	    exit;	}*/		function generate_report(){	    global $con, $smarty, $sessioninfo, $pos_config, $config, $con_multi;		//Checking Form		$form=$_REQUEST;				$counters = $form['counters'];		$err = array();		if(!$counters){			$err[] = "Please select counter.";		}else{			if($counters!='all'){				list($branch_id,$counter_id) = explode("|",$counters);				$branch_id=mi($branch_id);				$counter_id=mi($counter_id);								$filter[] = "pos.branch_id=".$branch_id;				if($counter_id!='all'){					$filter[] = "pos.counter_id=".$counter_id;				}			}elseif(BRANCH_CODE!='HQ'){				$branch_id = mi($sessioninfo['branch_id']);				$filter[] = "pos.branch_id=".$branch_id;			}		}						$rpt_title[]="Branch: ".get_branch_code($branch_id);		if ($counter_id){			$filter[]="pos.counter_id=$counter_id";			$con_multi->sql_query("select * from counter_settings where id=$counter_id");			$c=$con_multi->sql_fetchassoc();			$con_multi->sql_freeresult();			$rpt_title[]="Counter: ".$c['network_name'];				$_REQUEST['counter_type']= "single";		}				//payment type		if(!$form['payment_type']){			$err[] = "Please select payment type.";		}else{			if ($form['payment_type'] == "credit_card"){				$rpt_title[] = "Payment Type: Credit Card";				    foreach($pos_config['credit_card'] as $p){					$cc[] = ms($p);				}				$filter[]="pp.type in (".join(",",$cc).")";			}elseif($form['payment_type'] == "foreign_currency"){				$rpt_title[] = "Payment Type: Foreign Currency";				$filter[] = "pp.type in ('".join("','", array_keys($config['foreign_currency']))."')"; 			}else{				$pt_label = ucwords($form['payment_type']);				if($pos_config['payment_type_label'][$pt_label]) $pt_label = $pos_config['payment_type_label'][$pt_label];								$rpt_title[]= "Payment Type: ".$pt_label;					if($form['payment_type']=="Check"){					$filter[]="pp.type in ('Check','Cheque')";				}else{					$filter[]="pp.type = ".ms($form['payment_type']);				}							}		}				$date_to = ms($form['date_to']);		$filter[]="pos.date = $date_to";		$filter[] = "pp.adjust=0";		$rpt_title[]= "Date: ".$form['date_to'];				if ($form['search_remark'])	{			$filter[]="pp.remark like ".ms("%".replace_special_char($form['search_remark'])."%");			$rpt_title[]= "Remark: ".$form['search_remark'];		}				if($err){			$smarty->assign('err', $err);			return false;		}				if ($filter)	$where = "where pos.cancel_status=0 and ".implode(" and ",$filter);				$sql="select cs.network_name ,pp_user.u as pp_username,pp.id as pp_id, if(pp.type='Cash', pp.amount-pos.amount_change, pp.amount) as amount_payment,pp.type,pp.remark,pos_user.u as pos_username,pos.* 			from pos_payment pp 			left join pos on pos.id = pp.pos_id and pos.counter_id=pp.counter_id and pos.date=pp.date and pos.branch_id=pp.branch_id			left join user pp_user on pp_user.id=pp.approved_by			left join user pos_user on pos_user.id = pos.cashier_id			left join counter_settings cs on cs.id=pos.counter_id and cs.branch_id=pos.branch_id			$where			order by pos_time";		//print($sql);		/*$con_multi=new mysql_multi();		if(!$con_multi){			die("Error: Fail to connect report server");		}*/						$rid = $con_multi->sql_query($sql);				while ($r = $con_multi->sql_fetchassoc($rid)){			$total_disc = 0;			$disc_query = $con_multi->sql_query("select discount2 from pos_items where pos_id=".$r['id']." and branch_id=".$r['branch_id']." and counter_id=".$r['counter_id']." and date=".ms($r['date']));			while($d = $con_multi->sql_fetchassoc($disc_query)) {				$total_disc += $d['discount2'];			}			$con_multi->sql_freeresult($disc_query);			$r['receipt_amount'] = $r['amount'] + $r['service_charges'] - $total_disc;			$data[$r['branch_id']][$r['network_name']][$r['receipt_no']][$r['pp_id']]=$r;		}		$con_multi->sql_freeresult($rid);		//print_r($data);		$smarty->assign('table',true);		$smarty->assign('data',$data);				$report_title = join("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",$rpt_title);				$smarty->assign('report_title',$report_title);				//$con_multi->close_connection();			}}$report = new POS_REPORT_PAYMENT_LIST('Payment List Report');?>