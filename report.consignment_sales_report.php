<?php/*7/9/2009 4:07:15 PM Andy- add cost and gp9/7/2009 4:15:47 PM Andy- add show by year1/21/2010 5:24:40 PM Andy- change data range selection- optimize sql2/26/2010 2:23:00 PM Andy- Change report's sales data to include all consignment invoice type (normal, lost and over) 6/3/2010 3:22:08 PM Andy- Change to only show consignment sales invoice data.- SQL optimize. (Improve report generate speed)10/4/2010 3:44:07 PM Andy- Fix wrong discount bugs on cost if got discount pattern like 50+10%.- Change sales amount to use cost price.5/12/2011 2:50:31 PM Alex- add use hq cost6/13/2011 2:51:23 PM Alex- fix amount not use hq_cost7/6/2011 12:26:47 PM Andy- Change split() to use explode()2/17/2012 11:54:57 AM Alex- change use report server5/8/2013 4:52 PM Andy- Add "OF" into OFFER sales.- Add others remark into bb/sbb column header.7/16/2013 11:44 AM Fithri- add option to select price type to group as 'Others'- the word "Compare with" change to "Compare Total with"4/18/2015 12:19 PM Andy- Fix explode discount bug.5/25/2015 3:47 PM Andy- Enhanced to use invoice precalculated varaible instead of calculate manually.7/24/2015 2:25 PM Joo Chia- Enhance to show cost for every price type.6/5/2020 2:30 PM Andy- Added FORCE INDEX for query when subquery select sku_items_price_history.*/include("include/common.php");//$con = new sql_db('cutemaree.dyndns.org:4001','arms','990506','armshq');$maintenance->check(6);include("include/class.report.php");if (!$login) js_redirect($LANG['YOU_HAVE_LOGGED_OUT'], "/index.php");class Consignment_Sales_Report extends Report{	//var $price_type_category = array('N'=>array('N'),'OF'=>array('O','OF'));	//var $label = array('N'=>'N','OF'=>'OFFER','Others'=>'BB/SBB/Others');	/*function run_report($bid,$bg_id){		global $con,$smarty;		$table = $this->table;		$total = $this->total;		$price_type_category = $this->price_type_category;		$filter = $this->filter;		if(!$filter)    $filter = "where ci.ci_branch_id=$bid";		else    $filter .= " and ci.ci_branch_id=$bid";		$sql = "select cii.sku_item_id,ci.ci_date,(cii.ctn *uom.fraction + cii.pcs) as qty,((cii.selling_price/uom.fraction)*(cii.ctn *uom.fraction + cii.pcs)) as amount,((cii.cost_price/uom.fraction)*(cii.ctn *uom.fraction + cii.pcs)) as cost_b4_discount,(select trade_discount_code from sku_items_price_history siph where siph.branch_id=ci.ci_branch_id and siph.sku_item_id=cii.sku_item_id and siph.added<=ci.ci_date order by added desc limit 1) as trade_discount_code,sku.default_trade_discount_code,ci.discount_percent as cost_discount_percentfrom cileft join ci_items cii on ci.id=cii.ci_id and ci.branch_id=cii.branch_idleft join uom on cii.uom_id=uom.idleft join sku_items si on si.id=cii.sku_item_idleft join sku on sku.id=si.sku_id$filter";		//print $sql;die();		//print $sql."<br>";return;		$con->sql_query($sql) or die(mysql_error());		while($r = $con->sql_fetchrow()){			$price_type = $r['trade_discount_code']?$r['trade_discount_code']:$r['default_trade_discount_code'];			$p_cat = '';			foreach($price_type_category as $cat=>$c){				if(in_array($price_type,$c)){					$p_cat = $cat;					break;				}			}			if(!$p_cat) $p_cat = 'Others';			if($r['cost_discount_percent']>0){                $r['cost'] = $r['cost_b4_discount'] - (($r['cost_b4_discount']*$r['cost_discount_percent'])*0.01);			}else   $r['cost'] = $r['cost_b4_discount'];			//print "cost = ".$r['cost']."<br>";			$table[$bid][$p_cat]['qty'] += $r['qty'];			$table[$bid][$p_cat]['amt'] += $r['amount'];			$table[$bid]['total']['qty'] += $r['qty'];			$table[$bid]['total']['amt'] += $r['amount'];			$table[$bid]['total']['cost'] += $r['cost'];			//$table[$bid]['total']['gp_val'] += $r['qty']*($r['amount']-$r['cost']);			$table[$bid]['total']['gp_val'] += ($r['amount']-$r['cost']);			$total[$bg_id][$p_cat]['qty'] += $r['qty'];			$total[$bg_id][$p_cat]['amt'] += $r['amount'];			$total[$bg_id]['total']['qty'] += $r['qty'];			$total[$bg_id]['total']['amt'] += $r['amount'];			$total[$bg_id]['total']['cost'] += $r['cost'];			//$total[$bg_id]['total']['gp_val'] += $r['qty']*($r['amount']-$r['cost']);			$total[$bg_id]['total']['gp_val'] += ($r['amount']-$r['cost']);			$total['total'][$p_cat]['qty'] += $r['qty'];			$total['total'][$p_cat]['amt'] += $r['amount'];			$total['total']['total']['qty'] += $r['qty'];			$total['total']['total']['amt'] += $r['amount'];			$total['total']['total']['cost'] += $r['cost'];			//$total['total']['total']['gp_val'] += $r['qty']*($r['amount']-$r['cost']);			$total['total']['total']['gp_val'] += ($r['amount']-$r['cost']);		}		$con->sql_freeresult();		// get stock balance and selling_price		$tbl_s = 'stock_balance_b'.$bid.'_'.date('Y',strtotime($this->date_to));		$sql = "select sum(sb.qty) as qty,sum(sb.qty*ifnull((select price from sku_items_price_history siph where siph.branch_id=$bid and siph.added<".ms($this->date_to)." and siph.sku_item_id=sb.sku_item_id order by added desc limit 1),si.selling_price)) as total_selling_pricefrom $tbl_s sbleft join sku_items si on si.id=sb.sku_item_idwhere ((".ms($this->date_to)." between sb.from_date and sb.to_date) or (".ms($this->date_to).">=sb.from_date and sb.is_latest=1))";		$con->sql_query($sql,false,false);		$stock = $con->sql_fetchrow();		if($stock){      $table[$bid]['stock_qty'] += $stock['qty'];      $table[$bid]['total_selling_price'] += $stock['total_selling_price'];			$total[$bg_id]['stock_qty'] += $stock['qty'];			$total[$bg_id]['total_selling_price'] += $stock['total_selling_price'];			$total['total']['stock_qty'] += $stock['qty'];			$total['total']['total_selling_price'] += $stock['total_selling_price'];		}		$con->sql_freeresult();		unset($stock);		if($this->compare_others){  		// compare data with last year  		$filter2 = $this->filter2;      if(!$filter2)    $filter2 = "where ci.ci_branch_id=$bid";  		else    $filter2 .= " and ci.ci_branch_id=$bid";  		$sql = "select cii.sku_item_id,ci.ci_date,  	(cii.ctn *uom.fraction + cii.pcs) as qty,  	((cii.selling_price/uom.fraction)*(cii.ctn *uom.fraction + cii.pcs)) as amount,  	((cii.cost_price/uom.fraction)*(cii.ctn *uom.fraction + cii.pcs)) as cost_b4_discount,  	(select trade_discount_code from sku_items_price_history siph where siph.branch_id=ci.ci_branch_id and siph.sku_item_id=cii.sku_item_id and siph.added<=ci.ci_date order by added desc limit 1) as trade_discount_code,sku.default_trade_discount_code,ci.discount_percent as cost_discount_percent  	from ci    left join ci_items cii on ci.id=cii.ci_id and ci.branch_id=cii.branch_id  	left join uom on cii.uom_id=uom.id  	left join sku_items si on si.id=cii.sku_item_id  	left join sku on sku.id=si.sku_id  	$filter2";      $con->sql_query($sql) or die(mysql_error());  		while($r = $con->sql_fetchrow()){  		  if($r['cost_discount_percent']>0){          $r['cost'] = $r['cost_b4_discount'] - (($r['cost_b4_discount']*$r['cost_discount_percent'])*0.01);  			}else   $r['cost'] = $r['cost_b4_discount'];  			$table[$bid]['compared_total']['qty'] += $r['qty'];  			$table[$bid]['compared_total']['amt'] += $r['amount'];        $table[$bid]['compared_total']['cost'] += $r['cost'];  			//$table[$bid]['compared_total']['gp_val'] += $r['qty']*($r['amount']-$r['cost']);  		  $table[$bid]['compared_total']['gp_val'] += ($r['amount']-$r['cost']);  			$total[$bg_id]['compared_total']['qty'] += $r['qty'];  			$total[$bg_id]['compared_total']['amt'] += $r['amount'];  			$total[$bg_id]['compared_total']['cost'] += $r['cost'];  			//$total[$bg_id]['compared_total']['gp_val'] += $r['qty']*($r['amount']-$r['cost']);        $total[$bg_id]['compared_total']['gp_val'] += ($r['amount']-$r['cost']);  			$total['total']['compared_total']['qty'] += $r['qty'];  			$total['total']['compared_total']['amt'] += $r['amount'];  			$total['total']['compared_total']['cost'] += $r['cost'];  			//$total['total']['compared_total']['gp_val'] += $r['qty']*($r['amount']-$r['cost']);  			$total['total']['compared_total']['gp_val'] += ($r['amount']-$r['cost']);  		}  		$con->sql_freeresult();		  $tbl_s = 'stock_balance_b'.$bid.'_'.date('Y',strtotime($this->date_to2));		  $sql = "select sum(sb.qty) as qty,sum(sb.qty*ifnull((select price from sku_items_price_history siph where siph.branch_id=$bid and siph.added<".ms($this->date_to2)." and siph.sku_item_id=sb.sku_item_id order by added desc limit 1),si.selling_price)) as total_selling_pricefrom $tbl_s sbleft join sku_items si on si.id=sb.sku_item_idwhere ((".ms($this->date_to2)." between sb.from_date and sb.to_date) or (".ms($this->date_to2).">=sb.from_date and sb.is_latest=1))";			$con->sql_query($sql,false,false);			$last_year_stock = $con->sql_fetchrow();			if($last_year_stock){	      $table[$bid]['last_year_stock_qty'] += $last_year_stock['qty'];	      $table[$bid]['last_year_total_selling_price'] += $last_year_stock['total_selling_price'];				$total[$bg_id]['last_year_stock_qty'] += $last_year_stock['qty'];				$total[$bg_id]['last_year_total_selling_price'] += $last_year_stock['total_selling_price'];				$total['total']['last_year_stock_qty'] += $last_year_stock['qty'];				$total['total']['last_year_total_selling_price'] += $last_year_stock['total_selling_price'];			}			$con->sql_freeresult();			unset($last_year_stock);		}		// check hide zero total qty		if(!$this->show_zero_row){	    $qty = $table[$bid]['total']['qty'];	    $compared_qty = $table[$bid]['compared_total']['qty'];	    $stock_bal = $table[$bid]['stock_qty'];	    $compared_stock_bal = $table[$bid]['last_year_stock_qty'];			if(!$qty&&!$compared_qty&&!$stock_bal&&!$compared_stock_bal){			    if(!isset($this->hide_branches))    $this->hide_branches = array();			    $this->hide_branches[$bid] = $bid;				return;			}		}		$this->table = $table;		$this->total = $total;	}*/		private function run_report2($bid_list){    	global $con,$smarty, $sessioninfo;		        $con_multi=new mysql_multi(); 				$table = $this->table;		$total = $this->total;				//$price_type_category = $this->price_type_category;				$filter = $this->filter;				if(!$filter)    $filter = "where ci.ci_branch_id in (".join(',',$bid_list).")";		else    $filter .= " and ci.ci_branch_id in (".join(',',$bid_list).")";			if ($_REQUEST['hq_cost'])	$extrasql_cost= "hq_cost";		else	$extrasql_cost= "cii.cost_price/uom.fraction";				$sql = "select cii.sku_item_id,ci.ci_date,ci.ci_branch_id,(cii.ctn *uom.fraction + cii.pcs) as qty,((cii.cost_price/uom.fraction)*(cii.ctn *uom.fraction + cii.pcs)) as amount,(($extrasql_cost)*(cii.ctn *uom.fraction + cii.pcs)) as cost_b4_discount,(select trade_discount_code from sku_items_price_history siph FORCE INDEX (bsa) where siph.branch_id=ci.ci_branch_id and siph.sku_item_id=cii.sku_item_id and siph.added<=ci.ci_date order by added desc limit 1) as trade_discount_code,sku.default_trade_discount_code,ci.discount_percent as sheet_discount_percent, cii.discount as item_discount_percent,cii.item_disc_amt,cii.item_amt,cii.item_amt2from cileft join ci_items cii on ci.id=cii.ci_id and ci.branch_id=cii.branch_idleft join uom on cii.uom_id=uom.idleft join sku_items si on si.id=cii.sku_item_idleft join sku on sku.id=si.sku_id$filter";//print $sql;		if($sessioninfo['id'] == 1){			//print $sql;		}else{			//print "This report is under checking...";exit;		}	    $con_multi->sql_query($sql) or die(mysql_error());				/*		print '<pre>';		print_r($this->label);		print '</pre>';		*/			  	while($r = $con_multi->sql_fetchrow()){			$price_type = $r['trade_discount_code']?$r['trade_discount_code']:$r['default_trade_discount_code'];						/*			foreach($price_type_category as $cat=>$c){				if(in_array($price_type,$c)){					$p_cat = $cat;					break;				}			}			*/						if($r['item_amt'])	$r['amount'] = round($r['item_amt']+$r['item_disc_amt'],2);									if (!in_array($price_type,$this->label)) $p_cat = 'Others';			else $p_cat = $price_type;						/*			$p_cat = $price_type;			if(!$p_cat) $p_cat = 'Others';			*/						if($r['item_amt'] || $r['item_amt2']){				$r['cost'] = $r['item_amt2'];			}else{				$r['cost'] = $r['cost_b4_discount'];				if($r['item_discount_percent']){    // deduct item discount first					$r['item_discount_percent_arr'] = explode("+", $r['item_discount_percent']);					if($r['item_discount_percent_arr'][0]){						$r['cost'] = $r['cost'] * (1-($r['item_discount_percent_arr'][0]/100));					}					if($r['item_discount_percent_arr'][1]){						$r['cost'] = $r['cost'] * (1-($r['item_discount_percent_arr'][1]/100));					}				}				if($r['sheet_discount_percent']){					$r['sheet_discount_percent_arr'] = explode("+", $r['sheet_discount_percent']);					if($r['sheet_discount_percent_arr'][0]){						$r['cost'] = $r['cost'] * (1-($r['sheet_discount_percent_arr'][0]/100));					}					if($r['sheet_discount_percent_arr'][1]){						$r['cost'] = $r['cost'] * (1-($r['sheet_discount_percent_arr'][1]/100));					}				}			}									//if($r['cost_discount_percent']>0){        	//	$r['cost'] = $r['cost_b4_discount'] - (($r['cost_b4_discount']*$r['cost_discount_percent'])*0.01);			//}else   $r['cost'] = $r['cost_b4_discount'];									$ci_branch_id = mi($r['ci_branch_id']);			$bg_id = $this->bid_to_bgid[$ci_branch_id];						$table[$ci_branch_id][$p_cat]['qty'] += $r['qty'];			$table[$ci_branch_id][$p_cat]['amt'] += $r['amount'];			$table[$ci_branch_id][$p_cat]['cost'] += $r['cost'];			$table[$ci_branch_id]['total']['qty'] += $r['qty'];			$table[$ci_branch_id]['total']['amt'] += $r['amount'];			$table[$ci_branch_id]['total']['cost'] += $r['cost'];			$table[$ci_branch_id]['total']['gp_val'] += ($r['amount']-$r['cost']);						$total[$bg_id][$p_cat]['qty'] += $r['qty'];			$total[$bg_id][$p_cat]['amt'] += $r['amount'];			$total[$bg_id][$p_cat]['cost'] += $r['cost'];			$total[$bg_id]['total']['qty'] += $r['qty'];			$total[$bg_id]['total']['amt'] += $r['amount'];			$total[$bg_id]['total']['cost'] += $r['cost'];			//$total[$bg_id]['total']['gp_val'] += $r['qty']*($r['amount']-$r['cost']);			$total[$bg_id]['total']['gp_val'] += ($r['amount']-$r['cost']);						$total['total'][$p_cat]['qty'] += $r['qty'];			$total['total'][$p_cat]['amt'] += $r['amount'];			$total['total'][$p_cat]['cost'] += $r['cost'];			$total['total']['total']['qty'] += $r['qty'];			$total['total']['total']['amt'] += $r['amount'];			$total['total']['total']['cost'] += $r['cost'];			//$total['total']['total']['gp_val'] += $r['qty']*($r['amount']-$r['cost']);			$total['total']['total']['gp_val'] += ($r['amount']-$r['cost']);		}	  	$con_multi->sql_freeresult();	  		  	foreach($bid_list as $bid){			$bg_id = $this->bid_to_bgid[$bid];			// get stock balance and selling_price			$tbl_s = 'stock_balance_b'.$bid.'_'.date('Y',strtotime($this->date_to));			$sql = "select sum(sb.qty) as qty,sum(sb.qty*ifnull((select price from sku_items_price_history siph FORCE INDEX (bsa) where siph.branch_id=$bid and siph.added<".ms($this->date_to)." and siph.sku_item_id=sb.sku_item_id order by added desc limit 1),si.selling_price)) as total_selling_price			from $tbl_s sb			left join sku_items si on si.id=sb.sku_item_id			where ((".ms($this->date_to)." between sb.from_date and sb.to_date) or (".ms($this->date_to).">=sb.from_date and sb.is_latest=1))";			if($sessioninfo['id'] == 1){				//print $sql;exit;			}			$con_multi->sql_query($sql,false,false);			$stock = $con_multi->sql_fetchassoc();			if($stock){				$table[$bid]['stock_qty'] += $stock['qty'];				$table[$bid]['total_selling_price'] += $stock['total_selling_price'];	        				$total[$bg_id]['stock_qty'] += $stock['qty'];				$total[$bg_id]['total_selling_price'] += $stock['total_selling_price'];							$total['total']['stock_qty'] += $stock['qty'];				$total['total']['total_selling_price'] += $stock['total_selling_price'];			}			$con_multi->sql_freeresult();			unset($stock);	    }    	    /// compare	    if($this->compare_others){			$filter2 = $this->filter2;			if(!$filter2)    $filter2 = "where ci.ci_branch_id in (".join(',',$bid_list).")";  			else    $filter2 .= " and ci.ci_branch_id in (".join(',',$bid_list).")";    			$sql = "select cii.sku_item_id,ci.ci_date,ci.ci_branch_id,		  	(cii.ctn *uom.fraction + cii.pcs) as qty,		  	(($extrasql_cost/uom.fraction)*(cii.ctn *uom.fraction + cii.pcs)) as amount,		  	(($extrasql_cost/uom.fraction)*(cii.ctn *uom.fraction + cii.pcs)) as cost_b4_discount,		  	(select trade_discount_code from sku_items_price_history siph FORCE INDEX (bsa) where siph.branch_id=ci.ci_branch_id and siph.sku_item_id=cii.sku_item_id and siph.added<=ci.ci_date order by added desc limit 1) as trade_discount_code,sku.default_trade_discount_code,ci.discount_percent as sheet_discount_percent, cii.discount as item_discount_percent		  	from ci 		    left join ci_items cii on ci.id=cii.ci_id and ci.branch_id=cii.branch_id		  	left join uom on cii.uom_id=uom.id		  	left join sku_items si on si.id=cii.sku_item_id		  	left join sku on sku.id=si.sku_id		  	$filter2";	    	      	$con_multi->sql_query($sql) or die(mysql_error());	  		while($r = $con_multi->sql_fetchassoc()){				$ci_branch_id = mi($r['ci_branch_id']);				$bg_id = $this->bid_to_bgid[$ci_branch_id];		            $r['cost'] = $r['cost_b4_discount'];	            				if($r['item_discount_percent']){    // deduct item discount first	                $r['item_discount_percent_arr'] = explode("+", $r['item_discount_percent']);	                if($r['item_discount_percent_arr'][0]){						$r['cost'] = $r['cost'] * (1-($r['item_discount_percent_arr'][0]/100));					}					if($r['item_discount_percent_arr'][1]){						$r['cost'] = $r['cost'] * (1-($r['item_discount_percent_arr'][1]/100));					}				}								if($r['sheet_discount_percent']){	                $r['sheet_discount_percent_arr'] = explode("+", $r['sheet_discount_percent']);	                if($r['sheet_discount_percent_arr'][0]){						$r['cost'] = $r['cost'] * (1-($r['sheet_discount_percent_arr'][0]/100));					}					if($r['sheet_discount_percent_arr'][1]){						$r['cost'] = $r['cost'] * (1-($r['sheet_discount_percent_arr'][1]/100));					}				}				//if($r['cost_discount_percent']>0){				//$r['cost'] = $r['cost_b4_discount'] - (($r['cost_b4_discount']*$r['cost_discount_percent'])*0.01);				//}else   $r['cost'] = $r['cost_b4_discount'];					$table[$ci_branch_id]['compared_total']['qty'] += $r['qty'];				$table[$ci_branch_id]['compared_total']['amt'] += $r['amount'];				$table[$ci_branch_id]['compared_total']['cost'] += $r['cost'];				$table[$ci_branch_id]['compared_total']['gp_val'] += ($r['amount']-$r['cost']);					$total[$bg_id]['compared_total']['qty'] += $r['qty'];				$total[$bg_id]['compared_total']['amt'] += $r['amount'];				$total[$bg_id]['compared_total']['cost'] += $r['cost'];				$total[$bg_id]['compared_total']['gp_val'] += ($r['amount']-$r['cost']);					$total['total']['compared_total']['qty'] += $r['qty'];				$total['total']['compared_total']['amt'] += $r['amount'];				$total['total']['compared_total']['cost'] += $r['cost'];				$total['total']['compared_total']['gp_val'] += ($r['amount']-$r['cost']);	  		}	  		$con_multi->sql_freeresult();	  			  		foreach($bid_list as $bid){	  		  	$bg_id = $this->bid_to_bgid[$bid];	        	$tbl_s = 'stock_balance_b'.$bid.'_'.date('Y',strtotime($this->date_to2));	  		  	$sql = "select sum(sb.qty) as qty,sum(sb.qty*ifnull((select price from sku_items_price_history siph FORCE INDEX (bsa) where siph.branch_id=$bid and siph.added<".ms($this->date_to2)." and siph.sku_item_id=sb.sku_item_id order by added desc limit 1),si.selling_price)) as total_selling_price	  from $tbl_s sb	  left join sku_items si on si.id=sb.sku_item_id	  where ((".ms($this->date_to2)." between sb.from_date and sb.to_date) or (".ms($this->date_to2).">=sb.from_date and sb.is_latest=1))";	  	  			$con_multi->sql_query($sql,false,false);	  			$last_year_stock = $con_multi->sql_fetchassoc();	  			if($last_year_stock){		  	     	$table[$bid]['last_year_stock_qty'] += $last_year_stock['qty'];		  	      	$table[$bid]['last_year_total_selling_price'] += $last_year_stock['total_selling_price'];		  		  			$total[$bg_id]['last_year_stock_qty'] += $last_year_stock['qty'];		  			$total[$bg_id]['last_year_total_selling_price'] += $last_year_stock['total_selling_price'];		  		  			$total['total']['last_year_stock_qty'] += $last_year_stock['qty'];		  			$total['total']['last_year_total_selling_price'] += $last_year_stock['total_selling_price'];	  			}	  			$con_multi->sql_freeresult();	  			unset($last_year_stock);			}    	}	  	$con_multi->close_connection();  		  	// check hide zero total qty		if(!$this->show_zero_row){			foreach($bid_list as $bid){		  	    $qty = $table[$bid]['total']['qty'];		  	    $compared_qty = $table[$bid]['compared_total']['qty'];		  	    		  	    $stock_bal = $table[$bid]['stock_qty'];		  	    $compared_stock_bal = $table[$bid]['last_year_stock_qty'];	  		    	  			if(!$qty&&!$compared_qty&&!$stock_bal&&!$compared_stock_bal){	  			    if(!isset($this->hide_branches))    $this->hide_branches = array();	  			    $this->hide_branches[$bid] = $bid;	  				  continue;	  			}			}		}     		  		$this->table = $table;		$this->total = $total;  	}		function generate_report()	{		global $con, $smarty, $sessioninfo;		$branch_group = $this->branch_group;		$bg_id = $this->bg_id;		$bid_list = array();		$this->bid_to_bgid = array();		if($bg_id==-10000){ // All			foreach($branch_group['header'] as $bg_id=>$bg){        foreach($branch_group['items'][$bg_id] as $bid=>$r){					//$tbl_name['sku_items_sales_cache'] = 'sku_items_sales_cache_b'.$bid;					//$this->run_report($bid,$tbl_name,$bg_id);					$bid_list[] = $bid;     $this->bid_to_bgid[$bid] = $bg_id;				}				$this->bg_id_list[] = $bg_id;			}		}else{  // single branch group	    if($branch_group){        foreach($branch_group['items'][$bg_id] as $bid=>$r){					//$tbl_name['sku_items_sales_cache'] = 'sku_items_sales_cache_b'.$bid;					//$this->run_report($bid,$tbl_name,$bg_id);					$bid_list[] = $bid;					$this->bid_to_bgid[$bid] = $bg_id;				}			}			$this->bg_id_list[] = $bg_id;		}		if($bid_list) $this->run_report2($bid_list);				// sort		if($this->sort_by){			if($this->sort_by=='branch_code')   $this->sort_branch_code();			elseif($this->sort_by=='stock_qty')   $this->sort_stock_balance();			else    $this->sort_data();		}				if($sessioninfo['u']=='admin'){			//print_r($this->table);		}				$this->label['Others'] = 'Others';				/*		print '<pre>';		print_r($this->table);		print '</pre>';		*/				if ($sessioninfo['privilege']['SHOW_COST']){			$smarty->assign('type_col_count',count($this->label)*3);		} else {			$smarty->assign('type_col_count',count($this->label)*2);		}				$smarty->assign('table',$this->table);		$smarty->assign('total',$this->total);		$smarty->assign('label',$this->label);		$smarty->assign('price_type_category',$this->price_type_category);		$smarty->assign('bg_id_list',$this->bg_id_list);		$smarty->assign('branch_group',$this->branch_group);		$smarty->assign('hide_branches',$this->hide_branches);	}		function process_form()	{	    global $con,$smarty, $config;		// do my own form process		  		// call parent  		parent::process_form();  		$this->date_from = $_REQUEST['date_from'];  		$this->date_to = $_REQUEST['date_to'];		      $trade_discount_type = $this->get_trade_discount_type();	  $smarty->assign('trade_discount_type',$trade_discount_type);	  	  $this->label = array();	  foreach ($trade_discount_type as $t) {		if ($_REQUEST['group_others_'.$t]) continue;		$this->label[$t] = $t;	  }	        $this->bg_id = mi($_REQUEST['bg_id']);      $this->sort_by = $_REQUEST['sort_by'];      $this->sort_order = $_REQUEST['sort_order'];      $this->show_zero_row = $_REQUEST['show_zero_row'];      $this->compare_others = $_REQUEST['compare_others'];    	if($this->compare_others){    		$this->date_from2 = $_REQUEST['date_from2'];  		  $this->date_to2 = $_REQUEST['date_to2'];			  $filter2[] = 'ci.export_pos=1';			  $filter2[] = 'ci.ci_date between '.ms($this->date_from2).' and '.ms($this->date_to2);	      //$filter2[] = "ci.type='sales'";        $filter2[] = "ci.active=1";			  $this->filter2 = 'where '.join(' and ',$filter2);		  }      $filter[] = 'ci.export_pos=1';      $filter[] = 'ci.ci_date between '.ms($this->date_from).' and '.ms($this->date_to);      $filter[] = "ci.type='sales'";      $filter[] = "ci.active=1";      $this->filter = 'where '.join(' and ',$filter);      if ($this->err)  		{  			$smarty->assign("err", $this->err);  			$this->display();  			exit;  		}      //print_r($_REQUEST);	}		private function sort_branch_code(){		$bg_id = $this->bg_id;		if($this->branch_group){			if($bg_id==-10000){  // -10000 == 'all'			    // sort all branch			    foreach($this->branch_group['header'] as $bgid=>$bg){            usort($this->branch_group['items'][$bgid],array($this,'start_sort_branch_code'));				  }			}else{			    // sort single branch	        usort($this->branch_group['items'][$bg_id],array($this,'start_sort_branch_code'));			}		}				//print_r($this->branch_group['items'][$bg_id]);	}		private function start_sort_branch_code($a,$b){        $sort_order = $this->sort_order;        $col = 'code';        if ($a[$col]==$b[$col]) return 0;	    elseif($sort_order=='desc') return ($a[$col]>$b[$col]) ? -1 : 1;	    else return ($a[$col]>$b[$col]) ? 1 : -1;	}		private function sort_stock_balance(){        $bg_id = $this->bg_id;        if($this->branch_group){			if($bg_id==-10000){			    // sort all branch			    foreach($this->branch_group['header'] as $bgid=>$bg){                    usort($this->branch_group['items'][$bgid],array($this,'start_sort_stock_balance'));				}			}else{			    // sort single branch	            usort($this->branch_group['items'][$bg_id],array($this,'start_sort_stock_balance'));			}		}	}		private function start_sort_stock_balance($a,$b){        $sort_order = $this->sort_order;        $col = $this->sort_by;        $table = $this->table;        $branch_id_1 = $a['branch_id'];        $branch_id_2 = $b['branch_id'];		        if ($table[$branch_id_1][$col]==$table[$branch_id_2][$col]) return 0;	    elseif($sort_order=='desc') return ($table[$branch_id_1][$col]>$table[$branch_id_2][$col]) ? -1 : 1;	    else return ($table[$branch_id_1][$col]>$table[$branch_id_2][$col]) ? 1 : -1;	}		private function sort_data(){        $bg_id = $this->bg_id;        if($this->branch_group){			if($bg_id==-10000){			    // sort all branch			    foreach($this->branch_group['header'] as $bgid=>$bg){                    usort($this->branch_group['items'][$bgid],array($this,'start_sort_data'));				}			}else{			    // sort single branch	            usort($this->branch_group['items'][$bg_id],array($this,'start_sort_data'));			}		}	}		private function start_sort_data($a,$b){        $sort_order = $this->sort_order;        $col = $this->sort_by;        $table = $this->table;        $branch_id_1 = $a['branch_id'];        $branch_id_2 = $b['branch_id'];        $val_1 = $table[$branch_id_1]['total'][$col];        $val_2 = $table[$branch_id_2]['total'][$col];                if ($val_1==$val_2) return 0;	    elseif($sort_order=='desc') return ($val_1>$val_2) ? -1 : 1;	    else return ($val_1>$val_2) ? 1 : -1;	}	function get_trade_discount_type() {		global $con;		$trade_discount_type = array();		$con->sql_query("select code from trade_discount_type");		while ($tdt = $con->sql_fetchassoc()) {			$trade_discount_type[] = $tdt['code'];		}		return $trade_discount_type;	}		function default_values()	{      global $con, $smarty, $sessioninfo;	  $_REQUEST['date_from'] = date("Y-m-d", strtotime("-1 month"));      $_REQUEST['date_to'] = date("Y-m-d");      $smarty->assign('trade_discount_type',$this->get_trade_discount_type());	}}$report = new Consignment_Sales_Report('Consignment Sales Report');?>